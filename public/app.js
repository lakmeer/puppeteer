(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
// Generated by LiveScript 1.4.0
global.INTERACTION_MODE_IDLE = Symbol('idle');
global.INTERACTION_MODE_HOT = Symbol('hot');
global.INTERACTION_MODE_ACTIVE = Symbol('active');
global.LINK_STATUS_OK = Symbol('ok');
global.LINK_STATUS_MISMATCH = Symbol('type-mismatch');
global.KEY_Z = 90;
global.KEY_X = 88;
global.KEY_C = 67;
global.KEY_V = 86;
global.MOUSE_LEFT = 0;
global.MOUSE_RIGHT = 2;
global.COLOR_DARK_GREEN = 'green';
global.COLOR_BRIGHT_GREEN = '#0e3';
global.COLOR_YELLOW = '#ff0';
global.COLOR_RED = '#f23';
global.COLOR_DARK_RED = '#812';
global.COLOR_BRIGHT_RED = '#f89';
global.COLOR_DARK_BLUE = '#118';
global.COLOR_BRIGHT_BLUE = '#48f';
global.COLOR_PURPLE = '#929';
global.COLOR_MAGENTA = '#f3f';
global.SIGNAL_TYPE_POKE = Symbol('poke');
global.SIGNAL_TYPE_NUMBER = Symbol('number');
global.SIGNAL_TYPE_GRAPHIC = Symbol('graphic');
global.SIGNAL_TYPE_TEXT = Symbol('text');
global.GlobalServices = {
  Poke: {
    poke: function(it){
      return it;
    }
  }
};



}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],2:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var Blitter, out$ = typeof exports != 'undefined' && exports || this;
out$.Blitter = Blitter = (function(){
  Blitter.displayName = 'Blitter';
  var idx, prototype = Blitter.prototype, constructor = Blitter;
  idx = function(i){
    i == null && (i = 0);
    return function(){
      return i++;
    };
  }();
  function Blitter(arg$){
    this.size = arg$.size;
    this.canvas = document.createElement('canvas');
    this.canvas.width = this.canvas.height = this.size;
    this.ctx = this.canvas.getContext('2d');
    this.id = idx();
  }
  prototype.clear = function(){
    return this.ctx.clearRect(0, 0, this.size, this.size);
  };
  prototype.blitTo = function(ctx, x, y, w, h){
    if (w != null && h != null) {
      return ctx.drawImage(this.canvas, x, y, w, h);
    } else {
      return ctx.drawImage(this.canvas, x, y);
    }
  };
  return Blitter;
}());



},{}],3:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, defer, DragMonitor, out$ = typeof exports != 'undefined' && exports || this, slice$ = [].slice;
ref$ = require('std'), id = ref$.id, log = ref$.log, defer = ref$.defer;
out$.DragMonitor = DragMonitor = (function(){
  DragMonitor.displayName = 'DragMonitor';
  var normaliseMouse, normaliseTouch, prototype = DragMonitor.prototype, constructor = DragMonitor;
  normaliseMouse = function(λ){
    return function(arg$){
      var pageX, pageY;
      pageX = arg$.pageX, pageY = arg$.pageY;
      return λ(pageX, pageY);
    };
  };
  normaliseTouch = id;
  function DragMonitor(){
    var this$ = this;
    this.pointerRelease = bind$(this, 'pointerRelease', prototype);
    this.pointerEngage = bind$(this, 'pointerEngage', prototype);
    this.pointerMove = bind$(this, 'pointerMove', prototype);
    this.state = {
      enabled: true,
      dragging: false,
      released: false,
      down: false,
      Δx: 0,
      Δy: 0,
      last: [0, 0]
    };
    this.callbacks = {
      drag: id,
      done: id
    };
    document.addEventListener('keydown', function(arg$){
      var which;
      which = arg$.which;
      if (which === 16) {
        return this$.pointerEngage();
      }
    });
    document.addEventListener('keyup', function(arg$){
      var which;
      which = arg$.which;
      if (which === 16) {
        return this$.pointerRelease();
      }
    });
    document.addEventListener('mousedown', normaliseMouse(this.pointerEngage));
    document.addEventListener('mousemove', normaliseMouse(this.pointerMove));
    document.addEventListener('mouseup', normaliseMouse(this.pointerRelease));
    document.addEventListener('touchstart', normaliseTouch(this.pointerEngage));
    document.addEventListener('touchmove', normaliseTouch(this.pointerMove));
    document.addEventListener('touchend', normaliseTouch(this.pointerRelease));
  }
  prototype.dispatch = function(event){
    var args, ref$;
    args = slice$.call(arguments, 1);
    if (this.state.enabled) {
      return (ref$ = this.callbacks)[event].apply(ref$, args);
    }
  };
  prototype.pointerMove = function(x, y){
    var Δx, Δy;
    if (this.state.down || this.state.dragging) {
      this.state.dragging = true;
      this.state.Δx = Δx = x - this.state.last[0];
      this.state.Δy = Δy = y - this.state.last[1];
      this.state.last = [x, y];
      return this.dispatch('drag', Δx, Δy);
    }
  };
  prototype.pointerEngage = function(x, y){
    this.state.down = true;
    return this.state.last = [x, y];
  };
  prototype.pointerRelease = function(x, y){
    var this$ = this;
    x == null && (x = this.state.last[0]);
    y == null && (y = this.state.last[1]);
    defer(function(){
      return this$.state.dragging = false;
    });
    this.state.released = true;
    this.state.last = [x, y];
    this.state.down = false;
    this.dispatch('drag', 0, 0);
    return this.dispatch('done', this.state);
  };
  prototype.onPointerDrag = function(λ){
    return this.callbacks.drag = λ;
  };
  prototype.onPointerRelease = function(λ){
    return this.callbacks.done = λ;
  };
  prototype.toggleEventListening = function(state){
    return this.state.enabled = state;
  };
  return DragMonitor;
}());
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}



},{"std":19}],4:[function(require,module,exports){
(function (global){
// Generated by LiveScript 1.4.0
var ref$, id, log, raf, mash, randomFrom, v2, DragMonitor, Workspace, VisualNode, Link, Sprite, Puppet, KeyTrigger, MicTrigger, MouseTrigger, TimerTrigger, GraphicTrigger, MicRep, KeyRep, TimerRep, PuppetRep, GraphicRep, MouseRep, NumericShim, ShimRep, nodes, links, hotNode, workspace, z, x, c, v, p, left, mic, puppet, micNode, leftNode, zNode, xNode, cNode, vNode, pNode, puppetNode, animNodes, i, name, sprite, graphic, node, draw, dragger;
ref$ = require('std'), id = ref$.id, log = ref$.log, raf = ref$.raf, mash = ref$.mash, randomFrom = ref$.randomFrom, v2 = ref$.v2;
require('config');
DragMonitor = require('./drag-monitor').DragMonitor;
Workspace = require('./workspace').Workspace;
VisualNode = require('./visual-node').VisualNode;
Link = require('./link').Link;
Sprite = require('./sprite').Sprite;
Puppet = require('./puppet').Puppet;
KeyTrigger = require('./triggers/key').KeyTrigger;
MicTrigger = require('./triggers/mic').MicTrigger;
MouseTrigger = require('./triggers/mouse').MouseTrigger;
TimerTrigger = require('./triggers/timer').TimerTrigger;
GraphicTrigger = require('./triggers/graphic').GraphicTrigger;
MicRep = require('./representations/mic').MicRep;
KeyRep = require('./representations/key').KeyRep;
TimerRep = require('./representations/timer').TimerRep;
PuppetRep = require('./representations/puppet').PuppetRep;
GraphicRep = require('./representations/graphic').GraphicRep;
MouseRep = require('./representations/mouse').MouseRep;
ref$ = require('./shim'), NumericShim = ref$.NumericShim, ShimRep = ref$.ShimRep;
nodes = [];
links = [];
hotNode = null;
workspace = new Workspace;
z = new KeyTrigger(KEY_Z);
x = new KeyTrigger(KEY_X);
c = new KeyTrigger(KEY_C);
v = new KeyTrigger(KEY_V);
p = new TimerTrigger({
  time: 10,
  duty: 0.1,
  offset: 7
});
left = new MouseTrigger(MOUSE_LEFT);
mic = new MicTrigger;
puppet = new Puppet;
nodes.push(micNode = new VisualNode({
  content: mic,
  rep: new MicRep(mic),
  size: 70,
  pos: v2(50, 800)
}));
nodes.push(leftNode = new VisualNode({
  content: left,
  rep: new MouseRep(left),
  size: 70,
  pos: v2(50, 100)
}));
nodes.push(zNode = new VisualNode({
  content: z,
  rep: new KeyRep(z),
  size: 70,
  pos: v2(50, 195)
}));
nodes.push(xNode = new VisualNode({
  content: x,
  rep: new KeyRep(x),
  size: 70,
  pos: v2(50, 275)
}));
nodes.push(cNode = new VisualNode({
  content: c,
  rep: new KeyRep(c),
  size: 70,
  pos: v2(50, 355)
}));
nodes.push(vNode = new VisualNode({
  content: v,
  rep: new KeyRep(v),
  size: 70,
  pos: v2(50, 435)
}));
nodes.push(pNode = new VisualNode({
  content: p,
  rep: new TimerRep(p),
  size: 100,
  pos: v2(65, 685)
}));
nodes.push(puppetNode = new VisualNode({
  content: puppet,
  rep: new PuppetRep(puppet),
  size: 180,
  pos: v2(600, 450)
}));
animNodes = mash((function(){
  var i$, ref$, len$, results$ = [];
  for (i$ = 0, len$ = (ref$ = ['look', 'draw', 'drop', 'frustrate', 'choke', 'sing']).length; i$ < len$; ++i$) {
    i = i$;
    name = ref$[i$];
    sprite = new Sprite({
      src: "assets/" + name + "_01.png"
    });
    graphic = new GraphicTrigger({
      sprite: sprite
    });
    nodes.push(node = new VisualNode({
      content: graphic,
      rep: new GraphicRep(graphic),
      size: 130,
      pos: v2(280, 80 + 140 * i)
    }));
    results$.push([name, node]);
  }
  return results$;
}()));
links.push(VisualNode.link(animNodes.look, puppetNode));
links = links.concat(VisualNode.chain(leftNode, animNodes.draw, puppetNode));
links = links.concat(VisualNode.chain(zNode, animNodes.drop, puppetNode));
links = links.concat(VisualNode.chain(xNode, animNodes.frustrate, puppetNode));
links = links.concat(VisualNode.chain(pNode, animNodes.choke, puppetNode));
links = links.concat(VisualNode.chain(micNode, animNodes.sing, puppetNode));
draw = function(){
  puppet.pull();
  workspace.clear();
  links.map(function(it){
    return it.draw(workspace);
  });
  return nodes.map(function(it){
    return it.draw(workspace);
  });
};
global.GlobalServices.Poke.poke = function(){
  return setTimeout(draw, 0);
};
dragger = new DragMonitor;
dragger.onPointerRelease(draw);
dragger.onPointerDrag(function(Δx, Δy){
  if (hotNode != null) {
    hotNode.moveBy(v2(Δx, Δy));
  }
  return draw();
});
document.addEventListener('mousemove', function(arg$){
  var pageX, pageY, hotFound, i$, ref$, len$, node;
  pageX = arg$.pageX, pageY = arg$.pageY;
  if ((hotNode != null ? hotNode.state.mode : void 8) === INTERACTION_MODE_ACTIVE) {
    return;
  }
  hotFound = false;
  for (i$ = 0, len$ = (ref$ = nodes).length; i$ < len$; ++i$) {
    node = ref$[i$];
    if (node.boundsContains(v2(pageX, pageY))) {
      node.setMode(INTERACTION_MODE_HOT);
      hotFound = true;
      hotNode = node;
    } else {
      node.setMode(INTERACTION_MODE_IDLE);
    }
  }
  if (!hotFound) {
    hotNode = null;
  }
  return draw();
});
document.addEventListener('mousedown', function(){
  if (hotNode != null) {
    hotNode.setMode(INTERACTION_MODE_ACTIVE);
  }
  return draw();
});
document.addEventListener('mouseup', function(){
  if (hotNode != null) {
    hotNode.setMode(INTERACTION_MODE_HOT);
  }
  return draw();
});
workspace.install(document.body);
draw();



}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./drag-monitor":3,"./link":5,"./puppet":8,"./representations/graphic":11,"./representations/key":12,"./representations/mic":13,"./representations/mouse":14,"./representations/puppet":15,"./representations/timer":16,"./shim":17,"./sprite":18,"./triggers/graphic":21,"./triggers/key":22,"./triggers/mic":23,"./triggers/mouse":24,"./triggers/timer":25,"./visual-node":26,"./workspace":27,"config":1,"std":19}],5:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, abs, hyp, randomFrom, determineStatus, Link, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, abs = ref$.abs, hyp = ref$.hyp, randomFrom = ref$.randomFrom;
determineStatus = function(a, b){
  if (a.type !== b.type) {
    console.warn("Link::new - can't join ports of disparate types! - FROM:", a.type, "| TO:", b.type);
    return LINK_STATUS_MISMATCH;
  } else {
    return LINK_STATUS_OK;
  }
};
out$.Link = Link = (function(){
  Link.displayName = 'Link';
  var bendStrength, prototype = Link.prototype, constructor = Link;
  bendStrength = 50;
  function Link(from, to){
    this.from = from;
    this.to = to;
    this.from.assignLink(this);
    this.to.assignLink(this);
    this.status = determineStatus(this.from, this.to);
    this.signalStrength = 0;
  }
  prototype.pushTo = function(){
    if (this.status === LINK_STATUS_OK) {
      return this.to.push();
    } else {
      return null;
    }
  };
  prototype.pullFrom = function(){
    if (this.status === LINK_STATUS_OK) {
      return this.from.pull();
    } else {
      return null;
    }
  };
  prototype.getStatusColors = function(){
    switch (this.status) {
    case LINK_STATUS_OK:
      switch (this.to.type) {
      case SIGNAL_TYPE_NUMBER:
        return [COLOR_PURPLE, COLOR_MAGENTA];
      case SIGNAL_TYPE_GRAPHIC:
        return [COLOR_DARK_BLUE, COLOR_BRIGHT_BLUE];
      default:
        return [COLOR_DARK_GREEN, COLOR_BRIGHT_GREEN];
      }
      break;
    default:
      return [COLOR_RED, COLOR_BRIGHT_RED];
    }
  };
  prototype.inferSignalStrength = function(){
    return this.signalStrength = (function(){
      switch (this.from.type) {
      case SIGNAL_TYPE_POKE:
        if (this.from.pull()) {
          return 1;
        } else {
          return 0;
        }
        break;
      case SIGNAL_TYPE_GRAPHIC:
        if (this.from.pull()) {
          return 1;
        } else {
          return 0;
        }
        break;
      case SIGNAL_TYPE_NUMBER:
        return this.from.pull();
      default:
        return 1;
      }
    }.call(this));
  };
  prototype.draw = function(arg$){
    var ctx, d, b, ref$, baseColor, powerColor;
    ctx = arg$.ctx;
    d = hyp(this.to.pos, this.from.pos);
    d = this.to.pos.x - this.from.pos.x;
    b = d <= bendStrength ? bendStrength * Math.pow(abs(d) / bendStrength, 1.4) : bendStrength;
    this.inferSignalStrength();
    ref$ = this.getStatusColors(), baseColor = ref$[0], powerColor = ref$[1];
    ctx.lineWidth = 5;
    ctx.strokeStyle = baseColor;
    ctx.beginPath();
    ctx.moveTo(this.from.pos.x, this.from.pos.y);
    ctx.bezierCurveTo(this.from.pos.x + b, this.from.pos.y, this.to.pos.x - b, this.to.pos.y, this.to.pos.x, this.to.pos.y);
    ctx.stroke();
    ctx.globalAlpha = this.signalStrength;
    ctx.strokeStyle = powerColor;
    ctx.beginPath();
    ctx.moveTo(this.from.pos.x, this.from.pos.y);
    ctx.bezierCurveTo(this.from.pos.x + b, this.from.pos.y, this.to.pos.x - b, this.to.pos.y, this.to.pos.x, this.to.pos.y);
    ctx.stroke();
    return ctx.globalAlpha = 1;
  };
  return Link;
}());



},{"std":19}],6:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, v2, PortSet, InputSet, OutputSet, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, v2 = ref$.v2;
PortSet = (function(){
  PortSet.displayName = 'PortSet';
  var PORT_WIDTH, prototype = PortSet.prototype, constructor = PortSet;
  PORT_WIDTH = 20;
  function PortSet(ports, config){
    var ref$, pos;
    this.ports = ports != null
      ? ports
      : [];
    this.offset = (ref$ = config.offset) != null ? ref$ : 0, this.height = (ref$ = config.height) != null ? ref$ : 100, pos = (ref$ = config.pos) != null
      ? ref$
      : v2(0, 0);
    this.pos = v2(0, 0);
    this.moveTo(pos);
  }
  prototype.getPortVerticalPos = function(i){
    var space, start;
    space = (this.height - 20 * this.length) / (this.length === 1
      ? 1
      : this.length - 1);
    start = this.pos.y + PORT_WIDTH / 2 - this.height / 2;
    return start + i * (PORT_WIDTH + space);
  };
  prototype.moveTo = function(arg$){
    var x, y, i$, ref$, len$, i, port, results$ = [];
    x = arg$.x, y = arg$.y;
    this.pos.x = x + this.offset;
    this.pos.y = y;
    for (i$ = 0, len$ = (ref$ = this.ports).length; i$ < len$; ++i$) {
      i = i$;
      port = ref$[i$];
      results$.push(port.moveTo({
        x: this.pos.x,
        y: this.getPortVerticalPos(i)
      }));
    }
    return results$;
  };
  Object.defineProperty(prototype, 'next', {
    get: function(){
      var i$, ref$, len$, port;
      for (i$ = 0, len$ = (ref$ = this.ports).length; i$ < len$; ++i$) {
        port = ref$[i$];
        if (port.link == null) {
          return port;
        }
      }
    },
    configurable: true,
    enumerable: true
  });
  Object.defineProperty(prototype, 'length', {
    get: function(){
      return this.ports.length;
    },
    configurable: true,
    enumerable: true
  });
  prototype.pull = function(){
    return this.owner.pull();
  };
  return PortSet;
}());
out$.InputSet = InputSet = (function(superclass){
  var prototype = extend$((import$(InputSet, superclass).displayName = 'InputSet', InputSet), superclass).prototype, constructor = InputSet;
  function InputSet(){
    InputSet.superclass.apply(this, arguments);
  }
  return InputSet;
}(PortSet));
out$.OutputSet = OutputSet = (function(superclass){
  var prototype = extend$((import$(OutputSet, superclass).displayName = 'OutputSet', OutputSet), superclass).prototype, constructor = OutputSet;
  function OutputSet(){
    OutputSet.superclass.apply(this, arguments);
  }
  return OutputSet;
}(PortSet));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"std":19}],7:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, v2, Port, Input, Output, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, v2 = ref$.v2;
Port = (function(){
  Port.displayName = 'Port';
  var prototype = Port.prototype, constructor = Port;
  function Port(arg$){
    var pos;
    this.type = arg$.type, pos = arg$.pos;
    this.pos = v2(0, 0);
    this.moveTo(pos);
  }
  prototype.assignLink = function(link){
    this.link = link;
  };
  prototype.moveTo = function(pos){
    if (pos) {
      this.pos.x = pos.x;
      return this.pos.y = pos.y;
    }
  };
  prototype.push = function(){
    var ref$;
    return (ref$ = this.link) != null ? ref$.pushTo() : void 8;
  };
  prototype.pull = function(){
    var ref$;
    return (ref$ = this.link) != null ? ref$.pullFrom() : void 8;
  };
  return Port;
}());
out$.Input = Input = (function(superclass){
  var prototype = extend$((import$(Input, superclass).displayName = 'Input', Input), superclass).prototype, constructor = Input;
  function Input(arg$){
    var onPush;
    onPush = arg$.onPush;
    Input.superclass.apply(this, arguments);
    this.push = onPush;
  }
  return Input;
}(Port));
out$.Output = Output = (function(superclass){
  var prototype = extend$((import$(Output, superclass).displayName = 'Output', Output), superclass).prototype, constructor = Output;
  function Output(arg$){
    var onPull;
    onPull = arg$.onPull;
    Output.superclass.apply(this, arguments);
    this.pull = onPull;
  }
  return Output;
}(Port));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"std":19}],8:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, mash, Sprite, Input, Trigger, Puppet, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, mash = ref$.mash;
Sprite = require('./sprite').Sprite;
Input = require('./port').Input;
Trigger = require('./triggers/base').Trigger;
out$.Puppet = Puppet = (function(superclass){
  var inputSpec, prototype = extend$((import$(Puppet, superclass).displayName = 'Puppet', Puppet), superclass).prototype, constructor = Puppet;
  inputSpec = [
    {
      type: SIGNAL_TYPE_GRAPHIC
    }, {
      type: SIGNAL_TYPE_GRAPHIC
    }, {
      type: SIGNAL_TYPE_GRAPHIC
    }, {
      type: SIGNAL_TYPE_GRAPHIC
    }, {
      type: SIGNAL_TYPE_GRAPHIC
    }, {
      type: SIGNAL_TYPE_GRAPHIC
    }, {
      type: SIGNAL_TYPE_GRAPHIC
    }, {
      type: SIGNAL_TYPE_GRAPHIC
    }
  ];
  function Puppet(){
    var res$, i$, ref$, len$, ref1$, type, onPull;
    res$ = [];
    for (i$ = 0, len$ = (ref$ = inputSpec).length; i$ < len$; ++i$) {
      ref1$ = ref$[i$], type = ref1$.type, onPull = ref1$.onPull;
      res$.push(new Input({
        type: type
      }));
    }
    this.inputs = res$;
  }
  prototype.pull = function(){
    return this.chain = this.inputs.map(function(it){
      return it.pull();
    }).filter(id);
  };
  prototype.getSize = function(){
    var max, i$, ref$, len$, sprite;
    max = 0;
    for (i$ = 0, len$ = (ref$ = this.chain).length; i$ < len$; ++i$) {
      sprite = ref$[i$];
      if (sprite.width > max) {
        max = sprite.width;
      }
      if (sprite.height > max) {
        max = sprite.width;
      }
    }
    return max;
  };
  prototype.draw = function(arg$){
    var ctx, size, offset, ref$, winner;
    ctx = arg$.ctx, size = arg$.size, offset = (ref$ = arg$.offset) != null
      ? ref$
      : v2(0, 0);
    if (winner = (ref$ = this.chain)[ref$.length - 1]) {
      return winner.blitTo(ctx, offset.x, offset.y + size - winner.height);
    }
  };
  return Puppet;
}(Trigger));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./port":7,"./sprite":18,"./triggers/base":20,"std":19}],9:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var RectXYWH, RectXYS, out$ = typeof exports != 'undefined' && exports || this;
out$.RectXYWH = RectXYWH = (function(){
  RectXYWH.displayName = 'RectXYWH';
  var prototype = RectXYWH.prototype, constructor = RectXYWH;
  function RectXYWH(arg$, arg1$){
    this.x = arg$.x, this.y = arg$.y;
    this.w = arg1$.w, this.h = arg1$.h;
    this.update();
  }
  prototype.update = function(){
    this.left = this.x - this.w / 2;
    this.right = this.x + this.w / 2;
    this.top = this.y - this.h / 2;
    return this.bottom = this.y + this.h / 2;
  };
  prototype.contains = function(arg$){
    var x, y;
    x = arg$.x, y = arg$.y;
    return (this.left < x && x < this.right) && (this.top < y && y < this.bottom);
  };
  return RectXYWH;
}());
out$.RectXYS = RectXYS = (function(superclass){
  var prototype = extend$((import$(RectXYS, superclass).displayName = 'RectXYS', RectXYS), superclass).prototype, constructor = RectXYS;
  function RectXYS(pos, size){
    RectXYS.superclass.call(this, pos, {
      w: size,
      h: size
    });
  }
  prototype.moveTo = function(arg$){
    var x, y;
    x = arg$.x, y = arg$.y;
    this.x = x;
    this.y = y;
    return this.update();
  };
  return RectXYS;
}(RectXYWH));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{}],10:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Representation, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
out$.Representation = Representation = (function(){
  Representation.displayName = 'Representation';
  var bw, prototype = Representation.prototype, constructor = Representation;
  bw = 10;
  function Representation(target){
    this.target = target;
    this.size == null && (this.size = 100);
    this.state = {
      mode: INTERACTION_MODE_IDLE
    };
    this.canvas = document.createElement('canvas');
    this.canvas.width = this.canvas.height = this.size;
    this.ctx = this.canvas.getContext('2d');
  }
  prototype.draw = function(){
    this.drawBacking();
    return this.drawBorder();
  };
  prototype.drawBacking = function(){
    this.ctx.fillStyle = 'white';
    return this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
  };
  prototype.drawBorder = function(){
    this.ctx.fillStyle = this.borderColor();
    this.ctx.fillRect(0, 0, this.size, bw);
    this.ctx.fillRect(0, bw, bw, this.size - bw);
    this.ctx.fillRect(this.size - bw, bw, bw, this.size - bw);
    return this.ctx.fillRect(bw, this.size - bw, this.size - bw * 2, bw);
  };
  prototype.borderColor = function(){
    if (this.target.state) {
      return COLOR_YELLOW;
    } else {
      return this.modeColor(this.state.mode);
    }
  };
  prototype.modeColor = function(mode){
    switch (mode) {
    case INTERACTION_MODE_IDLE:
      return 'darkred';
    case INTERACTION_MODE_HOT:
      return 'orange';
    case INTERACTION_MODE_ACTIVE:
      return 'red';
    }
  };
  prototype.setMode = function(mode){
    return this.state.mode = mode;
  };
  Representation.NullRepresentation = new Representation({
    state: false
  });
  return Representation;
}());



},{"std":19}],11:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, v2, Representation, GraphicRep, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, v2 = ref$.v2;
Representation = require('./base').Representation;
out$.GraphicRep = GraphicRep = (function(superclass){
  var prototype = extend$((import$(GraphicRep, superclass).displayName = 'GraphicRep', GraphicRep), superclass).prototype, constructor = GraphicRep;
  function GraphicRep(){
    this.size = 130;
    GraphicRep.superclass.apply(this, arguments);
  }
  prototype.draw = function(target){
    superclass.prototype.draw.apply(this, arguments);
    this.ctx.globalAlpha = target.state ? 1 : 0.3;
    this.ctx.drawImage(target.sprite.canvas, 10, 10, this.size - 20, (target.sprite.size.y / target.sprite.size.x) * (this.size - 20));
    return this.ctx.globalAlpha = 1;
  };
  return GraphicRep;
}(Representation));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./base":10,"std":19}],12:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Representation, keysymbols, KeyRep, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
Representation = require('./base').Representation;
keysymbols = {
  90: 'Z',
  88: 'X',
  67: 'C',
  86: 'V'
};
out$.KeyRep = KeyRep = (function(superclass){
  var prototype = extend$((import$(KeyRep, superclass).displayName = 'KeyRep', KeyRep), superclass).prototype, constructor = KeyRep;
  function KeyRep(){
    KeyRep.superclass.apply(this, arguments);
    this.symbol = keysymbols[this.target.keycode];
  }
  prototype.draw = function(){
    superclass.prototype.draw.apply(this, arguments);
    this.ctx.fillStyle = 'black';
    this.ctx.font = this.size / 2 + "px monospace";
    this.ctx.textAlign = 'center';
    this.ctx.textBaseline = 'middle';
    return this.ctx.fillText(this.symbol, this.size / 2, this.size / 2, this.size, this.size);
  };
  return KeyRep;
}(Representation));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./base":10,"std":19}],13:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Representation, MicRep, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
Representation = require('./base').Representation;
out$.MicRep = MicRep = (function(superclass){
  var size, prototype = extend$((import$(MicRep, superclass).displayName = 'MicRep', MicRep), superclass).prototype, constructor = MicRep;
  size = 70;
  function MicRep(){
    MicRep.superclass.apply(this, arguments);
    this.ctx.fillStyle = 'grey';
    this.ctx.fillRect(0, 0, this.size, this.size);
    this.ctx.fillStyle = 'lightgrey';
    this.ctx.fillRect(0, 0, this.size, this.size);
    this.ctx.fillStyle = 'darkgrey';
    this.ctx.fillRect(0, this.size / 2, this.size, this.size / 2);
  }
  prototype.draw = function(target){
    var w, v, t;
    w = this.size / 5;
    v = target.value / 2;
    t = target.threshold / 2;
    this.ctx.fillStyle = 'white';
    this.ctx.fillRect(this.size / 2 - w / 2, 0, w, this.size);
    this.ctx.fillStyle = target.state ? 'red' : 'blue';
    this.ctx.fillRect(this.size / 2 - w / 2, this.size - 10 - this.size * v, w, this.size * v);
    this.ctx.globalAlpha = 1;
    return this.drawBorder();
  };
  return MicRep;
}(Representation));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./base":10,"std":19}],14:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Representation, keysymbols, MouseRep, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
Representation = require('./base').Representation;
keysymbols = {
  0: '◀',
  1: '■',
  2: '▶'
};
out$.MouseRep = MouseRep = (function(superclass){
  var prototype = extend$((import$(MouseRep, superclass).displayName = 'MouseRep', MouseRep), superclass).prototype, constructor = MouseRep;
  function MouseRep(){
    MouseRep.superclass.apply(this, arguments);
    this.symbol = keysymbols[this.target.buttonIndex];
  }
  prototype.draw = function(){
    superclass.prototype.draw.apply(this, arguments);
    this.ctx.fillStyle = 'black';
    this.ctx.font = this.size / 2 + "px monospace";
    this.ctx.textAlign = 'center';
    this.ctx.textBaseline = 'middle';
    return this.ctx.fillText(this.symbol, this.size / 2, this.size / 2, this.size, this.size);
  };
  return MouseRep;
}(Representation));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./base":10,"std":19}],15:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, v2, Representation, PuppetRep, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, v2 = ref$.v2;
Representation = require('./base').Representation;
out$.PuppetRep = PuppetRep = (function(superclass){
  var prototype = extend$((import$(PuppetRep, superclass).displayName = 'PuppetRep', PuppetRep), superclass).prototype, constructor = PuppetRep;
  function PuppetRep(){
    PuppetRep.superclass.apply(this, arguments);
  }
  prototype.draw = function(){
    this.size = this.target.getSize();
    this.canvas.width = this.canvas.height = this.size;
    this.drawBorder();
    return this.target.draw({
      ctx: this.ctx,
      size: this.size - 20,
      offset: v2(10, 10)
    });
  };
  return PuppetRep;
}(Representation));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./base":10,"std":19}],16:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var Representation, TimerRep, out$ = typeof exports != 'undefined' && exports || this;
Representation = require('./base').Representation;
out$.TimerRep = TimerRep = (function(superclass){
  var prototype = extend$((import$(TimerRep, superclass).displayName = 'TimerRep', TimerRep), superclass).prototype, constructor = TimerRep;
  function TimerRep(){
    TimerRep.superclass.apply(this, arguments);
  }
  prototype.draw = function(){
    superclass.prototype.draw.apply(this, arguments);
    this.ctx.fillStyle = 'black';
    this.ctx.font = this.size / 4 + "px monospace";
    this.ctx.textAlign = 'center';
    this.ctx.textBaseline = 'middle';
    this.ctx.beginPath();
    this.ctx.moveTo(0, this.size / 2);
    this.ctx.lineTo(this.size, this.size / 2);
    this.ctx.closePath();
    this.ctx.stroke();
    this.ctx.fillText(this.target.time, this.size / 2, this.size / 2 - this.size / 5, this.size, this.size);
    return this.ctx.fillText(this.target.duty, this.size / 2, this.size / 2 + this.size / 5, this.size, this.size);
  };
  return TimerRep;
}(Representation));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./base":10}],17:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Trigger, Representation, PokeShim, NumericShim, GraphicShim, ShimRep, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
Trigger = require('./triggers/base').Trigger;
Representation = require('./representations/base').Representation;
out$.PokeShim = PokeShim = (function(superclass){
  var inputSpec, prototype = extend$((import$(PokeShim, superclass).displayName = 'PokeShim', PokeShim), superclass).prototype, constructor = PokeShim;
  inputSpec = [{
    type: SIGNAL_TYPE_POKE,
    onPush: id
  }];
  function PokeShim(){
    PokeShim.superclass.apply(this, arguments);
    this.generatePorts({
      inputSpec: inputSpec
    });
  }
  return PokeShim;
}(Trigger));
out$.NumericShim = NumericShim = (function(superclass){
  var inputSpec, prototype = extend$((import$(NumericShim, superclass).displayName = 'NumericShim', NumericShim), superclass).prototype, constructor = NumericShim;
  inputSpec = [{
    type: SIGNAL_TYPE_NUMBER,
    onPush: id
  }];
  function NumericShim(){
    NumericShim.superclass.apply(this, arguments);
    this.generatePorts({
      inputSpec: inputSpec
    });
  }
  return NumericShim;
}(Trigger));
out$.GraphicShim = GraphicShim = (function(superclass){
  var inputSpec, prototype = extend$((import$(GraphicShim, superclass).displayName = 'GraphicShim', GraphicShim), superclass).prototype, constructor = GraphicShim;
  inputSpec = [{
    type: SIGNAL_TYPE_GRAPHIC,
    onPush: id
  }];
  function GraphicShim(){
    GraphicShim.superclass.apply(this, arguments);
    this.generatePorts({
      inputSpec: inputSpec
    });
  }
  return GraphicShim;
}(Trigger));
out$.ShimRep = ShimRep = (function(superclass){
  var prototype = extend$((import$(ShimRep, superclass).displayName = 'ShimRep', ShimRep), superclass).prototype, constructor = ShimRep;
  function ShimRep(){
    ShimRep.superclass.apply(this, arguments);
  }
  return ShimRep;
}(Representation));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./representations/base":10,"./triggers/base":20,"std":19}],18:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, v2, Blitter, Sprite, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, v2 = ref$.v2;
Blitter = require('./blitter').Blitter;
out$.Sprite = Sprite = (function(superclass){
  var prototype = extend$((import$(Sprite, superclass).displayName = 'Sprite', Sprite), superclass).prototype, constructor = Sprite;
  function Sprite(arg$){
    var src, this$ = this;
    src = arg$.src;
    Sprite.superclass.apply(this, arguments);
    this.img = new Image;
    this.size = v2(0, 0);
    this.img.onload = function(){
      this$.width = this$.canvas.width = this$.img.width;
      this$.height = this$.canvas.height = this$.img.height;
      this$.size = v2(this$.width, this$.height);
      this$.ctx.drawImage(this$.img, 0, 0);
      return GlobalServices.Poke.poke();
    };
    this.img.src = src;
    this.active = false;
  }
  return Sprite;
}(Blitter));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./blitter":2,"std":19}],19:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var id, log, flip, delay, defer, v2, floor, rand, randomFrom, sqrt, hyp, raf, mash, logError, getMicrophone, keys, loadImage, abs, out$ = typeof exports != 'undefined' && exports || this;
out$.id = id = function(it){
  return it;
};
out$.log = log = function(){
  console.log.apply(console, arguments);
  return arguments[0];
};
out$.flip = flip = function(λ){
  return curry$(function(a, b){
    return λ(b, a);
  });
};
out$.delay = delay = flip(setTimeout);
out$.defer = defer = delay(0);
out$.v2 = v2 = function(x, y){
  if (y != null) {
    return {
      x: x,
      y: y
    };
  } else {
    return {
      x: x.x,
      y: x.y
    };
  }
};
out$.floor = floor = Math.floor;
out$.rand = rand = (function(it){
  return it * Math.random();
});
out$.randomFrom = randomFrom = function(xs){
  return xs[floor(rand(xs.length))];
};
out$.sqrt = sqrt = Math.sqrt;
out$.hyp = hyp = function(a, b){
  var Δx, Δy;
  Δx = b.x - a.x;
  Δy = b.y - a.y;
  return sqrt(Δx * Δx + Δy * Δy);
};
out$.raf = raf = requestAnimationFrame;
out$.mash = mash = function(xs){
  var i$, len$, ref$, k, v, resultObj$ = {};
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    ref$ = xs[i$], k = ref$[0], v = ref$[1];
    resultObj$[k] = v;
  }
  return resultObj$;
};
out$.logError = logError = function(){
  return log(this, arguments);
};
out$.getMicrophone = getMicrophone = function(λ){
  return navigator.webkitGetUserMedia({
    audio: true
  }, λ, logError);
};
out$.keys = keys = function(it){
  var k, v, results$ = [];
  for (k in it) {
    v = it[k];
    results$.push(k);
  }
  return results$;
};
out$.loadImage = loadImage = function(src, λ){
  var image;
  λ == null && (λ = id);
  image = new Image;
  image.src = src;
  image.onload = λ;
  return image;
};
out$.abs = abs = Math.abs;
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}



},{}],20:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Input, Output, Trigger, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
ref$ = require('../port'), Input = ref$.Input, Output = ref$.Output;
out$.Trigger = Trigger = (function(){
  Trigger.displayName = 'Trigger';
  var prototype = Trigger.prototype, constructor = Trigger;
  function Trigger(){
    this.state = false;
    this.callback = id;
    this.inputs = [];
    this.outputs = [];
  }
  prototype.set = function(state){
    this.state = state;
    return this.callback(state);
  };
  prototype.onStateChange = function(λ){
    return this.callback = λ;
  };
  prototype.generatePorts = function(arg$){
    var inputSpec, ref$, outputSpec, res$, i$, len$, type, onPush, onPull;
    inputSpec = (ref$ = arg$.inputSpec) != null
      ? ref$
      : [], outputSpec = (ref$ = arg$.outputSpec) != null
      ? ref$
      : [];
    res$ = [];
    for (i$ = 0, len$ = inputSpec.length; i$ < len$; ++i$) {
      ref$ = inputSpec[i$], type = ref$.type, onPush = ref$.onPush;
      res$.push(new Input({
        type: type,
        onPush: onPush.bind(this)
      }));
    }
    this.inputs = res$;
    return this.outputs = (function(){
      var i$, ref$, len$, ref1$, results$ = [];
      for (i$ = 0, len$ = (ref$ = outputSpec).length; i$ < len$; ++i$) {
        ref1$ = ref$[i$], type = ref1$.type, onPull = ref1$.onPull;
        results$.push(new Output({
          type: type,
          onPull: onPull.bind(this)
        }));
      }
      return results$;
    }.call(this));
  };
  prototype.specifyInputs = function(){
    return [];
  };
  prototype.specifyOutputs = function(){
    return [];
  };
  return Trigger;
}());



},{"../port":7,"std":19}],21:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Trigger, GraphicTrigger, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
Trigger = require('./base').Trigger;
out$.GraphicTrigger = GraphicTrigger = (function(superclass){
  var inputSpec, outputSpec, prototype = extend$((import$(GraphicTrigger, superclass).displayName = 'GraphicTrigger', GraphicTrigger), superclass).prototype, constructor = GraphicTrigger;
  inputSpec = [{
    type: SIGNAL_TYPE_POKE,
    onPush: function(){
      return this.set(true);
    }
  }];
  outputSpec = [{
    type: SIGNAL_TYPE_GRAPHIC,
    onPull: function(){
      return this.onPull();
    }
  }];
  function GraphicTrigger(arg$){
    this.sprite = arg$.sprite;
    GraphicTrigger.superclass.apply(this, arguments);
    this.generatePorts({
      inputSpec: inputSpec,
      outputSpec: outputSpec
    });
    this.set(true);
  }
  prototype.onPull = function(){
    if (this.inputs[0].link != null) {
      this.set(this.inputs[0].pull());
    }
    if (this.state) {
      return this.sprite;
    } else {
      return null;
    }
  };
  return GraphicTrigger;
}(Trigger));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./base":20,"std":19}],22:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Trigger, Output, KeyTrigger, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
Trigger = require('./base').Trigger;
Output = require('../port').Output;
out$.KeyTrigger = KeyTrigger = (function(superclass){
  var outputSpec, prototype = extend$((import$(KeyTrigger, superclass).displayName = 'KeyTrigger', KeyTrigger), superclass).prototype, constructor = KeyTrigger;
  outputSpec = [{
    type: SIGNAL_TYPE_POKE,
    onPull: function(){
      return this.state;
    }
  }];
  function KeyTrigger(keycode){
    var this$ = this;
    this.keycode = keycode;
    KeyTrigger.superclass.apply(this, arguments);
    this.generatePorts({
      outputSpec: outputSpec
    });
    document.addEventListener('keydown', function(arg$){
      var which;
      which = arg$.which;
      if (this$.keycode === which) {
        return this$.set(true);
      }
    });
    document.addEventListener('keyup', function(arg$){
      var which;
      which = arg$.which;
      if (this$.keycode === which) {
        return this$.set(false);
      }
    });
  }
  prototype.set = function(){
    GlobalServices.Poke.poke();
    return superclass.prototype.set.apply(this, arguments);
  };
  return KeyTrigger;
}(Trigger));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"../port":7,"./base":20,"std":19}],23:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, raf, keys, getMicrophone, Trigger, MicTrigger, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, raf = ref$.raf, keys = ref$.keys, getMicrophone = ref$.getMicrophone;
Trigger = require('./base').Trigger;
out$.MicTrigger = MicTrigger = (function(superclass){
  var SMOOTHING, outputSpec, prototype = extend$((import$(MicTrigger, superclass).displayName = 'MicTrigger', MicTrigger), superclass).prototype, constructor = MicTrigger;
  SMOOTHING = 2;
  outputSpec = [
    {
      type: SIGNAL_TYPE_POKE,
      onPull: function(){
        return this.state;
      }
    }, {
      type: SIGNAL_TYPE_NUMBER,
      onPull: function(){
        return this.value;
      }
    }
  ];
  function MicTrigger(){
    MicTrigger.superclass.apply(this, arguments);
    this.running = false;
    this.audio = new AudioContext;
    this.hist = [];
    this.avg = 0;
    this.threshold = 1.1;
    this.generatePorts({
      outputSpec: outputSpec
    });
    this.analyser = this.audio.createAnalyser();
    this.analyser.fftSize = 2048;
    this.bufferLength = this.analyser.frequencyBinCount;
    this.dataArray = new Uint8Array(this.bufferLength);
  }
  prototype.start = function(){
    var this$ = this;
    return getMicrophone(function(micStream){
      this$.mic = this$.audio.createMediaStreamSource(micStream);
      this$.mic.connect(this$.analyser);
      this$.running = true;
      return this$.monitor();
    });
  };
  prototype.monitor = function(){
    var avg, max, i$, to$, i, sample, ref$, len$, p;
    if (this.running) {
      raf(bind$(this, 'monitor'));
    }
    this.analyser.getByteTimeDomainData(this.dataArray);
    avg = 0;
    max = 0;
    for (i$ = 0, to$ = this.bufferLength; i$ <= to$; ++i$) {
      i = i$;
      sample = this.dataArray[i];
      if (sample > max) {
        max = sample;
      }
    }
    this.hist.push(max / 128);
    if (this.hist.length >= SMOOTHING) {
      this.hist.shift();
    }
    for (i$ = 0, len$ = (ref$ = this.hist).length; i$ < len$; ++i$) {
      p = ref$[i$];
      avg += p;
    }
    avg /= SMOOTHING;
    this.set(avg > this.threshold);
    this.avg = avg;
    this.value = this.avg / this.threshold;
    return GlobalServices.Poke.poke();
  };
  return MicTrigger;
}(Trigger));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}



},{"./base":20,"std":19}],24:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Trigger, MouseTrigger, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
Trigger = require('./base').Trigger;
out$.MouseTrigger = MouseTrigger = (function(superclass){
  var outputSpec, prototype = extend$((import$(MouseTrigger, superclass).displayName = 'MouseTrigger', MouseTrigger), superclass).prototype, constructor = MouseTrigger;
  outputSpec = [{
    type: SIGNAL_TYPE_POKE,
    onPull: function(){
      return this.state;
    }
  }];
  function MouseTrigger(buttonIndex){
    var this$ = this;
    this.buttonIndex = buttonIndex;
    MouseTrigger.superclass.apply(this, arguments);
    this.generatePorts({
      outputSpec: outputSpec
    });
    document.addEventListener('mousedown', function(event){
      var button;
      button = event.button;
      if (this$.buttonIndex === button) {
        return this$.set(true);
      }
    });
    document.addEventListener('mouseup', function(arg$){
      var button;
      button = arg$.button;
      if (this$.buttonIndex === button) {
        return this$.set(false);
      }
    });
    if (this.buttonIndex === MOUSE_RIGHT) {
      document.addEventListener('contextmenu', function(it){
        return it.preventDefault();
      });
    }
  }
  return MouseTrigger;
}(Trigger));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./base":20,"std":19}],25:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, delay, Trigger, Output, TimerTrigger, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, delay = ref$.delay;
Trigger = require('./base').Trigger;
Output = require('../port').Output;
out$.TimerTrigger = TimerTrigger = (function(superclass){
  var outputSpec, prototype = extend$((import$(TimerTrigger, superclass).displayName = 'TimerTrigger', TimerTrigger), superclass).prototype, constructor = TimerTrigger;
  outputSpec = [{
    type: SIGNAL_TYPE_POKE,
    onPull: function(){
      return this.state;
    }
  }];
  function TimerTrigger(arg$){
    var ref$;
    this.time = arg$.time, this.duty = (ref$ = arg$.duty) != null ? ref$ : 0.5, this.offset = (ref$ = arg$.offset) != null ? ref$ : 0;
    this.tick = bind$(this, 'tick', prototype);
    TimerTrigger.superclass.apply(this, arguments);
    this.generatePorts({
      outputSpec: outputSpec
    });
    this.state = false;
    this.active = false;
    this.start();
  }
  prototype.tick = function(){
    this.set(true);
    return delay(this.time * 1000 * this.duty, bind$(this, 'setOff'), this.active ? delay(this.time * 1000, this.tick) : void 8);
  };
  prototype.set = function(){
    GlobalServices.Poke.poke();
    return superclass.prototype.set.apply(this, arguments);
  };
  prototype.setOff = function(){
    return this.set(false);
  };
  prototype.start = function(){
    var this$ = this;
    this.active = true;
    return delay((this.time - this.offset) * 1000, function(){
      return bind$(this$, 'tick')();
    });
  };
  prototype.stop = function(){
    this.active = false;
    return this.set(false);
  };
  return TimerTrigger;
}(Trigger));
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"../port":7,"./base":20,"std":19}],26:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, v2, Representation, RectXYS, InputSet, OutputSet, Link, portColor, VisualNode, out$ = typeof exports != 'undefined' && exports || this, slice$ = [].slice;
ref$ = require('std'), id = ref$.id, log = ref$.log, v2 = ref$.v2;
Representation = require('./representations/base').Representation;
RectXYS = require('./rect').RectXYS;
ref$ = require('./port-set'), InputSet = ref$.InputSet, OutputSet = ref$.OutputSet;
Link = require('./link').Link;
portColor = function(arg$){
  var type;
  type = arg$.type;
  switch (type) {
  case SIGNAL_TYPE_NUMBER:
    return COLOR_MAGENTA;
  case SIGNAL_TYPE_GRAPHIC:
    return COLOR_BRIGHT_BLUE;
  default:
    return COLOR_BRIGHT_GREEN;
  }
};
out$.VisualNode = VisualNode = (function(){
  VisualNode.displayName = 'VisualNode';
  var prototype = VisualNode.prototype, constructor = VisualNode;
  function VisualNode(arg$){
    var ref$;
    this.content = arg$.content, this.pos = arg$.pos, this.size = arg$.size, this.rep = (ref$ = arg$.rep) != null
      ? ref$
      : Representation.NullRepresentation;
    this.state = {
      mode: INTERACTION_MODE_IDLE,
      signal: false
    };
    this.bounds = new RectXYS(this.pos, this.size);
    this.inputs = new InputSet(this.content.inputs, {
      offset: this.size / -2,
      pos: this.pos,
      height: this.size
    });
    this.outputs = new OutputSet(this.content.outputs, {
      offset: this.size / +2,
      pos: this.pos,
      height: this.size
    });
  }
  prototype.pull = function(){
    return this.state.signal = this.content.state;
  };
  prototype.draw = function(arg$){
    var ctx, i$, ref$, len$, i, input, j, output, results$ = [];
    ctx = arg$.ctx;
    this.rep.draw(this.content);
    ctx.drawImage(this.rep.canvas, this.pos.x - this.size / 2, this.pos.y - this.size / 2, this.size, this.size);
    for (i$ = 0, len$ = (ref$ = this.inputs.ports).length; i$ < len$; ++i$) {
      i = i$;
      input = ref$[i$];
      ctx.fillStyle = portColor(input);
      ctx.fillRect(input.pos.x - 3, input.pos.y - 10, 8, 20);
    }
    for (i$ = 0, len$ = (ref$ = this.outputs.ports).length; i$ < len$; ++i$) {
      j = i$;
      output = ref$[i$];
      ctx.fillStyle = portColor(output);
      results$.push(ctx.fillRect(output.pos.x - 5, output.pos.y - 10, 8, 20));
    }
    return results$;
  };
  prototype.setMode = function(mode){
    this.rep.setMode(mode);
    return this.state.mode = mode;
  };
  prototype.moveTo = function(arg$){
    var x, y;
    x = arg$.x, y = arg$.y;
    this.pos.x = x;
    this.pos.y = y;
    return this.updateChildPos();
  };
  prototype.moveBy = function(arg$){
    var x, y;
    x = arg$.x, y = arg$.y;
    this.pos.x += x;
    this.pos.y += y;
    return this.updateChildPos();
  };
  prototype.updateChildPos = function(){
    log(this.pos.x, this.pos.y);
    this.bounds.moveTo(this.pos);
    this.inputs.moveTo(this.pos);
    return this.outputs.moveTo(this.pos);
  };
  prototype.boundsContains = function(point){
    return this.bounds.contains(point);
  };
  VisualNode.link = function(a, b){
    return new Link(a.outputs.next, b.inputs.next);
  };
  VisualNode.chain = function(){
    var nodes, i$, to$, i, a, b, results$ = [];
    nodes = slice$.call(arguments);
    for (i$ = 0, to$ = nodes.length - 2; i$ <= to$; ++i$) {
      i = i$;
      a = nodes[i];
      b = nodes[i + 1];
      results$.push(new Link(a.outputs.next, b.inputs.next));
    }
    return results$;
  };
  return VisualNode;
}());



},{"./link":5,"./port-set":6,"./rect":9,"./representations/base":10,"std":19}],27:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var Blitter, Workspace, out$ = typeof exports != 'undefined' && exports || this;
Blitter = require('./blitter').Blitter;
out$.Workspace = Workspace = (function(superclass){
  var prototype = extend$((import$(Workspace, superclass).displayName = 'Workspace', Workspace), superclass).prototype, constructor = Workspace;
  function Workspace(){
    Workspace.superclass.call(this, {
      size: 950
    });
  }
  prototype.install = function(host){
    return host.appendChild(this.canvas);
  };
  return Workspace;
}(Blitter));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./blitter":2}]},{},[4])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,

(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
// Generated by LiveScript 1.4.0
global.INTERACTION_MODE_IDLE = Symbol('idle');
global.INTERACTION_MODE_HOT = Symbol('hot');
global.INTERACTION_MODE_ACTIVE = Symbol('active');
global.KEY_Z = 90;
global.KEY_X = 88;
global.KEY_C = 67;
global.KEY_V = 86;
global.MOUSE_LEFT = 0;
global.MOUSE_RIGHT = 2;



}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],2:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var Blitter, out$ = typeof exports != 'undefined' && exports || this;
out$.Blitter = Blitter = (function(){
  Blitter.displayName = 'Blitter';
  var idx, prototype = Blitter.prototype, constructor = Blitter;
  idx = function(i){
    i == null && (i = 0);
    return function(){
      return i++;
    };
  }();
  function Blitter(arg$){
    this.size = arg$.size;
    this.canvas = document.createElement('canvas');
    this.canvas.width = this.canvas.height = this.size;
    this.ctx = this.canvas.getContext('2d');
    this.id = idx();
  }
  prototype.clear = function(){
    return this.ctx.clearRect(0, 0, this.size, this.size);
  };
  prototype.blitTo = function(ctx, x, y, w, h){
    if (w != null && h != null) {
      return ctx.drawImage(this.canvas, x, y, w, h);
    } else {
      return ctx.drawImage(this.canvas, x, y);
    }
  };
  return Blitter;
}());



},{}],3:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, defer, DragMonitor, out$ = typeof exports != 'undefined' && exports || this, slice$ = [].slice;
ref$ = require('std'), id = ref$.id, log = ref$.log, defer = ref$.defer;
out$.DragMonitor = DragMonitor = (function(){
  DragMonitor.displayName = 'DragMonitor';
  var normaliseMouse, normaliseTouch, prototype = DragMonitor.prototype, constructor = DragMonitor;
  normaliseMouse = function(λ){
    return function(arg$){
      var pageX, pageY;
      pageX = arg$.pageX, pageY = arg$.pageY;
      return λ(pageX, pageY);
    };
  };
  normaliseTouch = id;
  function DragMonitor(){
    var this$ = this;
    this.pointerRelease = bind$(this, 'pointerRelease', prototype);
    this.pointerEngage = bind$(this, 'pointerEngage', prototype);
    this.pointerMove = bind$(this, 'pointerMove', prototype);
    this.state = {
      enabled: true,
      dragging: false,
      released: false,
      down: false,
      Δx: 0,
      Δy: 0,
      last: [0, 0]
    };
    this.callbacks = {
      drag: id,
      done: id
    };
    document.addEventListener('keydown', function(arg$){
      var which;
      which = arg$.which;
      if (which === 16) {
        return this$.pointerEngage();
      }
    });
    document.addEventListener('keyup', function(arg$){
      var which;
      which = arg$.which;
      if (which === 16) {
        return this$.pointerRelease();
      }
    });
    document.addEventListener('mousedown', normaliseMouse(this.pointerEngage));
    document.addEventListener('mousemove', normaliseMouse(this.pointerMove));
    document.addEventListener('mouseup', normaliseMouse(this.pointerRelease));
    document.addEventListener('touchstart', normaliseTouch(this.pointerEngage));
    document.addEventListener('touchmove', normaliseTouch(this.pointerMove));
    document.addEventListener('touchend', normaliseTouch(this.pointerRelease));
  }
  prototype.dispatch = function(event){
    var args, ref$;
    args = slice$.call(arguments, 1);
    if (this.state.enabled) {
      return (ref$ = this.callbacks)[event].apply(ref$, args);
    }
  };
  prototype.pointerMove = function(x, y){
    var Δx, Δy;
    if (this.state.down || this.state.dragging) {
      this.state.dragging = true;
      this.state.Δx = Δx = x - this.state.last[0];
      this.state.Δy = Δy = y - this.state.last[1];
      this.state.last = [x, y];
      return this.dispatch('drag', Δx, Δy);
    }
  };
  prototype.pointerEngage = function(x, y){
    this.state.down = true;
    return this.state.last = [x, y];
  };
  prototype.pointerRelease = function(x, y){
    var this$ = this;
    x == null && (x = this.state.last[0]);
    y == null && (y = this.state.last[1]);
    defer(function(){
      return this$.state.dragging = false;
    });
    this.state.released = true;
    this.state.last = [x, y];
    this.state.down = false;
    this.dispatch('drag', 0, 0);
    return this.dispatch('done', this.state);
  };
  prototype.onPointerDrag = function(λ){
    return this.callbacks.drag = λ;
  };
  prototype.onPointerRelease = function(λ){
    return this.callbacks.done = λ;
  };
  prototype.toggleEventListening = function(state){
    return this.state.enabled = state;
  };
  return DragMonitor;
}());
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}



},{"std":10}],4:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var Blitter, Graphic, out$ = typeof exports != 'undefined' && exports || this;
Blitter = require('./blitter').Blitter;
out$.Graphic = Graphic = (function(superclass){
  var prototype = extend$((import$(Graphic, superclass).displayName = 'Graphic', Graphic), superclass).prototype, constructor = Graphic;
  function Graphic(){
    Graphic.superclass.call(this, {
      size: 200
    });
    this.state = {
      mode: INTERACTION_MODE_IDLE
    };
    this.fillSelf();
  }
  prototype.setMode = function(mode){
    this.state.mode = mode;
    return this.fillSelf();
  };
  prototype.modeColor = function(mode){
    switch (mode) {
    case INTERACTION_MODE_IDLE:
      return 'red';
    case INTERACTION_MODE_HOT:
      return 'orange';
    case INTERACTION_MODE_ACTIVE:
      return 'yellow';
    }
  };
  prototype.fillSelf = function(){
    this.ctx.fillStyle = this.modeColor(this.state.mode);
    this.ctx.fillRect(0, 0, 200, 200);
    this.ctx.fillStyle = 'black';
    return this.ctx.fillRect(20, 20, 160, 160);
  };
  return Graphic;
}(Blitter));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./blitter":2}],5:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, raf, mash, v2, DragMonitor, Workspace, Graphic, Link, InputSet, RectXYS, Sprite, Blitter, KeyTrigger, MicTrigger, MouseTrigger, loadImage, Node, nodes, links, workspace, hotNode, draw, poke, dragger, z, x, c, v, left, right, audio, Puppet, avatar;
ref$ = require('std'), id = ref$.id, log = ref$.log, raf = ref$.raf, mash = ref$.mash, v2 = ref$.v2;
require('config');
DragMonitor = require('./drag-monitor').DragMonitor;
Workspace = require('./workspace').Workspace;
Graphic = require('./graphic').Graphic;
Link = require('./link').Link;
InputSet = require('./input-set').InputSet;
RectXYS = require('./rect').RectXYS;
Sprite = require('./sprite').Sprite;
Blitter = require('./blitter').Blitter;
KeyTrigger = require('./triggers/key').KeyTrigger;
MicTrigger = require('./triggers/mic').MicTrigger;
MouseTrigger = require('./triggers/mouse').MouseTrigger;
loadImage = function(src, λ){
  var image;
  λ == null && (λ = id);
  image = new Image;
  image.src = src;
  image.onload = λ;
  return image;
};
Node = (function(){
  Node.displayName = 'Node';
  var prototype = Node.prototype, constructor = Node;
  function Node(arg$){
    var type;
    type = arg$.type, this.pos = arg$.pos, this.size = arg$.size;
    this.state = {
      mode: INTERACTION_MODE_IDLE
    };
    this.content = new type;
    this.bounds = new RectXYS(this.pos, this.size);
    this.inputs = new InputSet(this.size / -2, this.pos);
    this.outputs = new InputSet(this.size / +2, this.pos);
  }
  prototype.draw = function(arg$){
    var ctx;
    ctx = arg$.ctx;
    return ctx.drawImage(this.content.canvas, this.pos.x - this.size / 2, this.pos.y - this.size / 2, this.size, this.size);
  };
  prototype.setMode = function(mode){
    this.content.setMode(mode);
    return this.state.mode = mode;
  };
  prototype.moveTo = function(arg$){
    var x, y;
    x = arg$.x, y = arg$.y;
    this.pos.x = x;
    this.pos.y = y;
    this.bounds.mvoeTo(this.pos);
    this.inputs.moveTo(this.pos);
    return this.outputs.moveTo(this.pos);
  };
  prototype.moveBy = function(arg$){
    var x, y;
    x = arg$.x, y = arg$.y;
    this.pos.x += x;
    this.pos.y += y;
    this.bounds.moveTo(this.pos);
    this.inputs.moveTo(this.pos);
    return this.outputs.moveTo(this.pos);
  };
  prototype.boundsContains = function(point){
    return this.bounds.contains(point);
  };
  return Node;
}());
nodes = [
  new Node({
    type: Graphic,
    size: 80,
    pos: v2(50, 50)
  }), new Node({
    type: Graphic,
    size: 100,
    pos: v2(200, 200)
  }), new Node({
    type: Graphic,
    size: 120,
    pos: v2(350, 350)
  }), new Node({
    type: Graphic,
    size: 40,
    pos: v2(500, 500)
  })
];
links = [new Link(nodes[0].outputs.first, nodes[1].inputs.first), new Link(nodes[1].outputs.first, nodes[2].inputs.first), new Link(nodes[2].outputs.first, nodes[3].inputs.first)];
workspace = new Workspace;
hotNode = null;
draw = function(){
  raf(draw);
  workspace.clear();
  links.map(function(it){
    return it.draw(workspace);
  });
  nodes.map(function(it){
    return it.draw(workspace);
  });
  avatar.draw(workspace);
  return audio.draw(workspace);
};
poke = function(){
  return draw();
};
dragger = new DragMonitor;
dragger.onPointerRelease(draw);
dragger.onPointerDrag(function(Δx, Δy){
  if (hotNode != null) {
    hotNode.moveBy(v2(Δx, Δy));
  }
  return draw();
});
z = new KeyTrigger(KEY_Z);
x = new KeyTrigger(KEY_X);
c = new KeyTrigger(KEY_C);
v = new KeyTrigger(KEY_V);
left = new MouseTrigger(MOUSE_LEFT);
right = new MouseTrigger(MOUSE_RIGHT);
audio = new MicTrigger;
z.onStateChange(function(it){
  return avatar.set('choke', it);
});
x.onStateChange(function(it){
  return avatar.set('drop', it);
});
c.onStateChange(function(it){
  return avatar.set('frustrate', it);
});
v.onStateChange(function(it){
  return avatar.set('trash', it);
});
left.onStateChange(function(it){
  return avatar.set('draw', it);
});
right.onStateChange(function(it){
  return avatar.set('drink', it);
});
audio.onStateChange(function(it){
  return avatar.set('sing', it);
});
Puppet = (function(){
  Puppet.displayName = 'Puppet';
  var prototype = Puppet.prototype, constructor = Puppet;
  function Puppet(){
    var name;
    this.animations = mash((function(){
      var i$, ref$, len$, results$ = [];
      for (i$ = 0, len$ = (ref$ = ['choke', 'draw', 'drink', 'drop', 'frustrate', 'look', 'sing', 'stufy', 'think', 'trash']).length; i$ < len$; ++i$) {
        name = ref$[i$];
        results$.push([
          name, new Sprite({
            src: "assets/" + name + "_01.png"
          })
        ]);
      }
      return results$;
    }()));
    this.chain = [this.animations.look, this.animations.choke, this.animations.draw, this.animations.drink, this.animations.drop, this.animations.frustrate, this.animations.sing, this.animations.stufy, this.animations.think, this.animations.trash];
    this.state = {
      currentSprite: this.animations.look
    };
  }
  prototype.set = function(spriteName, state){
    return this.animations[spriteName].active = state;
  };
  prototype.draw = function(arg$){
    var ctx, winner, i$, ref$, len$, i, sprite;
    ctx = arg$.ctx;
    winner = this.chain[0];
    for (i$ = 0, len$ = (ref$ = this.chain).length; i$ < len$; ++i$) {
      i = i$;
      sprite = ref$[i$];
      if (i > 0) {
        if (sprite.active) {
          winner = sprite;
        }
      }
    }
    return winner.blitTo(ctx, 0, 0, 200, 200);
  };
  return Puppet;
}());
avatar = new Puppet;
document.addEventListener('mousemove', function(arg$){
  var pageX, pageY, hotFound, i$, ref$, len$, node;
  pageX = arg$.pageX, pageY = arg$.pageY;
  if ((hotNode != null ? hotNode.state.mode : void 8) === INTERACTION_MODE_ACTIVE) {
    return;
  }
  hotFound = false;
  for (i$ = 0, len$ = (ref$ = nodes).length; i$ < len$; ++i$) {
    node = ref$[i$];
    if (node.boundsContains(v2(pageX, pageY))) {
      node.setMode(INTERACTION_MODE_HOT);
      hotFound = true;
      hotNode = node;
    } else {
      node.setMode(INTERACTION_MODE_IDLE);
    }
  }
  if (!hotFound) {
    hotNode = null;
  }
  return draw();
});
document.addEventListener('mousedown', function(){
  if (hotNode != null) {
    hotNode.setMode(INTERACTION_MODE_ACTIVE);
  }
  return draw();
});
document.addEventListener('mouseup', function(){
  if (hotNode != null) {
    hotNode.setMode(INTERACTION_MODE_HOT);
  }
  return draw();
});
workspace.install(document.body);
draw();



},{"./blitter":2,"./drag-monitor":3,"./graphic":4,"./input-set":6,"./link":7,"./rect":8,"./sprite":9,"./triggers/key":12,"./triggers/mic":13,"./triggers/mouse":14,"./workspace":15,"config":1,"std":10}],6:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, v2, InputSet, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, v2 = ref$.v2;
out$.InputSet = InputSet = (function(){
  InputSet.displayName = 'InputSet';
  var prototype = InputSet.prototype, constructor = InputSet;
  function InputSet(offset, pos){
    this.offset = offset;
    this.pos = v2(0, 0);
    this.moveTo(pos);
  }
  prototype.pull = function(){
    return log('pull!', this);
  };
  prototype.moveTo = function(arg$){
    var x, y;
    x = arg$.x, y = arg$.y;
    this.pos.x = x + this.offset;
    return this.pos.y = y;
  };
  Object.defineProperty(prototype, 'first', {
    get: function(){
      return this;
    },
    configurable: true,
    enumerable: true
  });
  return InputSet;
}());



},{"std":10}],7:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, hyp, randomFrom, Link, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, hyp = ref$.hyp, randomFrom = ref$.randomFrom;
out$.Link = Link = (function(){
  Link.displayName = 'Link';
  var bendStrength, colors, prototype = Link.prototype, constructor = Link;
  bendStrength = 150;
  colors = ['red', '#0e3', 'blue', 'black'];
  function Link(from, to){
    this.from = from;
    this.to = to;
    this.color = randomFrom(colors);
  }
  prototype.draw = function(arg$){
    var ctx, d, b;
    ctx = arg$.ctx;
    d = hyp(this.to.pos, this.from.pos);
    b = d <= bendStrength ? bendStrength * Math.pow(d / bendStrength, 2) : bendStrength;
    ctx.strokeStyle = this.color;
    ctx.lineWidth = 5;
    ctx.beginPath();
    ctx.moveTo(this.from.pos.x, this.from.pos.y);
    ctx.bezierCurveTo(this.from.pos.x + b, this.from.pos.y, this.to.pos.x - b, this.to.pos.y, this.to.pos.x, this.to.pos.y);
    ctx.stroke();
    return ctx.closePath();
  };
  return Link;
}());



},{"std":10}],8:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var RectXYWH, RectXYS, out$ = typeof exports != 'undefined' && exports || this;
out$.RectXYWH = RectXYWH = (function(){
  RectXYWH.displayName = 'RectXYWH';
  var prototype = RectXYWH.prototype, constructor = RectXYWH;
  function RectXYWH(arg$, arg1$){
    this.x = arg$.x, this.y = arg$.y;
    this.w = arg1$.w, this.h = arg1$.h;
    this.update();
  }
  prototype.update = function(){
    this.left = this.x - this.w / 2;
    this.right = this.x + this.w / 2;
    this.top = this.y - this.h / 2;
    return this.bottom = this.y + this.h / 2;
  };
  prototype.contains = function(arg$){
    var x, y;
    x = arg$.x, y = arg$.y;
    return (this.left < x && x < this.right) && (this.top < y && y < this.bottom);
  };
  return RectXYWH;
}());
out$.RectXYS = RectXYS = (function(superclass){
  var prototype = extend$((import$(RectXYS, superclass).displayName = 'RectXYS', RectXYS), superclass).prototype, constructor = RectXYS;
  function RectXYS(pos, size){
    RectXYS.superclass.call(this, pos, {
      w: size,
      h: size
    });
  }
  prototype.moveTo = function(arg$){
    var x, y;
    x = arg$.x, y = arg$.y;
    this.x = x;
    this.y = y;
    return this.update();
  };
  return RectXYS;
}(RectXYWH));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{}],9:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var Blitter, Sprite, out$ = typeof exports != 'undefined' && exports || this;
Blitter = require('./blitter').Blitter;
out$.Sprite = Sprite = (function(superclass){
  var prototype = extend$((import$(Sprite, superclass).displayName = 'Sprite', Sprite), superclass).prototype, constructor = Sprite;
  function Sprite(arg$){
    var src, this$ = this;
    src = arg$.src;
    Sprite.superclass.apply(this, arguments);
    this.img = new Image;
    this.img.onload = function(){
      this$.canvas.width = this$.img.width;
      this$.canvas.height = this$.img.height;
      return this$.ctx.drawImage(this$.img, 0, 0);
    };
    this.img.src = src;
    this.active = false;
  }
  return Sprite;
}(Blitter));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./blitter":2}],10:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var id, log, flip, delay, defer, v2, floor, rand, randomFrom, sqrt, hyp, raf, mash, logError, getMicrophone, keys, out$ = typeof exports != 'undefined' && exports || this;
out$.id = id = function(it){
  return it;
};
out$.log = log = function(){
  console.log.apply(console, arguments);
  return arguments[0];
};
out$.flip = flip = function(λ){
  return curry$(function(a, b){
    return λ(b, a);
  });
};
out$.delay = delay = flip(setTimeout);
out$.defer = defer = delay(0);
out$.v2 = v2 = function(x, y){
  return {
    x: x,
    y: y
  };
};
out$.floor = floor = Math.floor;
out$.rand = rand = (function(it){
  return it * Math.random();
});
out$.randomFrom = randomFrom = function(xs){
  return xs[floor(rand(xs.length))];
};
out$.sqrt = sqrt = Math.sqrt;
out$.hyp = hyp = function(a, b){
  var Δx, Δy;
  Δx = b.x - a.x;
  Δy = b.y - a.y;
  return sqrt(Δx * Δx + Δy * Δy);
};
out$.raf = raf = requestAnimationFrame;
out$.mash = mash = function(xs){
  var i$, len$, ref$, k, v, resultObj$ = {};
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    ref$ = xs[i$], k = ref$[0], v = ref$[1];
    resultObj$[k] = v;
  }
  return resultObj$;
};
out$.logError = logError = function(){
  return log(this, arguments);
};
out$.getMicrophone = getMicrophone = function(λ){
  return navigator.webkitGetUserMedia({
    audio: true
  }, λ, logError);
};
out$.keys = keys = function(it){
  var k, v, results$ = [];
  for (k in it) {
    v = it[k];
    results$.push(k);
  }
  return results$;
};
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}



},{}],11:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Trigger, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
out$.Trigger = Trigger = (function(){
  Trigger.displayName = 'Trigger';
  var prototype = Trigger.prototype, constructor = Trigger;
  function Trigger(){
    this.state = false;
    this.callback = id;
  }
  prototype.set = function(state){
    this.state = state;
    return this.callback(state);
  };
  prototype.onStateChange = function(λ){
    return this.callback = λ;
  };
  return Trigger;
}());



},{"std":10}],12:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var Trigger, KeyTrigger, out$ = typeof exports != 'undefined' && exports || this;
Trigger = require('./base').Trigger;
out$.KeyTrigger = KeyTrigger = (function(superclass){
  var prototype = extend$((import$(KeyTrigger, superclass).displayName = 'KeyTrigger', KeyTrigger), superclass).prototype, constructor = KeyTrigger;
  function KeyTrigger(keycode){
    var this$ = this;
    KeyTrigger.superclass.apply(this, arguments);
    document.addEventListener('keydown', function(arg$){
      var which;
      which = arg$.which;
      if (keycode === which) {
        return this$.set(true);
      }
    });
    document.addEventListener('keyup', function(arg$){
      var which;
      which = arg$.which;
      if (keycode === which) {
        return this$.set(false);
      }
    });
  }
  return KeyTrigger;
}(Trigger));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./base":11}],13:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, raf, keys, getMicrophone, Trigger, SMOOTHING, THRESHOLD, MicTrigger, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, raf = ref$.raf, keys = ref$.keys, getMicrophone = ref$.getMicrophone;
Trigger = require('./base').Trigger;
SMOOTHING = 50;
THRESHOLD = 1.2;
out$.MicTrigger = MicTrigger = (function(superclass){
  var prototype = extend$((import$(MicTrigger, superclass).displayName = 'MicTrigger', MicTrigger), superclass).prototype, constructor = MicTrigger;
  function MicTrigger(){
    var this$ = this;
    this.running = false;
    this.audio = new AudioContext;
    this.hist = [];
    this.avg = 0;
    this.analyser = this.audio.createAnalyser();
    this.analyser.fftSize = 2048;
    this.bufferLength = this.analyser.frequencyBinCount;
    this.dataArray = new Uint8Array(this.bufferLength);
    getMicrophone(function(micStream){
      this$.mic = this$.audio.createMediaStreamSource(micStream);
      this$.mic.connect(this$.analyser);
      this$.running = true;
      return this$.monitor();
    });
  }
  prototype.monitor = function(){
    if (this.running) {
      return raf(bind$(this, 'monitor'));
    }
  };
  prototype.draw = function(arg$){
    var ctx, width, height, max, i$, to$, i, sample, threshold, avg, ref$, len$, p;
    ctx = arg$.ctx;
    this.analyser.getByteTimeDomainData(this.dataArray);
    width = 300;
    height = 300;
    max = 0;
    for (i$ = 0, to$ = this.bufferLength; i$ <= to$; ++i$) {
      i = i$;
      sample = this.dataArray[i];
      if (sample > max) {
        max = sample;
      }
    }
    max /= 128;
    this.hist.push(max);
    if (this.hist.length >= SMOOTHING) {
      this.hist.shift();
    }
    threshold = THRESHOLD;
    avg = 0;
    for (i$ = 0, len$ = (ref$ = this.hist).length; i$ < len$; ++i$) {
      p = ref$[i$];
      avg += p;
    }
    avg /= this.hist.length;
    ctx.globalCompositeOperation = 'source-over';
    ctx.globalAlpha = 1;
    if (avg > THRESHOLD) {
      this.set(true);
    } else {
      this.set(false);
    }
    ctx.fillStyle = 'blue';
    ctx.fillRect(0, height - avg * height / 2, width, 2);
    ctx.fillStyle = 'black';
    return ctx.fillRect(0, height - threshold * height / 2, width, 2);
  };
  return MicTrigger;
}(Trigger));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}



},{"./base":11,"std":10}],14:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Trigger, MouseTrigger, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
Trigger = require('./base').Trigger;
out$.MouseTrigger = MouseTrigger = (function(superclass){
  var prototype = extend$((import$(MouseTrigger, superclass).displayName = 'MouseTrigger', MouseTrigger), superclass).prototype, constructor = MouseTrigger;
  function MouseTrigger(buttonIndex){
    var this$ = this;
    MouseTrigger.superclass.apply(this, arguments);
    document.addEventListener('mousedown', function(event){
      var button;
      button = event.button;
      if (buttonIndex === button) {
        return this$.set(true);
      }
    });
    document.addEventListener('mouseup', function(arg$){
      var button;
      button = arg$.button;
      if (buttonIndex === button) {
        return this$.set(false);
      }
    });
    if (buttonIndex === MOUSE_RIGHT) {
      document.addEventListener('contextmenu', function(it){
        return it.preventDefault();
      });
    }
  }
  return MouseTrigger;
}(Trigger));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./base":11,"std":10}],15:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var Blitter, Workspace, out$ = typeof exports != 'undefined' && exports || this;
Blitter = require('./blitter').Blitter;
out$.Workspace = Workspace = (function(superclass){
  var prototype = extend$((import$(Workspace, superclass).displayName = 'Workspace', Workspace), superclass).prototype, constructor = Workspace;
  function Workspace(){
    Workspace.superclass.call(this, {
      size: 550
    });
  }
  prototype.install = function(host){
    return host.appendChild(this.canvas);
  };
  return Workspace;
}(Blitter));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./blitter":2}]},{},[5])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,

(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
// Generated by LiveScript 1.4.0
global.INTERACTION_MODE_IDLE = Symbol('idle');
global.INTERACTION_MODE_HOT = Symbol('hot');
global.INTERACTION_MODE_ACTIVE = Symbol('active');
global.KEY_Z = 90;
global.KEY_X = 88;
global.KEY_C = 67;
global.KEY_V = 86;
global.MOUSE_LEFT = 0;
global.MOUSE_RIGHT = 2;
global.COLOR_BRIGHT_GREEN = '#0e3';
global.SIGNAL_TYPE_POKE = Symbol('poke');
global.SIGNAL_TYPE_NUMBER = Symbol('number');
global.SIGNAL_TYPE_GRAPHIC = Symbol('graphic');
global.SIGNAL_TYPE_TEXT = Symbol('text');
global.GlobalServices = {
  Poke: {
    poke: function(it){
      return it;
    }
  }
};



}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],2:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var Blitter, out$ = typeof exports != 'undefined' && exports || this;
out$.Blitter = Blitter = (function(){
  Blitter.displayName = 'Blitter';
  var idx, prototype = Blitter.prototype, constructor = Blitter;
  idx = function(i){
    i == null && (i = 0);
    return function(){
      return i++;
    };
  }();
  function Blitter(arg$){
    this.size = arg$.size;
    this.canvas = document.createElement('canvas');
    this.canvas.width = this.canvas.height = this.size;
    this.ctx = this.canvas.getContext('2d');
    this.id = idx();
  }
  prototype.clear = function(){
    return this.ctx.clearRect(0, 0, this.size, this.size);
  };
  prototype.blitTo = function(ctx, x, y, w, h){
    if (w != null && h != null) {
      return ctx.drawImage(this.canvas, x, y, w, h);
    } else {
      return ctx.drawImage(this.canvas, x, y);
    }
  };
  return Blitter;
}());



},{}],3:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, defer, DragMonitor, out$ = typeof exports != 'undefined' && exports || this, slice$ = [].slice;
ref$ = require('std'), id = ref$.id, log = ref$.log, defer = ref$.defer;
out$.DragMonitor = DragMonitor = (function(){
  DragMonitor.displayName = 'DragMonitor';
  var normaliseMouse, normaliseTouch, prototype = DragMonitor.prototype, constructor = DragMonitor;
  normaliseMouse = function(λ){
    return function(arg$){
      var pageX, pageY;
      pageX = arg$.pageX, pageY = arg$.pageY;
      return λ(pageX, pageY);
    };
  };
  normaliseTouch = id;
  function DragMonitor(){
    var this$ = this;
    this.pointerRelease = bind$(this, 'pointerRelease', prototype);
    this.pointerEngage = bind$(this, 'pointerEngage', prototype);
    this.pointerMove = bind$(this, 'pointerMove', prototype);
    this.state = {
      enabled: true,
      dragging: false,
      released: false,
      down: false,
      Δx: 0,
      Δy: 0,
      last: [0, 0]
    };
    this.callbacks = {
      drag: id,
      done: id
    };
    document.addEventListener('keydown', function(arg$){
      var which;
      which = arg$.which;
      if (which === 16) {
        return this$.pointerEngage();
      }
    });
    document.addEventListener('keyup', function(arg$){
      var which;
      which = arg$.which;
      if (which === 16) {
        return this$.pointerRelease();
      }
    });
    document.addEventListener('mousedown', normaliseMouse(this.pointerEngage));
    document.addEventListener('mousemove', normaliseMouse(this.pointerMove));
    document.addEventListener('mouseup', normaliseMouse(this.pointerRelease));
    document.addEventListener('touchstart', normaliseTouch(this.pointerEngage));
    document.addEventListener('touchmove', normaliseTouch(this.pointerMove));
    document.addEventListener('touchend', normaliseTouch(this.pointerRelease));
  }
  prototype.dispatch = function(event){
    var args, ref$;
    args = slice$.call(arguments, 1);
    if (this.state.enabled) {
      return (ref$ = this.callbacks)[event].apply(ref$, args);
    }
  };
  prototype.pointerMove = function(x, y){
    var Δx, Δy;
    if (this.state.down || this.state.dragging) {
      this.state.dragging = true;
      this.state.Δx = Δx = x - this.state.last[0];
      this.state.Δy = Δy = y - this.state.last[1];
      this.state.last = [x, y];
      return this.dispatch('drag', Δx, Δy);
    }
  };
  prototype.pointerEngage = function(x, y){
    this.state.down = true;
    return this.state.last = [x, y];
  };
  prototype.pointerRelease = function(x, y){
    var this$ = this;
    x == null && (x = this.state.last[0]);
    y == null && (y = this.state.last[1]);
    defer(function(){
      return this$.state.dragging = false;
    });
    this.state.released = true;
    this.state.last = [x, y];
    this.state.down = false;
    this.dispatch('drag', 0, 0);
    return this.dispatch('done', this.state);
  };
  prototype.onPointerDrag = function(λ){
    return this.callbacks.drag = λ;
  };
  prototype.onPointerRelease = function(λ){
    return this.callbacks.done = λ;
  };
  prototype.toggleEventListening = function(state){
    return this.state.enabled = state;
  };
  return DragMonitor;
}());
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}



},{"std":17}],4:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var Blitter, Graphic, out$ = typeof exports != 'undefined' && exports || this;
Blitter = require('./blitter').Blitter;
out$.Graphic = Graphic = (function(superclass){
  var prototype = extend$((import$(Graphic, superclass).displayName = 'Graphic', Graphic), superclass).prototype, constructor = Graphic;
  function Graphic(){
    Graphic.superclass.call(this, {
      size: 200
    });
    this.state = {
      mode: INTERACTION_MODE_IDLE
    };
    this.fillSelf();
  }
  prototype.update = function(){};
  prototype.setMode = function(mode){
    this.state.mode = mode;
    return this.fillSelf();
  };
  prototype.modeColor = function(mode){
    switch (mode) {
    case INTERACTION_MODE_IDLE:
      return 'darkred';
    case INTERACTION_MODE_HOT:
      return 'orange';
    case INTERACTION_MODE_ACTIVE:
      return 'red';
    }
  };
  prototype.fillSelf = function(){
    this.ctx.fillStyle = this.modeColor(this.state.mode);
    this.ctx.fillRect(0, 0, 200, 200);
    this.ctx.fillStyle = 'black';
    return this.ctx.fillRect(20, 20, 160, 160);
  };
  return Graphic;
}(Blitter));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./blitter":2}],5:[function(require,module,exports){
(function (global){
// Generated by LiveScript 1.4.0
var ref$, id, log, raf, mash, randomFrom, v2, DragMonitor, Workspace, Node, Link, InputSet, Sprite, Blitter, Puppet, KeyTrigger, MicTrigger, MouseTrigger, TimerTrigger, KeyRep, TimerRep, PuppetRep, nodes, links, hotNode, workspace, z, x, c, v, t, p, left, puppet, zNode, xNode, cNode, vNode, tNode, pNode, puppetNode, animations, name, chain, draw, dragger;
ref$ = require('std'), id = ref$.id, log = ref$.log, raf = ref$.raf, mash = ref$.mash, randomFrom = ref$.randomFrom, v2 = ref$.v2;
require('config');
DragMonitor = require('./drag-monitor').DragMonitor;
Workspace = require('./workspace').Workspace;
Node = require('./node').Node;
Link = require('./link').Link;
InputSet = require('./input-set').InputSet;
Sprite = require('./sprite').Sprite;
Blitter = require('./blitter').Blitter;
Puppet = require('./puppet').Puppet;
KeyTrigger = require('./triggers/key').KeyTrigger;
MicTrigger = require('./triggers/mic').MicTrigger;
MouseTrigger = require('./triggers/mouse').MouseTrigger;
TimerTrigger = require('./triggers/timer').TimerTrigger;
KeyRep = require('./representations/key').KeyRep;
TimerRep = require('./representations/timer').TimerRep;
PuppetRep = require('./representations/puppet').PuppetRep;
nodes = [];
links = [];
hotNode = null;
workspace = new Workspace;
z = new KeyTrigger(KEY_Z);
x = new KeyTrigger(KEY_X);
c = new KeyTrigger(KEY_C);
v = new KeyTrigger(KEY_V);
t = new TimerTrigger({
  time: 1
});
p = new TimerTrigger({
  time: 1.5,
  duty: 0.1
});
left = new MouseTrigger(MOUSE_LEFT);
puppet = new Puppet;
left.onStateChange(function(it){
  return puppet.set('draw', it);
});
nodes.push(zNode = new Node({
  content: z,
  rep: new KeyRep(z),
  size: 70,
  pos: v2(230, 100)
}));
nodes.push(xNode = new Node({
  content: x,
  rep: new KeyRep(x),
  size: 70,
  pos: v2(230, 180)
}));
nodes.push(cNode = new Node({
  content: c,
  rep: new KeyRep(c),
  size: 70,
  pos: v2(230, 260)
}));
nodes.push(vNode = new Node({
  content: v,
  rep: new KeyRep(v),
  size: 70,
  pos: v2(230, 340)
}));
nodes.push(tNode = new Node({
  content: t,
  rep: new TimerRep(t),
  size: 100,
  pos: v2(80, 280)
}));
nodes.push(pNode = new Node({
  content: p,
  rep: new TimerRep(p),
  size: 100,
  pos: v2(80, 400)
}));
nodes.push(puppetNode = new Node({
  content: puppet,
  rep: new PuppetRep(puppet),
  inputs: 6,
  size: 180,
  pos: v2(450, 260)
}));
animations = mash((function(){
  var i$, ref$, len$, results$ = [];
  for (i$ = 0, len$ = (ref$ = ['choke', 'draw', 'drink', 'drop', 'frustrate', 'look', 'sing', 'study', 'think', 'trash']).length; i$ < len$; ++i$) {
    name = ref$[i$];
    results$.push([
      name, new Sprite({
        src: "assets/" + name + "_01.png"
      })
    ]);
  }
  return results$;
}()));
chain = [animations.look, animations.draw, animations.choke, animations.drop, animations.frustrate, animations.sing, animations.study, animations.think, animations.trash, animations.drink];
links.push(new Link(zNode.outputs.next, puppetNode.inputs.next));
links.push(new Link(xNode.outputs.next, puppetNode.inputs.next));
links.push(new Link(cNode.outputs.next, puppetNode.inputs.next));
links.push(new Link(tNode.outputs.next, puppetNode.inputs.next));
links.push(new Link(vNode.outputs.next, puppetNode.inputs.next));
links.push(new Link(pNode.outputs.next, puppetNode.inputs.next));
draw = function(){
  puppet.pull();
  workspace.clear();
  links.map(function(it){
    return it.draw(workspace);
  });
  return nodes.map(function(it){
    return it.draw(workspace);
  });
};
global.GlobalServices.Poke.poke = function(){
  return setTimeout(draw, 0);
};
dragger = new DragMonitor;
dragger.onPointerRelease(draw);
dragger.onPointerDrag(function(Δx, Δy){
  if (hotNode != null) {
    hotNode.moveBy(v2(Δx, Δy));
  }
  return draw();
});
document.addEventListener('mousemove', function(arg$){
  var pageX, pageY, hotFound, i$, ref$, len$, node;
  pageX = arg$.pageX, pageY = arg$.pageY;
  if ((hotNode != null ? hotNode.state.mode : void 8) === INTERACTION_MODE_ACTIVE) {
    return;
  }
  hotFound = false;
  for (i$ = 0, len$ = (ref$ = nodes).length; i$ < len$; ++i$) {
    node = ref$[i$];
    if (node.boundsContains(v2(pageX, pageY))) {
      node.setMode(INTERACTION_MODE_HOT);
      hotFound = true;
      hotNode = node;
    } else {
      node.setMode(INTERACTION_MODE_IDLE);
    }
  }
  if (!hotFound) {
    hotNode = null;
  }
  return draw();
});
document.addEventListener('mousedown', function(){
  if (hotNode != null) {
    hotNode.setMode(INTERACTION_MODE_ACTIVE);
  }
  return draw();
});
document.addEventListener('mouseup', function(){
  if (hotNode != null) {
    hotNode.setMode(INTERACTION_MODE_HOT);
  }
  return draw();
});
workspace.install(document.body);
draw();



}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./blitter":2,"./drag-monitor":3,"./input-set":6,"./link":7,"./node":8,"./puppet":10,"./representations/key":13,"./representations/puppet":14,"./representations/timer":15,"./sprite":16,"./triggers/key":19,"./triggers/mic":20,"./triggers/mouse":21,"./triggers/timer":22,"./workspace":23,"config":1,"std":17}],6:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, v2, PortSet, InputSet, OutputSet, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, v2 = ref$.v2;
PortSet = (function(){
  PortSet.displayName = 'PortSet';
  var PORT_WIDTH, prototype = PortSet.prototype, constructor = PortSet;
  PORT_WIDTH = 20;
  function PortSet(ports, config){
    var ref$, pos;
    this.ports = ports != null
      ? ports
      : [];
    this.offset = (ref$ = config.offset) != null ? ref$ : 0, this.height = (ref$ = config.height) != null ? ref$ : 100, pos = (ref$ = config.pos) != null
      ? ref$
      : v2(0, 0);
    this.pos = v2(0, 0);
    this.moveTo(pos);
  }
  prototype.getPortVerticalPos = function(i){
    var space, start;
    space = (this.height - 20 * this.length) / (this.length === 1
      ? 1
      : this.length - 1);
    start = this.pos.y + PORT_WIDTH / 2 - this.height / 2;
    return start + i * (PORT_WIDTH + space);
  };
  prototype.moveTo = function(arg$){
    var x, y, i$, ref$, len$, i, port, results$ = [];
    x = arg$.x, y = arg$.y;
    this.pos.x = x + this.offset;
    this.pos.y = y;
    for (i$ = 0, len$ = (ref$ = this.ports).length; i$ < len$; ++i$) {
      i = i$;
      port = ref$[i$];
      results$.push(port.moveTo({
        x: this.pos.x,
        y: this.getPortVerticalPos(i)
      }));
    }
    return results$;
  };
  Object.defineProperty(prototype, 'next', {
    get: function(){
      var i$, ref$, len$, port;
      for (i$ = 0, len$ = (ref$ = this.ports).length; i$ < len$; ++i$) {
        port = ref$[i$];
        if (port.link == null) {
          return port;
        }
      }
    },
    configurable: true,
    enumerable: true
  });
  Object.defineProperty(prototype, 'length', {
    get: function(){
      return this.ports.length;
    },
    configurable: true,
    enumerable: true
  });
  prototype.pull = function(){
    return this.owner.pull();
  };
  return PortSet;
}());
out$.InputSet = InputSet = (function(superclass){
  var prototype = extend$((import$(InputSet, superclass).displayName = 'InputSet', InputSet), superclass).prototype, constructor = InputSet;
  function InputSet(){
    InputSet.superclass.apply(this, arguments);
  }
  return InputSet;
}(PortSet));
out$.OutputSet = OutputSet = (function(superclass){
  var prototype = extend$((import$(OutputSet, superclass).displayName = 'OutputSet', OutputSet), superclass).prototype, constructor = OutputSet;
  function OutputSet(){
    OutputSet.superclass.apply(this, arguments);
  }
  return OutputSet;
}(PortSet));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"std":17}],7:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, hyp, randomFrom, COLOR_DARK_GREEN, COLOR_BRIGHT_GREEN, Link, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, hyp = ref$.hyp, randomFrom = ref$.randomFrom;
COLOR_DARK_GREEN = 'green';
COLOR_BRIGHT_GREEN = '#0e3';
out$.Link = Link = (function(){
  Link.displayName = 'Link';
  var bendStrength, prototype = Link.prototype, constructor = Link;
  bendStrength = 50;
  function Link(from, to){
    this.from = from;
    this.to = to;
    this.from.assignLink(this);
    this.to.assignLink(this);
    log(this.from.pull());
  }
  prototype.draw = function(arg$){
    var ctx, state, d, b;
    ctx = arg$.ctx;
    state = this.from.pull();
    d = hyp(this.to.pos, this.from.pos);
    d = this.to.pos.x - this.from.pos.x;
    b = d <= bendStrength ? bendStrength * Math.pow(d / bendStrength, 1.4) : bendStrength;
    ctx.strokeStyle = state ? COLOR_BRIGHT_GREEN : COLOR_DARK_GREEN;
    ctx.lineWidth = 5;
    ctx.beginPath();
    ctx.moveTo(this.from.pos.x, this.from.pos.y);
    ctx.bezierCurveTo(this.from.pos.x + b, this.from.pos.y, this.to.pos.x - b, this.to.pos.y, this.to.pos.x, this.to.pos.y);
    ctx.stroke();
    return ctx.closePath();
  };
  return Link;
}());



},{"std":17}],8:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, v2, Graphic, RectXYS, InputSet, OutputSet, Node, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, v2 = ref$.v2;
Graphic = require('./graphic').Graphic;
RectXYS = require('./rect').RectXYS;
ref$ = require('./input-set'), InputSet = ref$.InputSet, OutputSet = ref$.OutputSet;
out$.Node = Node = (function(){
  Node.displayName = 'Node';
  var prototype = Node.prototype, constructor = Node;
  function Node(arg$){
    var inputs, ref$, outputs;
    this.content = arg$.content, this.pos = arg$.pos, this.size = arg$.size, inputs = (ref$ = arg$.inputs) != null ? ref$ : 1, outputs = (ref$ = arg$.outputs) != null ? ref$ : 1, this.rep = (ref$ = arg$.rep) != null
      ? ref$
      : new Graphic;
    this.state = {
      mode: INTERACTION_MODE_IDLE,
      signal: false
    };
    this.bounds = new RectXYS(this.pos, this.size);
    this.inputs = new InputSet(this.content.inputs, {
      offset: this.size / -2,
      pos: this.pos,
      height: this.size
    });
    this.outputs = new OutputSet(this.content.outputs, {
      offset: this.size / +2,
      pos: this.pos,
      height: this.size
    });
  }
  prototype.pull = function(){
    return this.state.signal = this.content.state;
  };
  prototype.draw = function(arg$){
    var ctx, i$, ref$, len$, i, input, j, output, results$ = [];
    ctx = arg$.ctx;
    this.rep.draw(this.content);
    ctx.drawImage(this.rep.canvas, this.pos.x - this.size / 2, this.pos.y - this.size / 2, this.size, this.size);
    ctx.fillStyle = 'blue';
    for (i$ = 0, len$ = (ref$ = this.inputs.ports).length; i$ < len$; ++i$) {
      i = i$;
      input = ref$[i$];
      ctx.fillRect(input.pos.x, input.pos.y - 10, 20, 20);
    }
    ctx.fillStyle = 'magenta';
    for (i$ = 0, len$ = (ref$ = this.outputs.ports).length; i$ < len$; ++i$) {
      j = i$;
      output = ref$[i$];
      results$.push(ctx.fillRect(output.pos.x - 20, output.pos.y - 10, 20, 20));
    }
    return results$;
  };
  prototype.setMode = function(mode){
    this.rep.setMode(mode);
    return this.state.mode = mode;
  };
  prototype.moveTo = function(arg$){
    var x, y;
    x = arg$.x, y = arg$.y;
    this.pos.x = x;
    this.pos.y = y;
    return this.updateChildPos();
  };
  prototype.moveBy = function(arg$){
    var x, y;
    x = arg$.x, y = arg$.y;
    this.pos.x += x;
    this.pos.y += y;
    return this.updateChildPos();
  };
  prototype.updateChildPos = function(){
    this.bounds.moveTo(this.pos);
    this.inputs.moveTo(this.pos);
    return this.outputs.moveTo(this.pos);
  };
  prototype.boundsContains = function(point){
    return this.bounds.contains(point);
  };
  return Node;
}());



},{"./graphic":4,"./input-set":6,"./rect":11,"std":17}],9:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, v2, Port, Input, Output, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, v2 = ref$.v2;
Port = (function(){
  Port.displayName = 'Port';
  var prototype = Port.prototype, constructor = Port;
  function Port(arg$){
    var pos;
    this.type = arg$.type, this.onPull = arg$.onPull, pos = arg$.pos;
    log('new Port', this.type, this.onPull);
    this.pos = v2(0, 0);
    this.moveTo(pos);
  }
  prototype.assignLink = function(link){
    this.link = link;
  };
  prototype.push = function(){
    return this.onPull();
  };
  prototype.pull = function(){
    return log(this.onPull());
  };
  prototype.moveTo = function(pos){
    if (pos) {
      this.pos.x = pos.x;
      return this.pos.y = pos.y;
    }
  };
  return Port;
}());
out$.Input = Input = (function(superclass){
  var prototype = extend$((import$(Input, superclass).displayName = 'Input', Input), superclass).prototype, constructor = Input;
  function Input(){
    Input.superclass.apply(this, arguments);
  }
  return Input;
}(Port));
import$(out$, function(){
  return superclass.apply(this, arguments);
});
out$.Output = Output = (function(superclass){
  var prototype = extend$((import$(Output, superclass).displayName = 'Output', Output), superclass).prototype, constructor = Output;
  function Output(){
    Output.superclass.apply(this, arguments);
  }
  return Output;
}(Port));
import$(out$, function(){
  return superclass.apply(this, arguments);
});
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"std":17}],10:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, mash, Sprite, Input, Puppet, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, mash = ref$.mash;
Sprite = require('./sprite').Sprite;
Input = require('./port').Input;
out$.Puppet = Puppet = (function(){
  Puppet.displayName = 'Puppet';
  var inputSpec, prototype = Puppet.prototype, constructor = Puppet;
  inputSpec = [
    {
      type: SIGNAL_TYPE_GRAPHIC,
      onPull: function(){
        return log('a');
      }
    }, {
      type: SIGNAL_TYPE_GRAPHIC,
      onPull: function(){
        return log('b');
      }
    }, {
      type: SIGNAL_TYPE_GRAPHIC,
      onPull: function(){
        return log('c');
      }
    }, {
      type: SIGNAL_TYPE_GRAPHIC,
      onPull: function(){
        return log('d');
      }
    }, {
      type: SIGNAL_TYPE_GRAPHIC,
      onPull: function(){
        return log('e');
      }
    }, {
      type: SIGNAL_TYPE_GRAPHIC,
      onPull: function(){
        return log('f');
      }
    }, {
      type: SIGNAL_TYPE_GRAPHIC,
      onPull: function(){
        return log('g');
      }
    }, {
      type: SIGNAL_TYPE_GRAPHIC,
      onPull: function(){
        return log('h');
      }
    }
  ];
  function Puppet(){
    var res$, i$, ref$, len$, ref1$, type, onPull;
    res$ = [];
    for (i$ = 0, len$ = (ref$ = inputSpec).length; i$ < len$; ++i$) {
      ref1$ = ref$[i$], type = ref1$.type, onPull = ref1$.onPull;
      res$.push(new Input({
        type: type,
        onPull: onPull
      }));
    }
    this.inputs = res$;
  }
  prototype.pull = function(){};
  prototype.getSize = function(){
    var max, i$, ref$, len$, sprite;
    return 200;
    max = 0;
    for (i$ = 0, len$ = (ref$ = this.chain).length; i$ < len$; ++i$) {
      sprite = ref$[i$];
      if (sprite.width > max) {
        max = sprite.width;
      }
      if (sprite.height > max) {
        max = sprite.width;
      }
    }
    return max;
  };
  prototype.getWinningSprite = function(){
    var winner, i$, ref$, len$, i, sprite;
    return {
      blitTo: id
    };
    winner = this.chain[0];
    for (i$ = 0, len$ = (ref$ = this.chain).length; i$ < len$; ++i$) {
      i = i$;
      sprite = ref$[i$];
      if (i > 0) {
        if (sprite.active) {
          winner = sprite;
        }
      }
    }
    return winner;
  };
  prototype.set = function(spriteName, state){
    return this.animations[spriteName].active = state;
  };
  prototype.draw = function(arg$){
    var ctx, size, offset, ref$, winner;
    ctx = arg$.ctx, size = arg$.size, offset = (ref$ = arg$.offset) != null
      ? ref$
      : v2(0, 0);
    winner = this.getWinningSprite();
    return winner.blitTo(ctx, offset.x, offset.y + size - winner.height);
  };
  return Puppet;
}());



},{"./port":9,"./sprite":16,"std":17}],11:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var RectXYWH, RectXYS, out$ = typeof exports != 'undefined' && exports || this;
out$.RectXYWH = RectXYWH = (function(){
  RectXYWH.displayName = 'RectXYWH';
  var prototype = RectXYWH.prototype, constructor = RectXYWH;
  function RectXYWH(arg$, arg1$){
    this.x = arg$.x, this.y = arg$.y;
    this.w = arg1$.w, this.h = arg1$.h;
    this.update();
  }
  prototype.update = function(){
    this.left = this.x - this.w / 2;
    this.right = this.x + this.w / 2;
    this.top = this.y - this.h / 2;
    return this.bottom = this.y + this.h / 2;
  };
  prototype.contains = function(arg$){
    var x, y;
    x = arg$.x, y = arg$.y;
    return (this.left < x && x < this.right) && (this.top < y && y < this.bottom);
  };
  return RectXYWH;
}());
out$.RectXYS = RectXYS = (function(superclass){
  var prototype = extend$((import$(RectXYS, superclass).displayName = 'RectXYS', RectXYS), superclass).prototype, constructor = RectXYS;
  function RectXYS(pos, size){
    RectXYS.superclass.call(this, pos, {
      w: size,
      h: size
    });
  }
  prototype.moveTo = function(arg$){
    var x, y;
    x = arg$.x, y = arg$.y;
    this.x = x;
    this.y = y;
    return this.update();
  };
  return RectXYS;
}(RectXYWH));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{}],12:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Representation, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
out$.Representation = Representation = (function(){
  Representation.displayName = 'Representation';
  var prototype = Representation.prototype, constructor = Representation;
  function Representation(target){
    this.target = target;
    this.size = 100;
    this.state = {
      mode: INTERACTION_MODE_IDLE
    };
    this.canvas = document.createElement('canvas');
    this.canvas.width = this.canvas.height = this.size;
    this.ctx = this.canvas.getContext('2d');
    this.ctx.fillStyle = 'lightgrey';
    this.ctx.fillRect(0, 0, this.size, this.size);
  }
  prototype.draw = function(){
    this.ctx.fillStyle = this.borderColor();
    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
    this.ctx.fillStyle = 'white';
    return this.ctx.fillRect(10, 10, this.size - 20, this.size - 20);
  };
  prototype.borderColor = function(){
    if (this.target.state) {
      return COLOR_BRIGHT_GREEN;
    } else {
      return this.modeColor(this.state.mode);
    }
  };
  prototype.modeColor = function(mode){
    switch (mode) {
    case INTERACTION_MODE_IDLE:
      return 'darkred';
    case INTERACTION_MODE_HOT:
      return 'orange';
    case INTERACTION_MODE_ACTIVE:
      return 'red';
    }
  };
  prototype.setMode = function(mode){
    return this.state.mode = mode;
  };
  return Representation;
}());



},{"std":17}],13:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var Representation, KeyRep, out$ = typeof exports != 'undefined' && exports || this;
Representation = require('./base').Representation;
out$.KeyRep = KeyRep = (function(superclass){
  var prototype = extend$((import$(KeyRep, superclass).displayName = 'KeyRep', KeyRep), superclass).prototype, constructor = KeyRep;
  function KeyRep(){
    KeyRep.superclass.apply(this, arguments);
  }
  prototype.draw = function(){
    superclass.prototype.draw.apply(this, arguments);
    this.ctx.fillStyle = 'black';
    this.ctx.font = this.size / 2 + "px monospace";
    this.ctx.textAlign = 'center';
    this.ctx.textBaseline = 'middle';
    return this.ctx.fillText(this.target.keysym, this.size / 2, this.size / 2, this.size, this.size);
  };
  return KeyRep;
}(Representation));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./base":12}],14:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, v2, Representation, PuppetRep, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, v2 = ref$.v2;
Representation = require('./base').Representation;
out$.PuppetRep = PuppetRep = (function(superclass){
  var prototype = extend$((import$(PuppetRep, superclass).displayName = 'PuppetRep', PuppetRep), superclass).prototype, constructor = PuppetRep;
  function PuppetRep(){
    PuppetRep.superclass.apply(this, arguments);
  }
  prototype.draw = function(){
    this.size = this.target.getSize();
    this.canvas.width = this.canvas.height = this.size;
    superclass.prototype.draw.apply(this, arguments);
    return this.target.draw({
      ctx: this.ctx,
      size: this.size - 20,
      offset: v2(10, 10)
    });
  };
  return PuppetRep;
}(Representation));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./base":12,"std":17}],15:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var Representation, TimerRep, out$ = typeof exports != 'undefined' && exports || this;
Representation = require('./base').Representation;
out$.TimerRep = TimerRep = (function(superclass){
  var prototype = extend$((import$(TimerRep, superclass).displayName = 'TimerRep', TimerRep), superclass).prototype, constructor = TimerRep;
  function TimerRep(){
    TimerRep.superclass.apply(this, arguments);
  }
  prototype.draw = function(){
    superclass.prototype.draw.apply(this, arguments);
    this.ctx.fillStyle = 'black';
    this.ctx.font = this.size / 4 + "px monospace";
    this.ctx.textAlign = 'center';
    this.ctx.textBaseline = 'middle';
    this.ctx.beginPath();
    this.ctx.moveTo(0, this.size / 2);
    this.ctx.lineTo(this.size, this.size / 2);
    this.ctx.closePath();
    this.ctx.stroke();
    this.ctx.fillText(this.target.time, this.size / 2, this.size / 2 - this.size / 5, this.size, this.size);
    return this.ctx.fillText(this.target.duty, this.size / 2, this.size / 2 + this.size / 5, this.size, this.size);
  };
  return TimerRep;
}(Representation));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./base":12}],16:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, v2, Blitter, Sprite, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, v2 = ref$.v2;
Blitter = require('./blitter').Blitter;
out$.Sprite = Sprite = (function(superclass){
  var prototype = extend$((import$(Sprite, superclass).displayName = 'Sprite', Sprite), superclass).prototype, constructor = Sprite;
  function Sprite(arg$){
    var src, this$ = this;
    src = arg$.src;
    Sprite.superclass.apply(this, arguments);
    this.img = new Image;
    this.img.onload = function(){
      this$.width = this$.canvas.width = this$.img.width;
      this$.height = this$.canvas.height = this$.img.height;
      this$.size = v2(this$.width, this$.height);
      this$.ctx.drawImage(this$.img, 0, 0);
      return GlobalServices.Poke.poke();
    };
    this.img.src = src;
    this.active = false;
  }
  return Sprite;
}(Blitter));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./blitter":2,"std":17}],17:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var id, log, flip, delay, defer, v2, floor, rand, randomFrom, sqrt, hyp, raf, mash, logError, getMicrophone, keys, loadImage, out$ = typeof exports != 'undefined' && exports || this;
out$.id = id = function(it){
  return it;
};
out$.log = log = function(){
  console.log.apply(console, arguments);
  return arguments[0];
};
out$.flip = flip = function(λ){
  return curry$(function(a, b){
    return λ(b, a);
  });
};
out$.delay = delay = flip(setTimeout);
out$.defer = defer = delay(0);
out$.v2 = v2 = function(x, y){
  if (y != null) {
    return {
      x: x,
      y: y
    };
  } else {
    return {
      x: x.x,
      y: x.y
    };
  }
};
out$.floor = floor = Math.floor;
out$.rand = rand = (function(it){
  return it * Math.random();
});
out$.randomFrom = randomFrom = function(xs){
  return xs[floor(rand(xs.length))];
};
out$.sqrt = sqrt = Math.sqrt;
out$.hyp = hyp = function(a, b){
  var Δx, Δy;
  Δx = b.x - a.x;
  Δy = b.y - a.y;
  return sqrt(Δx * Δx + Δy * Δy);
};
out$.raf = raf = requestAnimationFrame;
out$.mash = mash = function(xs){
  var i$, len$, ref$, k, v, resultObj$ = {};
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    ref$ = xs[i$], k = ref$[0], v = ref$[1];
    resultObj$[k] = v;
  }
  return resultObj$;
};
out$.logError = logError = function(){
  return log(this, arguments);
};
out$.getMicrophone = getMicrophone = function(λ){
  return navigator.webkitGetUserMedia({
    audio: true
  }, λ, logError);
};
out$.keys = keys = function(it){
  var k, v, results$ = [];
  for (k in it) {
    v = it[k];
    results$.push(k);
  }
  return results$;
};
out$.loadImage = loadImage = function(src, λ){
  var image;
  λ == null && (λ = id);
  image = new Image;
  image.src = src;
  image.onload = λ;
  return image;
};
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}



},{}],18:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Trigger, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
out$.Trigger = Trigger = (function(){
  Trigger.displayName = 'Trigger';
  var prototype = Trigger.prototype, constructor = Trigger;
  function Trigger(){
    this.state = false;
    this.callback = id;
  }
  prototype.set = function(state){
    this.state = state;
    this.callback(state);
    return GlobalServices.Poke.poke();
  };
  prototype.onStateChange = function(λ){
    return this.callback = λ;
  };
  prototype.specifyInputs = function(){
    return [];
  };
  prototype.specifyOutputs = function(){
    return [];
  };
  return Trigger;
}());



},{"std":17}],19:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Trigger, Output, keysymbols, KeyTrigger, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
Trigger = require('./base').Trigger;
Output = require('../port').Output;
keysymbols = {
  90: 'Z',
  88: 'X',
  67: 'C',
  86: 'V'
};
out$.KeyTrigger = KeyTrigger = (function(superclass){
  var outputSpec, prototype = extend$((import$(KeyTrigger, superclass).displayName = 'KeyTrigger', KeyTrigger), superclass).prototype, constructor = KeyTrigger;
  outputSpec = [{
    type: SIGNAL_TYPE_POKE,
    onPull: function(){
      return KeyTrigger.state;
    }
  }];
  function KeyTrigger(keycode){
    var res$, i$, ref$, len$, ref1$, type, onPull, this$ = this;
    KeyTrigger.superclass.apply(this, arguments);
    this.keysym = keysymbols[keycode];
    this.canvas = document.createElement('canvas');
    this.canvas.width = this.canvas.height = 100;
    this.ctx = this.canvas.getContext('2d');
    this.ctx.fillRect(0, 0, 100, 100);
    res$ = [];
    for (i$ = 0, len$ = (ref$ = outputSpec).length; i$ < len$; ++i$) {
      ref1$ = ref$[i$], type = ref1$.type, onPull = ref1$.onPull;
      res$.push(new Output({
        type: type,
        onPull: onPull
      }));
    }
    this.outputs = res$;
    document.addEventListener('keydown', function(arg$){
      var which;
      which = arg$.which;
      if (keycode === which) {
        return this$.set(true);
      }
    });
    document.addEventListener('keyup', function(arg$){
      var which;
      which = arg$.which;
      if (keycode === which) {
        return this$.set(false);
      }
    });
  }
  prototype.setMode = function(mode){
    return log(mode);
  };
  return KeyTrigger;
}(Trigger));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"../port":9,"./base":18,"std":17}],20:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, raf, keys, getMicrophone, Trigger, MicTrigger, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, raf = ref$.raf, keys = ref$.keys, getMicrophone = ref$.getMicrophone;
Trigger = require('./base').Trigger;
out$.MicTrigger = MicTrigger = (function(superclass){
  var SMOOTHING, THRESHOLD, prototype = extend$((import$(MicTrigger, superclass).displayName = 'MicTrigger', MicTrigger), superclass).prototype, constructor = MicTrigger;
  SMOOTHING = 5;
  THRESHOLD = 1.1;
  function MicTrigger(){
    var this$ = this;
    this.running = false;
    this.audio = new AudioContext;
    this.hist = [];
    this.avg = 0;
    this.analyser = this.audio.createAnalyser();
    this.analyser.fftSize = 2048;
    this.bufferLength = this.analyser.frequencyBinCount;
    this.dataArray = new Uint8Array(this.bufferLength);
    getMicrophone(function(micStream){
      this$.mic = this$.audio.createMediaStreamSource(micStream);
      this$.mic.connect(this$.analyser);
      this$.running = true;
      return this$.monitor();
    });
  }
  prototype.monitor = function(){
    var avg, max, i$, to$, i, sample, ref$, len$, p;
    if (this.running) {
      raf(bind$(this, 'monitor'));
    }
    this.analyser.getByteTimeDomainData(this.dataArray);
    avg = 0;
    max = 0;
    for (i$ = 0, to$ = this.bufferLength; i$ <= to$; ++i$) {
      i = i$;
      sample = this.dataArray[i];
      if (sample > max) {
        max = sample;
      }
    }
    this.hist.push(max / 128);
    if (this.hist.length >= SMOOTHING) {
      this.hist.shift();
    }
    for (i$ = 0, len$ = (ref$ = this.hist).length; i$ < len$; ++i$) {
      p = ref$[i$];
      avg += p;
    }
    avg /= SMOOTHING;
    this.set(avg > THRESHOLD);
    return this.avg = avg;
  };
  prototype.draw = function(arg$){
    var ctx, size;
    ctx = arg$.ctx, size = arg$.size;
    ctx.fillStyle = 'grey';
    ctx.fillRect(0, 0, size, 5);
    ctx.fillStyle = 'lightgrey';
    ctx.fillRect(0, 0, size / 2 * THRESHOLD, 5);
    ctx.fillStyle = this.state ? 'red' : 'blue';
    ctx.fillRect(0, 0, size / 2 * this.avg, 5);
    return ctx.globalAlpha = 1;
  };
  return MicTrigger;
}(Trigger));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}



},{"./base":18,"std":17}],21:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Trigger, MouseTrigger, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
Trigger = require('./base').Trigger;
out$.MouseTrigger = MouseTrigger = (function(superclass){
  var prototype = extend$((import$(MouseTrigger, superclass).displayName = 'MouseTrigger', MouseTrigger), superclass).prototype, constructor = MouseTrigger;
  function MouseTrigger(buttonIndex){
    var this$ = this;
    MouseTrigger.superclass.apply(this, arguments);
    document.addEventListener('mousedown', function(event){
      var button;
      button = event.button;
      if (buttonIndex === button) {
        return this$.set(true);
      }
    });
    document.addEventListener('mouseup', function(arg$){
      var button;
      button = arg$.button;
      if (buttonIndex === button) {
        return this$.set(false);
      }
    });
    if (buttonIndex === MOUSE_RIGHT) {
      document.addEventListener('contextmenu', function(it){
        return it.preventDefault();
      });
    }
  }
  return MouseTrigger;
}(Trigger));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./base":18,"std":17}],22:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Trigger, Output, TimerTrigger, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
Trigger = require('./base').Trigger;
Output = require('../port').Output;
out$.TimerTrigger = TimerTrigger = (function(superclass){
  var outputSpec, prototype = extend$((import$(TimerTrigger, superclass).displayName = 'TimerTrigger', TimerTrigger), superclass).prototype, constructor = TimerTrigger;
  outputSpec = [{
    type: SIGNAL_TYPE_POKE,
    onPull: function(){
      log('active');
      return TimerTrigger.active;
    }
  }];
  function TimerTrigger(arg$){
    var ref$, res$, i$, len$, ref1$, type, onPull, setOff, fn, this$ = this;
    this.time = arg$.time, this.duty = (ref$ = arg$.duty) != null ? ref$ : 0.5;
    TimerTrigger.superclass.apply(this, arguments);
    this.active = true;
    res$ = [];
    for (i$ = 0, len$ = (ref$ = outputSpec).length; i$ < len$; ++i$) {
      ref1$ = ref$[i$], type = ref1$.type, onPull = ref1$.onPull;
      res$.push(new Output({
        type: type,
        onPull: onPull
      }));
    }
    this.outputs = res$;
    setOff = function(){
      return this$.set(false);
    };
    fn = function(){
      this$.set(true);
      setTimeout(setOff, this$.time * 1000 * this$.duty);
      if (this$.active) {
        return setTimeout(fn, this$.time * 1000);
      }
    };
    fn();
  }
  prototype.stop = function(){
    return this.active = false;
  };
  return TimerTrigger;
}(Trigger));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"../port":9,"./base":18,"std":17}],23:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var Blitter, Workspace, out$ = typeof exports != 'undefined' && exports || this;
Blitter = require('./blitter').Blitter;
out$.Workspace = Workspace = (function(superclass){
  var prototype = extend$((import$(Workspace, superclass).displayName = 'Workspace', Workspace), superclass).prototype, constructor = Workspace;
  function Workspace(){
    Workspace.superclass.call(this, {
      size: 550
    });
  }
  prototype.install = function(host){
    return host.appendChild(this.canvas);
  };
  return Workspace;
}(Blitter));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./blitter":2}]},{},[5])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,

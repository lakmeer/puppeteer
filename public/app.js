(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
// Generated by LiveScript 1.4.0
global.CONFIG_EVENT_SOURCE = EVENT_SOURCE_BROWSER;
global.CONFIG_SOCKET_SERVER_ADDR = 'http://localhost:9000';



}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],2:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Blitter, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
out$.Blitter = Blitter = (function(){
  Blitter.displayName = 'Blitter';
  var idx, prototype = Blitter.prototype, constructor = Blitter;
  idx = function(i){
    i == null && (i = 0);
    return function(){
      return i++;
    };
  }();
  function Blitter(arg$){
    this.size = arg$.size;
    this.canvas = document.createElement('canvas');
    this.canvas.width = this.canvas.height = this.size;
    this.ctx = this.canvas.getContext('2d');
    this.id = idx();
  }
  prototype.clear = function(){
    return this.ctx.clearRect(0, 0, this.size, this.size);
  };
  prototype.blitTo = function(ctx, x, y, w, h){
    if (w != null && h != null) {
      return ctx.drawImage(this.canvas, x, y, w, h);
    } else {
      return ctx.drawImage(this.canvas, x, y);
    }
  };
  return Blitter;
}());



},{"std":35}],3:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, defer, DragMonitor, out$ = typeof exports != 'undefined' && exports || this, slice$ = [].slice;
ref$ = require('std'), id = ref$.id, log = ref$.log, defer = ref$.defer;
out$.DragMonitor = DragMonitor = (function(){
  DragMonitor.displayName = 'DragMonitor';
  var normaliseMouse, normaliseTouch, prototype = DragMonitor.prototype, constructor = DragMonitor;
  normaliseMouse = function(λ){
    return function(arg$){
      var pageX, pageY;
      pageX = arg$.pageX, pageY = arg$.pageY;
      return λ(pageX, pageY);
    };
  };
  normaliseTouch = id;
  function DragMonitor(){
    var this$ = this;
    this.pointerRelease = bind$(this, 'pointerRelease', prototype);
    this.pointerEngage = bind$(this, 'pointerEngage', prototype);
    this.pointerMove = bind$(this, 'pointerMove', prototype);
    this.state = {
      enabled: true,
      dragging: false,
      released: false,
      down: false,
      Δx: 0,
      Δy: 0,
      last: [0, 0]
    };
    this.callbacks = {
      drag: id,
      done: id
    };
    document.addEventListener('keydown', function(arg$){
      var which;
      which = arg$.which;
      if (which === 16) {
        return this$.pointerEngage();
      }
    });
    document.addEventListener('keyup', function(arg$){
      var which;
      which = arg$.which;
      if (which === 16) {
        return this$.pointerRelease();
      }
    });
    document.addEventListener('mousedown', normaliseMouse(this.pointerEngage));
    document.addEventListener('mousemove', normaliseMouse(this.pointerMove));
    document.addEventListener('mouseup', normaliseMouse(this.pointerRelease));
    document.addEventListener('touchstart', normaliseTouch(this.pointerEngage));
    document.addEventListener('touchmove', normaliseTouch(this.pointerMove));
    document.addEventListener('touchend', normaliseTouch(this.pointerRelease));
  }
  prototype.dispatch = function(event){
    var args, ref$;
    args = slice$.call(arguments, 1);
    if (this.state.enabled) {
      return (ref$ = this.callbacks)[event].apply(ref$, args);
    }
  };
  prototype.pointerMove = function(x, y){
    var Δx, Δy;
    if (this.state.down || this.state.dragging) {
      this.state.dragging = true;
      this.state.Δx = Δx = x - this.state.last[0];
      this.state.Δy = Δy = y - this.state.last[1];
      this.state.last = [x, y];
      return this.dispatch('drag', Δx, Δy);
    }
  };
  prototype.pointerEngage = function(x, y){
    this.state.down = true;
    return this.state.last = [x, y];
  };
  prototype.pointerRelease = function(x, y){
    var this$ = this;
    x == null && (x = this.state.last[0]);
    y == null && (y = this.state.last[1]);
    defer(function(){
      return this$.state.dragging = false;
    });
    this.state.released = true;
    this.state.last = [x, y];
    this.state.down = false;
    this.dispatch('drag', 0, 0);
    return this.dispatch('done', this.state);
  };
  prototype.onPointerDrag = function(λ){
    return this.callbacks.drag = λ;
  };
  prototype.onPointerRelease = function(λ){
    return this.callbacks.done = λ;
  };
  prototype.toggleEventListening = function(state){
    return this.state.enabled = state;
  };
  return DragMonitor;
}());
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}



},{"std":35}],4:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var EventSource, BrowserEventSource, out$ = typeof exports != 'undefined' && exports || this;
EventSource = require('./event-source').EventSource;
out$.BrowserEventSource = BrowserEventSource = (function(superclass){
  var prototype = extend$((import$(BrowserEventSource, superclass).displayName = 'BrowserEventSource', BrowserEventSource), superclass).prototype, constructor = BrowserEventSource;
  prototype.listener = function(eventName, processor){
    return document.addEventListener(eventName, compose$(processor, this.dispatch(eventName)));
  };
  function BrowserEventSource(){
    BrowserEventSource.superclass.apply(this, arguments);
  }
  return BrowserEventSource;
}(EventSource));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
function compose$() {
  var functions = arguments;
  return function() {
    var i, result;
    result = functions[0].apply(this, arguments);
    for (i = 1; i < functions.length; ++i) {
      result = functions[i](result);
    }
    return result;
  };
}



},{"./event-source":6}],5:[function(require,module,exports){
(function (global){
// Generated by LiveScript 1.4.0
global.INTERACTION_MODE_IDLE = Symbol('idle');
global.INTERACTION_MODE_HOT = Symbol('hot');
global.INTERACTION_MODE_ACTIVE = Symbol('active');
global.LINK_STATUS_OK = Symbol('ok');
global.LINK_STATUS_MISMATCH = Symbol('type-mismatch');
global.KEY_Z = 90;
global.KEY_X = 88;
global.KEY_C = 67;
global.KEY_V = 86;
global.MOUSE_LEFT = 0;
global.MOUSE_MIDDLE = 1;
global.MOUSE_RIGHT = 2;
global.COLOR_DARK_GREEN = 'green';
global.COLOR_BRIGHT_GREEN = '#0e3';
global.COLOR_YELLOW = '#ff0';
global.COLOR_RED = '#f23';
global.COLOR_DARK_RED = '#812';
global.COLOR_BRIGHT_RED = '#f89';
global.COLOR_DARK_BLUE = '#118';
global.COLOR_BRIGHT_BLUE = '#48f';
global.COLOR_PURPLE = '#929';
global.COLOR_MAGENTA = '#f3f';
global.SIGNAL_TYPE_POKE = Symbol('poke');
global.SIGNAL_TYPE_NUMBER = Symbol('number');
global.SIGNAL_TYPE_GRAPHIC = Symbol('graphic');
global.SIGNAL_TYPE_TEXT = Symbol('text');
global.EVENT_SOURCE_WEBSOCKETS = Symbol('websockets');
global.EVENT_SOURCE_BROWSER = Symbol('browser');



}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],6:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var EventSource, out$ = typeof exports != 'undefined' && exports || this;
out$.EventSource = EventSource = (function(){
  EventSource.displayName = 'EventSource';
  var prototype = EventSource.prototype, constructor = EventSource;
  function EventSource(){
    this._dispatch = curry$(prototype.dispatch, true);
    this.dispatch = bind$(this, '_dispatch');
    this.callbacks = {
      keydown: [],
      keyup: [],
      mousedown: [],
      mouseup: []
    };
    this.establishListeners();
  }
  prototype.dispatch = function(eventName, value){
    return this.callbacks[eventName].map(function(it){
      return it(value);
    });
  };
  prototype.listener = function(eventName){
    return this.socket.on(eventName, this.dispatch(eventName));
  };
  prototype.on = function(event, λ){
    var that;
    if ((that = this.callbacks[event]) != null) {
      return that.push(λ);
    } else {
      return console.warn("GlobalServices.EventSource.on - not registering unknown event name: '" + event + "'");
    }
  };
  prototype.establishListeners = function(){
    this.listener('keydown', function(it){
      return it.which;
    });
    this.listener('keyup', function(it){
      return it.which;
    });
    this.listener('mousedown', function(it){
      return it.button;
    });
    return this.listener('mouseup', function(it){
      return it.button;
    });
  };
  return EventSource;
}());
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}



},{}],7:[function(require,module,exports){
(function (global){
// Generated by LiveScript 1.4.0
var ref$, id, log, PokeService, SceneLibrary, ServerInterface, BrowserEventSource, WebsocketEventSource;
ref$ = require('std'), id = ref$.id, log = ref$.log;
require('./const');
PokeService = require('./poke').PokeService;
SceneLibrary = require('./scene-library').SceneLibrary;
ServerInterface = require('./server-interface').ServerInterface;
BrowserEventSource = require('./browser-event-source').BrowserEventSource;
WebsocketEventSource = require('./websocket-event-source').WebsocketEventSource;
global.GlobalServices = {
  init: function(){
    GlobalServices.Server = new ServerInterface;
    GlobalServices.Poke = new PokeService;
    GlobalServices.SceneLibrary = new SceneLibrary({
      socket: GlobalServices.Server
    });
    return GlobalServices.EventSource = (function(){
      switch (CONFIG_EVENT_SOURCE) {
      case EVENT_SOURCE_WEBSOCKETS:
        return new WebsocketEventSource;
      case EVENT_SOURCE_BROWSER:
        return new BrowserEventSource;
      }
    }());
  }
};



}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./browser-event-source":4,"./const":5,"./poke":8,"./scene-library":9,"./server-interface":10,"./websocket-event-source":11,"std":35}],8:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, invoke, raf, PokeService, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, invoke = ref$.invoke, raf = ref$.raf;
out$.PokeService = PokeService = (function(){
  PokeService.displayName = 'PokeService';
  var prototype = PokeService.prototype, constructor = PokeService;
  function PokeService(){
    this.callbacks = [];
    this.pokeScheduled = false;
  }
  prototype.onPoke = function(λ){
    return this.callbacks.push(λ);
  };
  prototype.dispatch = function(){
    this.callbacks.map(invoke);
    return this.pokeScheduled = false;
  };
  prototype.poke = function(){
    return this.schedulePoke();
  };
  prototype.schedulePoke = function(){
    if (!this.pokeScheduled) {
      this.pokeScheduled = true;
      return raf(bind$(this, 'dispatch'));
    }
  };
  return PokeService;
}());
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}



},{"std":35}],9:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, SceneLibrary, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
out$.SceneLibrary = SceneLibrary = (function(){
  SceneLibrary.displayName = 'SceneLibrary';
  var prototype = SceneLibrary.prototype, constructor = SceneLibrary;
  function SceneLibrary(arg$){
    var this$ = this;
    this.socket = arg$.socket;
    this.loadCallback = id;
    this.socket.on('save-complete', function(name){
      return console.info("GlobalServices.SceneLibrary::save - Scene '" + name + "' saved.");
    });
    this.socket.on('load-complete', function(name, data){
      console.info("GlobalServices.SceneLibrary::load - Scene '" + name + "' loaded.");
      this$.loadCallback(JSON.parse(data));
      return this$.loadCallback = id;
    });
  }
  prototype.save = function(name, sceneData){
    var compressedScene;
    compressedScene = sceneData.replace(/[\s\n]/g, '');
    console.info('Persisting scene graph:', compressedScene);
    return this.socket.emit('save', name, compressedScene);
  };
  prototype.load = function(name, λ){
    this.socket.emit('load', name);
    return this.loadCallback = λ;
  };
  return SceneLibrary;
}());



},{"std":35}],10:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, ServerInterface, out$ = typeof exports != 'undefined' && exports || this, slice$ = [].slice;
ref$ = require('std'), id = ref$.id, log = ref$.log;
out$.ServerInterface = ServerInterface = (function(){
  ServerInterface.displayName = 'ServerInterface';
  var prototype = ServerInterface.prototype, constructor = ServerInterface;
  function ServerInterface(){
    this.socket = io(CONFIG_SOCKET_SERVER_ADDR);
  }
  prototype.getSocket = function(){
    return this.socket;
  };
  prototype.on = function(){
    var args, ref$;
    args = slice$.call(arguments);
    return (ref$ = this.socket).on.apply(ref$, args);
  };
  prototype.emit = function(){
    var args, ref$;
    args = slice$.call(arguments);
    return (ref$ = this.socket).emit.apply(ref$, args);
  };
  prototype.emitMessage = function(msg){
    var data, ref$;
    data = slice$.call(arguments, 1);
    return (ref$ = this.socket).emit.apply(ref$, [msg].concat(slice$.call(data)));
  };
  return ServerInterface;
}());



},{"std":35}],11:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var EventSource, WebsocketEventSource, out$ = typeof exports != 'undefined' && exports || this;
EventSource = require('./event-source').EventSource;
out$.WebsocketEventSource = WebsocketEventSource = (function(superclass){
  var prototype = extend$((import$(WebsocketEventSource, superclass).displayName = 'WebsocketEventSource', WebsocketEventSource), superclass).prototype, constructor = WebsocketEventSource;
  function WebsocketEventSource(){
    this._dispatch = curry$(prototype.dispatch, true);
    this.dispatch = bind$(this, '_dispatch');
    this.socket = GlobalServices.Server.getSocket();
    WebsocketEventSource.superclass.apply(this, arguments);
    this.socket.on('connect', function(){
      return console.info('connect');
    });
    this.socket.on('disconnect', function(){
      return console.warn('disconnect');
    });
  }
  prototype.dispatch = function(eventName, value){
    return this.callbacks[eventName].map(function(it){
      return it(value);
    });
  };
  return WebsocketEventSource;
}(EventSource));
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./event-source":6}],12:[function(require,module,exports){
(function (global){
// Generated by LiveScript 1.4.0
var ref$, id, log, raf, mash, randomFrom, v2, DragMonitor, Workspace, VisualNode, Link, Sprite, Puppet, KeyNode, MicNode, MouseNode, TimerNode, GraphicNode, MicRep, KeyRep, TimerRep, PuppetRep, GraphicRep, MouseRep, LinkRep, NumericShim, ShimRep, nodes, links, hotNode, workspace, puppet, constructTestScene, deserialiseScene, walk, scene, NodeProvider, draw, dragger;
ref$ = require('std'), id = ref$.id, log = ref$.log, raf = ref$.raf, mash = ref$.mash, randomFrom = ref$.randomFrom, v2 = ref$.v2;
require('global');
require('config');
DragMonitor = require('./drag-monitor').DragMonitor;
Workspace = require('./workspace').Workspace;
VisualNode = require('./visual-node').VisualNode;
Link = require('./link').Link;
Sprite = require('./sprite').Sprite;
Puppet = require('./puppet').Puppet;
KeyNode = require('./nodes/key').KeyNode;
MicNode = require('./nodes/mic').MicNode;
MouseNode = require('./nodes/mouse').MouseNode;
TimerNode = require('./nodes/timer').TimerNode;
GraphicNode = require('./nodes/graphic').GraphicNode;
MicRep = require('./representations/mic').MicRep;
KeyRep = require('./representations/key').KeyRep;
TimerRep = require('./representations/timer').TimerRep;
PuppetRep = require('./representations/puppet').PuppetRep;
GraphicRep = require('./representations/graphic').GraphicRep;
MouseRep = require('./representations/mouse').MouseRep;
LinkRep = require('./representations/link').LinkRep;
ref$ = require('./shim'), NumericShim = ref$.NumericShim, ShimRep = ref$.ShimRep;
GlobalServices.init();
nodes = [];
links = [];
hotNode = null;
workspace = new Workspace;
puppet = null;
constructTestScene = function(){
  var z, x, c, v, p, left, mic, micNode, leftNode, zNode, xNode, cNode, vNode, pNode, puppetNode, animNodes, i, name, sprite, graphic, node;
  z = new KeyNode(KEY_Z);
  x = new KeyNode(KEY_X);
  c = new KeyNode(KEY_C);
  v = new KeyNode(KEY_V);
  p = new TimerNode({
    time: 10,
    duty: 0.1,
    offset: 7
  });
  left = new MouseNode(MOUSE_LEFT);
  mic = new MicNode;
  puppet = new Puppet;
  nodes.push(micNode = new VisualNode({
    content: mic,
    rep: new MicRep(mic),
    size: 70,
    pos: v2(50, 800)
  }));
  nodes.push(leftNode = new VisualNode({
    content: left,
    rep: new MouseRep(left),
    size: 70,
    pos: v2(50, 100)
  }));
  nodes.push(zNode = new VisualNode({
    content: z,
    rep: new KeyRep(z),
    size: 70,
    pos: v2(50, 195)
  }));
  nodes.push(xNode = new VisualNode({
    content: x,
    rep: new KeyRep(x),
    size: 70,
    pos: v2(50, 275)
  }));
  nodes.push(cNode = new VisualNode({
    content: c,
    rep: new KeyRep(c),
    size: 70,
    pos: v2(50, 355)
  }));
  nodes.push(vNode = new VisualNode({
    content: v,
    rep: new KeyRep(v),
    size: 70,
    pos: v2(50, 435)
  }));
  nodes.push(pNode = new VisualNode({
    content: p,
    rep: new TimerRep(p),
    size: 100,
    pos: v2(65, 685)
  }));
  nodes.push(puppetNode = new VisualNode({
    content: puppet,
    rep: new PuppetRep(puppet),
    size: 180,
    pos: v2(600, 450)
  }));
  animNodes = mash((function(){
    var i$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = ['look', 'draw', 'drop', 'frustrate', 'choke', 'sing']).length; i$ < len$; ++i$) {
      i = i$;
      name = ref$[i$];
      sprite = new Sprite({
        src: "assets/" + name + "_01.png"
      });
      graphic = new GraphicNode({
        sprite: sprite
      });
      nodes.push(node = new VisualNode({
        content: graphic,
        rep: new GraphicRep(graphic),
        size: 130,
        pos: v2(280, 80 + 140 * i)
      }));
      results$.push([name, node]);
    }
    return results$;
  }()));
  links.push(VisualNode.link(animNodes.look, puppetNode));
  links = links.concat(VisualNode.chain(leftNode, animNodes.draw, puppetNode));
  links = links.concat(VisualNode.chain(zNode, animNodes.drop, puppetNode));
  links = links.concat(VisualNode.chain(xNode, animNodes.frustrate, puppetNode));
  links = links.concat(VisualNode.chain(pNode, animNodes.choke, puppetNode));
  return links = links.concat(VisualNode.chain(micNode, animNodes.sing, puppetNode));
};
deserialiseScene = function(sceneData){};
walk = function(node){
  var i, input;
  return {
    type: node.constructor.displayName,
    state: node.serialiseSelf(),
    incoming: (function(){
      var i$, ref$, len$, results$ = [];
      for (i$ = 0, len$ = (ref$ = node.inputs.all).length; i$ < len$; ++i$) {
        i = i$;
        input = ref$[i$];
        if (input.link) {
          results$.push(walk(input.link.from.owner));
        } else {
          results$.push(null);
        }
      }
      return results$;
    }())
  };
};
constructTestScene();
scene = JSON.stringify(walk(puppet), null, 2);
GlobalServices.SceneLibrary.save('test-scene', scene);
NodeProvider = function(nodeType){
  switch (nodeType) {
  case 'Puppet':
    return [Puppet, PuppetRep];
  case 'KeyNode':
    return [KeyNode, KeyRep];
  case 'GraphicNode':
    return [GraphicNode, GraphicRep];
  case 'MouseNode':
    return [MouseNode, MouseRep];
  case 'TimerNode':
    return [TimerNode, TimerRep];
  case 'MicNode':
    return [MicNode, MicRep];
  default:
    return "NodeProvider - can't get node for type '" + nodeType + "'";
  }
};
GlobalServices.SceneLibrary.load('test-scene', function(data){
  var traverse;
  return;
  traverse = function(nodeData, parent){
    var ref$, NodeClass, RepClass, node, visualNode, i$, len$, i, v;
    log('traverse', nodeData.type);
    ref$ = NodeProvider(nodeData.type), NodeClass = ref$[0], RepClass = ref$[1];
    node = new NodeClass({});
    node.deserialise(nodeData.state);
    nodes.push(visualNode = new VisualNode({
      content: node,
      rep: new RepClass(node),
      pos: v2(0, 0)
    }));
    if (nodeData.type === 'Puppet') {
      puppet = node;
    }
    for (i$ = 0, len$ = (ref$ = nodeData.incoming).length; i$ < len$; ++i$) {
      i = i$;
      v = ref$[i$];
      if (v != null) {
        traverse(v);
      }
    }
    if (parent != null) {}
  };
  return traverse(data);
});
draw = function(){
  workspace.clear();
  links.map(function(it){
    return it.draw(workspace);
  });
  return nodes.map(function(it){
    return it.draw(workspace);
  });
};
global.GlobalServices.Poke.onPoke(function(){
  puppet.pull();
  return draw();
});
dragger = new DragMonitor;
dragger.onPointerRelease(draw);
dragger.onPointerDrag(function(Δx, Δy){
  if (hotNode != null) {
    hotNode.moveBy(v2(Δx, Δy));
  }
  return draw();
});
document.addEventListener('mousemove', function(arg$){
  var pageX, pageY, hotFound, i$, ref$, len$, node;
  pageX = arg$.pageX, pageY = arg$.pageY;
  if ((hotNode != null ? hotNode.state.mode : void 8) === INTERACTION_MODE_ACTIVE) {
    return;
  }
  hotFound = false;
  for (i$ = 0, len$ = (ref$ = nodes).length; i$ < len$; ++i$) {
    node = ref$[i$];
    if (node.boundsContains(v2(pageX, pageY))) {
      node.setMode(INTERACTION_MODE_HOT);
      hotFound = true;
      hotNode = node;
    } else {
      node.setMode(INTERACTION_MODE_IDLE);
    }
  }
  if (!hotFound) {
    hotNode = null;
  }
  return draw();
});
document.addEventListener('mousedown', function(){
  if (hotNode != null) {
    hotNode.setMode(INTERACTION_MODE_ACTIVE);
  }
  return draw();
});
document.addEventListener('mouseup', function(){
  if (hotNode != null) {
    hotNode.setMode(INTERACTION_MODE_HOT);
  }
  return draw();
});
workspace.install(document.body);
draw();



}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./drag-monitor":3,"./link":13,"./nodes/graphic":15,"./nodes/key":16,"./nodes/mic":17,"./nodes/mouse":18,"./nodes/timer":19,"./puppet":22,"./representations/graphic":25,"./representations/key":26,"./representations/link":27,"./representations/mic":28,"./representations/mouse":29,"./representations/puppet":31,"./representations/timer":32,"./shim":33,"./sprite":34,"./visual-node":36,"./workspace":37,"config":1,"global":7,"std":35}],13:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, abs, hyp, randomFrom, determineStatus, Link, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, abs = ref$.abs, hyp = ref$.hyp, randomFrom = ref$.randomFrom;
determineStatus = function(a, b){
  if (a.type !== b.type) {
    console.warn("Link::new - can't join ports of disparate types! - FROM:", a.type, "| TO:", b.type);
    return LINK_STATUS_MISMATCH;
  } else {
    return LINK_STATUS_OK;
  }
};
out$.Link = Link = (function(){
  Link.displayName = 'Link';
  var prototype = Link.prototype, constructor = Link;
  function Link(from, to){
    this.from = from;
    this.to = to;
    this.from.assignLink(this);
    this.to.assignLink(this);
    this.status = determineStatus(this.from, this.to);
    this.signalStrength = 0;
  }
  prototype.pushTo = function(){
    if (this.status === LINK_STATUS_OK) {
      return this.to.push();
    } else {
      return null;
    }
  };
  prototype.pullFrom = function(){
    if (this.status === LINK_STATUS_OK) {
      return this.from.pull();
    } else {
      return null;
    }
  };
  prototype.inferSignalStrength = function(){
    return this.signalStrength = (function(){
      switch (this.from.type) {
      case SIGNAL_TYPE_POKE:
        if (this.from.pull()) {
          return 1;
        } else {
          return 0;
        }
        break;
      case SIGNAL_TYPE_GRAPHIC:
        if (this.from.pull()) {
          return 1;
        } else {
          return 0;
        }
        break;
      case SIGNAL_TYPE_NUMBER:
        return this.from.pull();
      default:
        return 1;
      }
    }.call(this));
  };
  return Link;
}());



},{"std":35}],14:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, InputSet, OutputSet, Node, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
ref$ = require('../port-set'), InputSet = ref$.InputSet, OutputSet = ref$.OutputSet;
out$.Node = Node = (function(){
  Node.displayName = 'Node';
  var prototype = Node.prototype, constructor = Node;
  function Node(){
    this.state = false;
    this.callback = id;
    this.inputs = [];
    this.outputs = [];
  }
  prototype.set = function(state){
    this.state = state;
    return this.callback(state);
  };
  prototype.onStateChange = function(λ){
    return this.callback = λ;
  };
  prototype.generatePorts = function(arg$){
    var inputSpec, ref$, outputSpec;
    inputSpec = (ref$ = arg$.inputSpec) != null
      ? ref$
      : [], outputSpec = (ref$ = arg$.outputSpec) != null
      ? ref$
      : [];
    this.inputs = new InputSet({
      spec: inputSpec,
      owner: this
    });
    return this.outputs = new OutputSet({
      spec: outputSpec,
      owner: this
    });
  };
  prototype.serialiseSelf = function(){
    return {};
  };
  prototype.deserialise = function(data){};
  return Node;
}());



},{"../port-set":20,"std":35}],15:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Node, GraphicNode, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
Node = require('./base').Node;
out$.GraphicNode = GraphicNode = (function(superclass){
  var inputSpec, outputSpec, prototype = extend$((import$(GraphicNode, superclass).displayName = 'GraphicNode', GraphicNode), superclass).prototype, constructor = GraphicNode;
  inputSpec = [{
    type: SIGNAL_TYPE_POKE,
    onPush: function(){
      return this.set(true);
    }
  }];
  outputSpec = [{
    type: SIGNAL_TYPE_GRAPHIC,
    onPull: function(){
      return this.onPull();
    }
  }];
  function GraphicNode(arg$){
    this.sprite = arg$.sprite;
    GraphicNode.superclass.apply(this, arguments);
    this.generatePorts({
      inputSpec: inputSpec,
      outputSpec: outputSpec
    });
    this.set(true);
  }
  prototype.onPull = function(){
    if (this.inputs.get(0).link != null) {
      this.set(this.inputs.get(0).pull());
    }
    if (this.state) {
      return this.sprite;
    } else {
      return null;
    }
  };
  return GraphicNode;
}(Node));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./base":14,"std":35}],16:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Node, Output, KeyNode, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
Node = require('./base').Node;
Output = require('../port').Output;
out$.KeyNode = KeyNode = (function(superclass){
  var outputSpec, prototype = extend$((import$(KeyNode, superclass).displayName = 'KeyNode', KeyNode), superclass).prototype, constructor = KeyNode;
  outputSpec = [{
    type: SIGNAL_TYPE_POKE,
    onPull: function(){
      return this.state;
    }
  }];
  function KeyNode(keycode){
    var this$ = this;
    this.keycode = keycode;
    KeyNode.superclass.apply(this, arguments);
    this.generatePorts({
      outputSpec: outputSpec
    });
    GlobalServices.EventSource.on('keydown', function(it){
      if (this$.keycode === it) {
        return this$.set(true);
      }
    });
    GlobalServices.EventSource.on('keyup', function(it){
      if (this$.keycode === it) {
        return this$.set(false);
      }
    });
  }
  prototype.set = function(){
    GlobalServices.Poke.poke();
    return superclass.prototype.set.apply(this, arguments);
  };
  return KeyNode;
}(Node));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"../port":21,"./base":14,"std":35}],17:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, raf, keys, getMicrophone, Node, MicNode, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, raf = ref$.raf, keys = ref$.keys, getMicrophone = ref$.getMicrophone;
Node = require('./base').Node;
out$.MicNode = MicNode = (function(superclass){
  var SMOOTHING, outputSpec, prototype = extend$((import$(MicNode, superclass).displayName = 'MicNode', MicNode), superclass).prototype, constructor = MicNode;
  SMOOTHING = 2;
  outputSpec = [
    {
      type: SIGNAL_TYPE_POKE,
      onPull: function(){
        return this.state;
      }
    }, {
      type: SIGNAL_TYPE_NUMBER,
      onPull: function(){
        return this.value;
      }
    }
  ];
  function MicNode(){
    MicNode.superclass.apply(this, arguments);
    this.running = false;
    this.audio = new AudioContext;
    this.hist = [];
    this.avg = 0;
    this.threshold = 1.1;
    this.generatePorts({
      outputSpec: outputSpec
    });
    this.analyser = this.audio.createAnalyser();
    this.analyser.fftSize = 2048;
    this.bufferLength = this.analyser.frequencyBinCount;
    this.dataArray = new Uint8Array(this.bufferLength);
  }
  prototype.start = function(){
    var this$ = this;
    return getMicrophone(function(micStream){
      this$.mic = this$.audio.createMediaStreamSource(micStream);
      this$.mic.connect(this$.analyser);
      this$.running = true;
      return this$.monitor();
    });
  };
  prototype.monitor = function(){
    var avg, max, i$, to$, i, sample, ref$, len$, p;
    if (this.running) {
      raf(bind$(this, 'monitor'));
    }
    this.analyser.getByteTimeDomainData(this.dataArray);
    avg = 0;
    max = 0;
    for (i$ = 0, to$ = this.bufferLength; i$ <= to$; ++i$) {
      i = i$;
      sample = this.dataArray[i];
      if (sample > max) {
        max = sample;
      }
    }
    this.hist.push(max / 128);
    if (this.hist.length >= SMOOTHING) {
      this.hist.shift();
    }
    for (i$ = 0, len$ = (ref$ = this.hist).length; i$ < len$; ++i$) {
      p = ref$[i$];
      avg += p;
    }
    avg /= SMOOTHING;
    this.set(avg > this.threshold);
    this.avg = avg;
    this.value = this.avg / this.threshold;
    return GlobalServices.Poke.poke();
  };
  return MicNode;
}(Node));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}



},{"./base":14,"std":35}],18:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Node, MouseNode, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
Node = require('./base').Node;
out$.MouseNode = MouseNode = (function(superclass){
  var outputSpec, prototype = extend$((import$(MouseNode, superclass).displayName = 'MouseNode', MouseNode), superclass).prototype, constructor = MouseNode;
  outputSpec = [{
    type: SIGNAL_TYPE_POKE,
    onPull: function(){
      return this.state;
    }
  }];
  function MouseNode(buttonIndex){
    var this$ = this;
    this.buttonIndex = buttonIndex;
    MouseNode.superclass.apply(this, arguments);
    this.generatePorts({
      outputSpec: outputSpec
    });
    GlobalServices.EventSource.on('mousedown', function(button){
      if (this$.buttonIndex === button) {
        this$.set(true);
      }
      return GlobalServices.Poke.poke();
    });
    GlobalServices.EventSource.on('mouseup', function(button){
      if (this$.buttonIndex === button) {
        this$.set(false);
      }
      return GlobalServices.Poke.poke();
    });
    if (this.buttonIndex === MOUSE_RIGHT) {
      document.addEventListener('contextmenu', function(it){
        return it.preventDefault();
      });
    }
  }
  return MouseNode;
}(Node));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./base":14,"std":35}],19:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, delay, Node, TimerNode, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, delay = ref$.delay;
Node = require('./base').Node;
out$.TimerNode = TimerNode = (function(superclass){
  var outputSpec, prototype = extend$((import$(TimerNode, superclass).displayName = 'TimerNode', TimerNode), superclass).prototype, constructor = TimerNode;
  outputSpec = [{
    type: SIGNAL_TYPE_POKE,
    onPull: function(){
      return this.state;
    }
  }];
  function TimerNode(arg$){
    var ref$;
    this.time = arg$.time, this.duty = (ref$ = arg$.duty) != null ? ref$ : 0.5, this.offset = (ref$ = arg$.offset) != null ? ref$ : 0;
    this.tick = bind$(this, 'tick', prototype);
    TimerNode.superclass.apply(this, arguments);
    this.generatePorts({
      outputSpec: outputSpec
    });
    this.state = false;
    this.active = false;
    this.start();
  }
  prototype.tick = function(){
    this.set(true);
    return delay(this.time * 1000 * this.duty, bind$(this, 'setOff'), this.active ? delay(this.time * 1000, this.tick) : void 8);
  };
  prototype.set = function(){
    GlobalServices.Poke.poke();
    return superclass.prototype.set.apply(this, arguments);
  };
  prototype.setOff = function(){
    return this.set(false);
  };
  prototype.start = function(){
    var this$ = this;
    this.active = true;
    return delay((this.time - this.offset) * 1000, function(){
      return bind$(this$, 'tick')();
    });
  };
  prototype.stop = function(){
    this.active = false;
    return this.set(false);
  };
  prototype.serialiseSelf = function(){
    return {
      time: this.time,
      duty: this.duty,
      offset: this.offset
    };
  };
  return TimerNode;
}(Node));
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./base":14,"std":35}],20:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, v2, Input, Output, PortSet, InputSet, OutputSet, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, v2 = ref$.v2;
ref$ = require('./port'), Input = ref$.Input, Output = ref$.Output;
PortSet = (function(){
  PortSet.displayName = 'PortSet';
  var prototype = PortSet.prototype, constructor = PortSet;
  function PortSet(arg$){
    var spec;
    spec = arg$.spec, this.owner = arg$.owner;
    this.ports = this.generatePorts(spec);
    this.map = bind$(this.ports, 'map');
  }
  prototype.get = function(ix){
    return this.ports[ix];
  };
  Object.defineProperty(prototype, 'all', {
    get: function(){
      return this.ports;
    },
    configurable: true,
    enumerable: true
  });
  Object.defineProperty(prototype, 'next', {
    get: function(){
      var i$, ref$, len$, port;
      for (i$ = 0, len$ = (ref$ = this.ports).length; i$ < len$; ++i$) {
        port = ref$[i$];
        if (port.link == null) {
          return port;
        }
      }
    },
    configurable: true,
    enumerable: true
  });
  Object.defineProperty(prototype, 'length', {
    get: function(){
      return this.ports.length;
    },
    configurable: true,
    enumerable: true
  });
  return PortSet;
}());
out$.InputSet = InputSet = (function(superclass){
  var prototype = extend$((import$(InputSet, superclass).displayName = 'InputSet', InputSet), superclass).prototype, constructor = InputSet;
  prototype.generatePorts = function(spec){
    var i$, len$, ix, ref$, type, onPush, ref1$, results$ = [];
    for (i$ = 0, len$ = spec.length; i$ < len$; ++i$) {
      ix = i$;
      ref$ = spec[i$], type = ref$.type, onPush = (ref1$ = ref$.onPush) != null ? ref1$ : id;
      results$.push(new Input({
        type: type,
        owner: this.owner,
        index: ix,
        onPush: onPush.bind(this.owner)
      }));
    }
    return results$;
  };
  function InputSet(){
    InputSet.superclass.apply(this, arguments);
  }
  return InputSet;
}(PortSet));
out$.OutputSet = OutputSet = (function(superclass){
  var prototype = extend$((import$(OutputSet, superclass).displayName = 'OutputSet', OutputSet), superclass).prototype, constructor = OutputSet;
  prototype.generatePorts = function(spec){
    var i$, len$, ix, ref$, type, onPull, ref1$, results$ = [];
    for (i$ = 0, len$ = spec.length; i$ < len$; ++i$) {
      ix = i$;
      ref$ = spec[i$], type = ref$.type, onPull = (ref1$ = ref$.onPull) != null ? ref1$ : id;
      results$.push(new Output({
        type: type,
        owner: this.owner,
        index: ix,
        onPull: onPull.bind(this.owner)
      }));
    }
    return results$;
  };
  function OutputSet(){
    OutputSet.superclass.apply(this, arguments);
  }
  return OutputSet;
}(PortSet));
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./port":21,"std":35}],21:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, v2, Port, Input, Output, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, v2 = ref$.v2;
Port = (function(){
  Port.displayName = 'Port';
  var prototype = Port.prototype, constructor = Port;
  function Port(arg$){
    this.type = arg$.type, this.owner = arg$.owner, this.index = arg$.index;
  }
  prototype.assignLink = function(link){
    this.link = link;
  };
  prototype.push = function(){
    var ref$;
    return (ref$ = this.link) != null ? ref$.pushTo() : void 8;
  };
  prototype.pull = function(){
    var ref$;
    return (ref$ = this.link) != null ? ref$.pullFrom() : void 8;
  };
  return Port;
}());
out$.Input = Input = (function(superclass){
  var prototype = extend$((import$(Input, superclass).displayName = 'Input', Input), superclass).prototype, constructor = Input;
  function Input(arg$){
    var onPush;
    onPush = arg$.onPush;
    Input.superclass.apply(this, arguments);
    this.push = onPush;
  }
  return Input;
}(Port));
out$.Output = Output = (function(superclass){
  var prototype = extend$((import$(Output, superclass).displayName = 'Output', Output), superclass).prototype, constructor = Output;
  function Output(arg$){
    var onPull;
    onPull = arg$.onPull;
    Output.superclass.apply(this, arguments);
    this.pull = onPull;
  }
  return Output;
}(Port));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"std":35}],22:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, mash, Sprite, Input, Node, Puppet, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, mash = ref$.mash;
Sprite = require('./sprite').Sprite;
Input = require('./port').Input;
Node = require('./nodes/base').Node;
out$.Puppet = Puppet = (function(superclass){
  var inputSpec, prototype = extend$((import$(Puppet, superclass).displayName = 'Puppet', Puppet), superclass).prototype, constructor = Puppet;
  inputSpec = [
    {
      type: SIGNAL_TYPE_GRAPHIC
    }, {
      type: SIGNAL_TYPE_GRAPHIC
    }, {
      type: SIGNAL_TYPE_GRAPHIC
    }, {
      type: SIGNAL_TYPE_GRAPHIC
    }, {
      type: SIGNAL_TYPE_GRAPHIC
    }, {
      type: SIGNAL_TYPE_GRAPHIC
    }, {
      type: SIGNAL_TYPE_GRAPHIC
    }, {
      type: SIGNAL_TYPE_GRAPHIC
    }
  ];
  function Puppet(){
    this.generatePorts({
      inputSpec: inputSpec
    });
    this.chain = [];
  }
  prototype.pull = function(){
    return this.chain = this.inputs.map(function(it){
      return it.pull();
    }).filter(id);
  };
  prototype.getSize = function(){
    var max, i$, ref$, len$, sprite;
    max = 0;
    for (i$ = 0, len$ = (ref$ = this.chain).length; i$ < len$; ++i$) {
      sprite = ref$[i$];
      if (sprite.width > max) {
        max = sprite.width;
      }
      if (sprite.height > max) {
        max = sprite.width;
      }
    }
    return max;
  };
  prototype.getWinner = function(){
    var ref$;
    return (ref$ = this.chain)[ref$.length - 1];
  };
  return Puppet;
}(Node));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./nodes/base":14,"./port":21,"./sprite":34,"std":35}],23:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var RectXYWH, RectXYS, out$ = typeof exports != 'undefined' && exports || this;
out$.RectXYWH = RectXYWH = (function(){
  RectXYWH.displayName = 'RectXYWH';
  var prototype = RectXYWH.prototype, constructor = RectXYWH;
  function RectXYWH(arg$, arg1$){
    this.x = arg$.x, this.y = arg$.y;
    this.w = arg1$.w, this.h = arg1$.h;
    this.update();
  }
  prototype.update = function(){
    this.left = this.x - this.w / 2;
    this.right = this.x + this.w / 2;
    this.top = this.y - this.h / 2;
    return this.bottom = this.y + this.h / 2;
  };
  prototype.contains = function(arg$){
    var x, y;
    x = arg$.x, y = arg$.y;
    return (this.left < x && x < this.right) && (this.top < y && y < this.bottom);
  };
  return RectXYWH;
}());
out$.RectXYS = RectXYS = (function(superclass){
  var prototype = extend$((import$(RectXYS, superclass).displayName = 'RectXYS', RectXYS), superclass).prototype, constructor = RectXYS;
  function RectXYS(pos, size){
    RectXYS.superclass.call(this, pos, {
      w: size,
      h: size
    });
  }
  prototype.moveTo = function(arg$){
    var x, y;
    x = arg$.x, y = arg$.y;
    this.x = x;
    this.y = y;
    return this.update();
  };
  return RectXYS;
}(RectXYWH));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{}],24:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Representation, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
out$.Representation = Representation = (function(){
  Representation.displayName = 'Representation';
  var bw, prototype = Representation.prototype, constructor = Representation;
  bw = 10;
  function Representation(target){
    this.target = target;
    this.size == null && (this.size = 100);
    this.state = {
      mode: INTERACTION_MODE_IDLE
    };
    this.canvas = document.createElement('canvas');
    this.canvas.width = this.canvas.height = this.size;
    this.ctx = this.canvas.getContext('2d');
  }
  prototype.draw = function(){
    this.drawBacking();
    return this.drawBorder();
  };
  prototype.drawBacking = function(){
    this.ctx.fillStyle = 'white';
    return this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
  };
  prototype.drawBorder = function(){
    this.ctx.fillStyle = this.borderColor();
    this.ctx.fillRect(0, 0, this.size, bw);
    this.ctx.fillRect(0, bw, bw, this.size - bw);
    this.ctx.fillRect(this.size - bw, bw, bw, this.size - bw);
    return this.ctx.fillRect(bw, this.size - bw, this.size - bw * 2, bw);
  };
  prototype.borderColor = function(){
    if (this.target.state) {
      return COLOR_YELLOW;
    } else {
      return this.modeColor(this.state.mode);
    }
  };
  prototype.modeColor = function(mode){
    switch (mode) {
    case INTERACTION_MODE_IDLE:
      return 'darkred';
    case INTERACTION_MODE_HOT:
      return 'orange';
    case INTERACTION_MODE_ACTIVE:
      return 'red';
    }
  };
  prototype.setMode = function(mode){
    return this.state.mode = mode;
  };
  Representation.NullRepresentation = new Representation({
    state: false
  });
  return Representation;
}());



},{"std":35}],25:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, v2, Representation, GraphicRep, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, v2 = ref$.v2;
Representation = require('./base').Representation;
out$.GraphicRep = GraphicRep = (function(superclass){
  var prototype = extend$((import$(GraphicRep, superclass).displayName = 'GraphicRep', GraphicRep), superclass).prototype, constructor = GraphicRep;
  function GraphicRep(){
    this.size = 130;
    GraphicRep.superclass.apply(this, arguments);
  }
  prototype.draw = function(target){
    superclass.prototype.draw.apply(this, arguments);
    this.ctx.globalAlpha = target.state ? 1 : 0.3;
    this.ctx.drawImage(target.sprite.canvas, 10, 10, this.size - 20, (target.sprite.size.y / target.sprite.size.x) * (this.size - 20));
    return this.ctx.globalAlpha = 1;
  };
  return GraphicRep;
}(Representation));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./base":24,"std":35}],26:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Representation, keysymbols, KeyRep, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
Representation = require('./base').Representation;
keysymbols = {
  90: 'Z',
  88: 'X',
  67: 'C',
  86: 'V'
};
out$.KeyRep = KeyRep = (function(superclass){
  var prototype = extend$((import$(KeyRep, superclass).displayName = 'KeyRep', KeyRep), superclass).prototype, constructor = KeyRep;
  function KeyRep(){
    KeyRep.superclass.apply(this, arguments);
    this.symbol = keysymbols[this.target.keycode];
  }
  prototype.draw = function(){
    superclass.prototype.draw.apply(this, arguments);
    this.ctx.fillStyle = 'black';
    this.ctx.font = this.size / 2 + "px monospace";
    this.ctx.textAlign = 'center';
    this.ctx.textBaseline = 'middle';
    return this.ctx.fillText(this.symbol, this.size / 2, this.size / 2, this.size, this.size);
  };
  return KeyRep;
}(Representation));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./base":24,"std":35}],27:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, hyp, abs, v2, i, LinkRep, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, hyp = ref$.hyp, abs = ref$.abs, v2 = ref$.v2;
i = 0;
out$.LinkRep = LinkRep = (function(){
  LinkRep.displayName = 'LinkRep';
  var bendStrength, prototype = LinkRep.prototype, constructor = LinkRep;
  bendStrength = 50;
  function LinkRep(target){
    this.target = target;
    this.i = i++;
  }
  prototype.getStatusColors = function(){
    switch (this.target.status) {
    case LINK_STATUS_OK:
      switch (this.target.to.type) {
      case SIGNAL_TYPE_NUMBER:
        return [COLOR_PURPLE, COLOR_MAGENTA];
      case SIGNAL_TYPE_GRAPHIC:
        return [COLOR_DARK_BLUE, COLOR_BRIGHT_BLUE];
      default:
        return [COLOR_DARK_GREEN, COLOR_BRIGHT_GREEN];
      }
      break;
    default:
      return [COLOR_RED, COLOR_BRIGHT_RED];
    }
  };
  prototype.draw = function(arg$){
    var ctx, fp, tp, ss, d, b, ref$, baseColor, powerColor;
    ctx = arg$.ctx;
    fp = this.target.from.owner.rep.outputs.getPos(this.target.from.index);
    tp = this.target.to.owner.rep.inputs.getPos(this.target.to.index);
    ss = this.target.inferSignalStrength();
    d = hyp(tp, fp);
    d = tp.x - fp.x;
    b = d <= bendStrength ? bendStrength * Math.pow(abs(d) / bendStrength, 1.4) : bendStrength;
    ref$ = this.getStatusColors(), baseColor = ref$[0], powerColor = ref$[1];
    ctx.lineWidth = 5;
    ctx.strokeStyle = baseColor;
    ctx.beginPath();
    ctx.moveTo(fp.x, fp.y);
    ctx.bezierCurveTo(fp.x + b, fp.y, tp.x - b, tp.y, tp.x, tp.y);
    ctx.stroke();
    ctx.globalAlpha = ss;
    ctx.strokeStyle = powerColor;
    ctx.beginPath();
    ctx.moveTo(fp.x, fp.y);
    ctx.bezierCurveTo(fp.x + b, fp.y, tp.x - b, tp.y, tp.x, tp.y);
    ctx.stroke();
    return ctx.globalAlpha = 1;
  };
  return LinkRep;
}());



},{"std":35}],28:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Representation, MicRep, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
Representation = require('./base').Representation;
out$.MicRep = MicRep = (function(superclass){
  var size, prototype = extend$((import$(MicRep, superclass).displayName = 'MicRep', MicRep), superclass).prototype, constructor = MicRep;
  size = 70;
  function MicRep(){
    MicRep.superclass.apply(this, arguments);
    this.ctx.fillStyle = 'grey';
    this.ctx.fillRect(0, 0, this.size, this.size);
    this.ctx.fillStyle = 'lightgrey';
    this.ctx.fillRect(0, 0, this.size, this.size);
    this.ctx.fillStyle = 'darkgrey';
    this.ctx.fillRect(0, this.size / 2, this.size, this.size / 2);
  }
  prototype.draw = function(target){
    var w, v, t;
    w = this.size / 5;
    v = target.value / 2;
    t = target.threshold / 2;
    this.ctx.fillStyle = 'white';
    this.ctx.fillRect(this.size / 2 - w / 2, 0, w, this.size);
    this.ctx.fillStyle = target.state ? 'red' : 'blue';
    this.ctx.fillRect(this.size / 2 - w / 2, this.size - 10 - this.size * v, w, this.size * v);
    this.ctx.globalAlpha = 1;
    return this.drawBorder();
  };
  return MicRep;
}(Representation));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./base":24,"std":35}],29:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Representation, keysymbols, MouseRep, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
Representation = require('./base').Representation;
keysymbols = {
  0: '◀',
  1: '■',
  2: '▶'
};
out$.MouseRep = MouseRep = (function(superclass){
  var prototype = extend$((import$(MouseRep, superclass).displayName = 'MouseRep', MouseRep), superclass).prototype, constructor = MouseRep;
  function MouseRep(){
    MouseRep.superclass.apply(this, arguments);
    this.symbol = keysymbols[this.target.buttonIndex];
  }
  prototype.draw = function(){
    superclass.prototype.draw.apply(this, arguments);
    this.ctx.fillStyle = 'black';
    this.ctx.font = this.size / 2 + "px monospace";
    this.ctx.textAlign = 'center';
    this.ctx.textBaseline = 'middle';
    return this.ctx.fillText(this.symbol, this.size / 2, this.size / 2, this.size, this.size);
  };
  return MouseRep;
}(Representation));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./base":24,"std":35}],30:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, v2, portColor, PortSetRep, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, v2 = ref$.v2;
portColor = function(arg$){
  var type;
  type = arg$.type;
  switch (type) {
  case SIGNAL_TYPE_NUMBER:
    return COLOR_MAGENTA;
  case SIGNAL_TYPE_GRAPHIC:
    return COLOR_BRIGHT_BLUE;
  default:
    return COLOR_BRIGHT_GREEN;
  }
};
out$.PortSetRep = PortSetRep = (function(){
  PortSetRep.displayName = 'PortSetRep';
  var PORT_WIDTH, prototype = PortSetRep.prototype, constructor = PortSetRep;
  PORT_WIDTH = 20;
  function PortSetRep(target, arg$){
    var ref$, res$, i$, len$, i;
    this.target = target;
    this.offset = (ref$ = arg$.offset) != null ? ref$ : 0, this.height = (ref$ = arg$.height) != null ? ref$ : 100, this.basis = (ref$ = arg$.basis) != null
      ? ref$
      : v2(0, 0);
    res$ = [];
    for (i$ = 0, len$ = (ref$ = this.target.ports).length; i$ < len$; ++i$) {
      i = ref$[i$];
      res$.push(v2(0, 0));
    }
    this.portPositions = res$;
    this.length = this.portPositions.length;
    this.moveTo(this.basis);
  }
  prototype.getPos = function(ix){
    return this.portPositions[ix];
  };
  prototype.getPortVerticalPos = function(i){
    var space, start, yPos;
    space = (this.height - 20 * this.length) / (this.length === 1
      ? 1
      : this.length - 1);
    start = PORT_WIDTH / 2 - this.height / 2;
    return yPos = start + i * (PORT_WIDTH + space);
  };
  prototype.moveTo = function(arg$){
    var x, y, i$, ref$, len$, i, pos, results$ = [];
    x = arg$.x, y = arg$.y;
    this.basis.x = x + this.offset;
    this.basis.y = y;
    for (i$ = 0, len$ = (ref$ = this.portPositions).length; i$ < len$; ++i$) {
      i = i$;
      pos = ref$[i$];
      pos.x = this.basis.x;
      results$.push(pos.y = this.basis.y + this.getPortVerticalPos(i));
    }
    return results$;
  };
  prototype.draw = function(arg$){
    var ctx, i$, ref$, len$, i, port, results$ = [];
    ctx = arg$.ctx;
    for (i$ = 0, len$ = (ref$ = this.target.ports).length; i$ < len$; ++i$) {
      i = i$;
      port = ref$[i$];
      ctx.fillStyle = portColor(port);
      results$.push(ctx.fillRect(this.portPositions[i].x, this.portPositions[i].y - 10, 8, 20));
    }
    return results$;
  };
  return PortSetRep;
}());



},{"std":35}],31:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, v2, Representation, PuppetRep, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, v2 = ref$.v2;
Representation = require('./base').Representation;
out$.PuppetRep = PuppetRep = (function(superclass){
  var offset, prototype = extend$((import$(PuppetRep, superclass).displayName = 'PuppetRep', PuppetRep), superclass).prototype, constructor = PuppetRep;
  offset = v2(10, 10);
  function PuppetRep(){
    PuppetRep.superclass.apply(this, arguments);
  }
  prototype.draw = function(arg$){
    var ctx, sprite;
    ctx = arg$.ctx;
    this.size = this.target.getSize();
    this.canvas.width = this.canvas.height = this.size;
    this.drawBorder();
    if (sprite = this.target.getWinner()) {
      return sprite.blitTo(this.ctx, offset.x, offset.y + this.size - 20 - sprite.height);
    }
  };
  return PuppetRep;
}(Representation));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./base":24,"std":35}],32:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var Representation, TimerRep, out$ = typeof exports != 'undefined' && exports || this;
Representation = require('./base').Representation;
out$.TimerRep = TimerRep = (function(superclass){
  var prototype = extend$((import$(TimerRep, superclass).displayName = 'TimerRep', TimerRep), superclass).prototype, constructor = TimerRep;
  function TimerRep(){
    TimerRep.superclass.apply(this, arguments);
  }
  prototype.draw = function(){
    superclass.prototype.draw.apply(this, arguments);
    this.ctx.fillStyle = 'black';
    this.ctx.font = this.size / 4 + "px monospace";
    this.ctx.textAlign = 'center';
    this.ctx.textBaseline = 'middle';
    this.ctx.beginPath();
    this.ctx.moveTo(0, this.size / 2 + 0.5);
    this.ctx.lineTo(this.size, this.size / 2 + 0.5);
    this.ctx.stroke();
    this.ctx.fillText(this.target.time, this.size / 2, this.size / 2 - this.size / 5, this.size, this.size);
    return this.ctx.fillText(this.target.duty, this.size / 2, this.size / 2 + this.size / 5, this.size, this.size);
  };
  return TimerRep;
}(Representation));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./base":24}],33:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Node, Representation, PokeShim, NumericShim, GraphicShim, ShimRep, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
Node = require('./nodes/base').Node;
Representation = require('./representations/base').Representation;
out$.PokeShim = PokeShim = (function(superclass){
  var inputSpec, prototype = extend$((import$(PokeShim, superclass).displayName = 'PokeShim', PokeShim), superclass).prototype, constructor = PokeShim;
  inputSpec = [{
    type: SIGNAL_TYPE_POKE,
    onPush: id
  }];
  function PokeShim(){
    PokeShim.superclass.apply(this, arguments);
    this.generatePorts({
      inputSpec: inputSpec
    });
  }
  return PokeShim;
}(Node));
out$.NumericShim = NumericShim = (function(superclass){
  var inputSpec, prototype = extend$((import$(NumericShim, superclass).displayName = 'NumericShim', NumericShim), superclass).prototype, constructor = NumericShim;
  inputSpec = [{
    type: SIGNAL_TYPE_NUMBER,
    onPush: id
  }];
  function NumericShim(){
    NumericShim.superclass.apply(this, arguments);
    this.generatePorts({
      inputSpec: inputSpec
    });
  }
  return NumericShim;
}(Node));
out$.GraphicShim = GraphicShim = (function(superclass){
  var inputSpec, prototype = extend$((import$(GraphicShim, superclass).displayName = 'GraphicShim', GraphicShim), superclass).prototype, constructor = GraphicShim;
  inputSpec = [{
    type: SIGNAL_TYPE_GRAPHIC,
    onPush: id
  }];
  function GraphicShim(){
    GraphicShim.superclass.apply(this, arguments);
    this.generatePorts({
      inputSpec: inputSpec
    });
  }
  return GraphicShim;
}(Node));
out$.ShimRep = ShimRep = (function(superclass){
  var prototype = extend$((import$(ShimRep, superclass).displayName = 'ShimRep', ShimRep), superclass).prototype, constructor = ShimRep;
  function ShimRep(){
    ShimRep.superclass.apply(this, arguments);
  }
  return ShimRep;
}(Representation));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./nodes/base":14,"./representations/base":24,"std":35}],34:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, v2, Blitter, Sprite, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, v2 = ref$.v2;
Blitter = require('./blitter').Blitter;
out$.Sprite = Sprite = (function(superclass){
  var prototype = extend$((import$(Sprite, superclass).displayName = 'Sprite', Sprite), superclass).prototype, constructor = Sprite;
  function Sprite(arg$){
    var src, this$ = this;
    src = arg$.src;
    Sprite.superclass.apply(this, arguments);
    this.img = new Image;
    this.size = v2(0, 0);
    this.img.onload = function(){
      this$.width = this$.canvas.width = this$.img.width;
      this$.height = this$.canvas.height = this$.img.height;
      this$.size = v2(this$.width, this$.height);
      this$.ctx.drawImage(this$.img, 0, 0);
      return GlobalServices.Poke.poke();
    };
    this.img.src = src;
    this.active = false;
  }
  return Sprite;
}(Blitter));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./blitter":2,"std":35}],35:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var id, log, flip, delay, defer, v2, floor, rand, randomFrom, sqrt, hyp, raf, mash, logError, getMicrophone, keys, loadImage, abs, invoke, out$ = typeof exports != 'undefined' && exports || this;
out$.id = id = function(it){
  return it;
};
out$.log = log = function(){
  console.log.apply(console, arguments);
  return arguments[0];
};
out$.flip = flip = function(λ){
  return curry$(function(a, b){
    return λ(b, a);
  });
};
out$.delay = delay = flip(setTimeout);
out$.defer = defer = delay(0);
out$.v2 = v2 = function(x, y){
  if (y != null) {
    return {
      x: x,
      y: y
    };
  } else {
    return {
      x: x.x,
      y: x.y
    };
  }
};
out$.floor = floor = Math.floor;
out$.rand = rand = (function(it){
  return it * Math.random();
});
out$.randomFrom = randomFrom = function(xs){
  return xs[floor(rand(xs.length))];
};
out$.sqrt = sqrt = Math.sqrt;
out$.hyp = hyp = function(a, b){
  var Δx, Δy;
  Δx = b.x - a.x;
  Δy = b.y - a.y;
  return sqrt(Δx * Δx + Δy * Δy);
};
out$.raf = raf = requestAnimationFrame;
out$.mash = mash = function(xs){
  var i$, len$, ref$, k, v, resultObj$ = {};
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    ref$ = xs[i$], k = ref$[0], v = ref$[1];
    resultObj$[k] = v;
  }
  return resultObj$;
};
out$.logError = logError = function(){
  return log(this, arguments);
};
out$.getMicrophone = getMicrophone = function(λ){
  return navigator.webkitGetUserMedia({
    audio: true
  }, λ, logError);
};
out$.keys = keys = function(it){
  var k, v, results$ = [];
  for (k in it) {
    v = it[k];
    results$.push(k);
  }
  return results$;
};
out$.loadImage = loadImage = function(src, λ){
  var image;
  λ == null && (λ = id);
  image = new Image;
  image.src = src;
  image.onload = λ;
  return image;
};
out$.abs = abs = Math.abs;
out$.invoke = invoke = function(it){
  return typeof it == 'function' ? it() : void 8;
};
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}



},{}],36:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, v2, Representation, RectXYS, Link, PortSetRep, LinkRep, VisualNode, out$ = typeof exports != 'undefined' && exports || this, slice$ = [].slice;
ref$ = require('std'), id = ref$.id, log = ref$.log, v2 = ref$.v2;
Representation = require('./representations/base').Representation;
RectXYS = require('./rect').RectXYS;
Link = require('./link').Link;
PortSetRep = require('./representations/port-set').PortSetRep;
LinkRep = require('./representations/link').LinkRep;
out$.VisualNode = VisualNode = (function(){
  VisualNode.displayName = 'VisualNode';
  var prototype = VisualNode.prototype, constructor = VisualNode;
  function VisualNode(arg$){
    var ref$;
    this.content = arg$.content, this.pos = arg$.pos, this.size = arg$.size, this.rep = (ref$ = arg$.rep) != null
      ? ref$
      : Representation.NullRepresentation;
    this.state = {
      mode: INTERACTION_MODE_IDLE,
      signal: false
    };
    this.bounds = new RectXYS(this.pos, this.size);
    this.inputs = new PortSetRep(this.content.inputs, {
      basis: v2(this.pos),
      height: this.size,
      offset: this.size / -2 - 3
    });
    this.outputs = new PortSetRep(this.content.outputs, {
      basis: v2(this.pos),
      height: this.size,
      offset: this.size / 2 - 6
    });
    this.content.rep = this;
  }
  prototype.pull = function(){
    return this.state.signal = this.content.state;
  };
  prototype.draw = function(arg$){
    var ctx;
    ctx = arg$.ctx;
    this.rep.draw(this.content);
    ctx.drawImage(this.rep.canvas, this.pos.x - this.size / 2, this.pos.y - this.size / 2, this.size, this.size);
    this.inputs.draw({
      ctx: ctx
    });
    return this.outputs.draw({
      ctx: ctx
    });
  };
  prototype.setMode = function(mode){
    this.rep.setMode(mode);
    return this.state.mode = mode;
  };
  prototype.moveTo = function(arg$){
    var x, y;
    x = arg$.x, y = arg$.y;
    this.pos.x = x;
    this.pos.y = y;
    return this.updateChildPos();
  };
  prototype.moveBy = function(arg$){
    var x, y;
    x = arg$.x, y = arg$.y;
    this.pos.x += x;
    this.pos.y += y;
    return this.updateChildPos();
  };
  prototype.updateChildPos = function(){
    log("Moved to:", this.pos.x, this.pos.y);
    this.bounds.moveTo(this.pos);
    this.inputs.moveTo(this.pos);
    return this.outputs.moveTo(this.pos);
  };
  prototype.boundsContains = function(point){
    return this.bounds.contains(point);
  };
  VisualNode.link = function(a, b){
    return new LinkRep(new Link(a.content.outputs.next, b.content.inputs.next));
  };
  VisualNode.chain = function(){
    var nodes, i$, to$, i, a, b, results$ = [];
    nodes = slice$.call(arguments);
    for (i$ = 0, to$ = nodes.length - 2; i$ <= to$; ++i$) {
      i = i$;
      a = nodes[i];
      b = nodes[i + 1];
      results$.push(new LinkRep(new Link(a.content.outputs.next, b.content.inputs.next)));
    }
    return results$;
  };
  return VisualNode;
}());



},{"./link":13,"./rect":23,"./representations/base":24,"./representations/link":27,"./representations/port-set":30,"std":35}],37:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var Blitter, Workspace, out$ = typeof exports != 'undefined' && exports || this;
Blitter = require('./blitter').Blitter;
out$.Workspace = Workspace = (function(superclass){
  var prototype = extend$((import$(Workspace, superclass).displayName = 'Workspace', Workspace), superclass).prototype, constructor = Workspace;
  function Workspace(){
    Workspace.superclass.call(this, {
      size: 950
    });
  }
  prototype.install = function(host){
    return host.appendChild(this.canvas);
  };
  return Workspace;
}(Blitter));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./blitter":2}]},{},[12])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,

(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
// Generated by LiveScript 1.4.0
global.CONFIG_EVENT_SOURCE = EVENT_SOURCE_BROWSER;
global.CONFIG_SOCKET_SERVER_ADDR = 'http://localhost:9000';



}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],2:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Blitter, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
out$.Blitter = Blitter = (function(){
  Blitter.displayName = 'Blitter';
  var idx, prototype = Blitter.prototype, constructor = Blitter;
  idx = function(i){
    i == null && (i = 0);
    return function(){
      return i++;
    };
  }();
  function Blitter(arg$){
    this.size = arg$.size;
    this.canvas = document.createElement('canvas');
    this.canvas.width = this.canvas.height = this.size;
    this.ctx = this.canvas.getContext('2d');
    this.id = idx();
  }
  prototype.clear = function(){
    return this.ctx.clearRect(0, 0, this.size, this.size);
  };
  prototype.blitTo = function(ctx, x, y, w, h){
    if (w != null && h != null) {
      return ctx.drawImage(this.canvas, x, y, w, h);
    } else {
      return ctx.drawImage(this.canvas, x, y);
    }
  };
  return Blitter;
}());



},{"std":37}],3:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, defer, DragMonitor, out$ = typeof exports != 'undefined' && exports || this, slice$ = [].slice;
ref$ = require('std'), id = ref$.id, log = ref$.log, defer = ref$.defer;
out$.DragMonitor = DragMonitor = (function(){
  DragMonitor.displayName = 'DragMonitor';
  var normaliseMouse, normaliseTouch, prototype = DragMonitor.prototype, constructor = DragMonitor;
  normaliseMouse = function(λ){
    return function(arg$){
      var pageX, pageY;
      pageX = arg$.pageX, pageY = arg$.pageY;
      return λ(pageX, pageY);
    };
  };
  normaliseTouch = id;
  function DragMonitor(){
    var this$ = this;
    this.pointerRelease = bind$(this, 'pointerRelease', prototype);
    this.pointerEngage = bind$(this, 'pointerEngage', prototype);
    this.pointerMove = bind$(this, 'pointerMove', prototype);
    this.state = {
      enabled: true,
      dragging: false,
      released: false,
      down: false,
      Δx: 0,
      Δy: 0,
      last: [0, 0]
    };
    this.callbacks = {
      drag: id,
      done: id
    };
    document.addEventListener('keydown', function(arg$){
      var which;
      which = arg$.which;
      if (which === 16) {
        return this$.pointerEngage();
      }
    });
    document.addEventListener('keyup', function(arg$){
      var which;
      which = arg$.which;
      if (which === 16) {
        return this$.pointerRelease();
      }
    });
    document.addEventListener('mousedown', normaliseMouse(this.pointerEngage));
    document.addEventListener('mousemove', normaliseMouse(this.pointerMove));
    document.addEventListener('mouseup', normaliseMouse(this.pointerRelease));
    document.addEventListener('touchstart', normaliseTouch(this.pointerEngage));
    document.addEventListener('touchmove', normaliseTouch(this.pointerMove));
    document.addEventListener('touchend', normaliseTouch(this.pointerRelease));
  }
  prototype.dispatch = function(event){
    var args, ref$;
    args = slice$.call(arguments, 1);
    if (this.state.enabled) {
      return (ref$ = this.callbacks)[event].apply(ref$, args);
    }
  };
  prototype.pointerMove = function(x, y){
    var Δx, Δy;
    if (this.state.down || this.state.dragging) {
      this.state.dragging = true;
      this.state.Δx = Δx = x - this.state.last[0];
      this.state.Δy = Δy = y - this.state.last[1];
      this.state.last = [x, y];
      return this.dispatch('drag', Δx, Δy);
    }
  };
  prototype.pointerEngage = function(x, y){
    this.state.down = true;
    return this.state.last = [x, y];
  };
  prototype.pointerRelease = function(x, y){
    var this$ = this;
    x == null && (x = this.state.last[0]);
    y == null && (y = this.state.last[1]);
    defer(function(){
      return this$.state.dragging = false;
    });
    this.state.released = true;
    this.state.last = [x, y];
    this.state.down = false;
    this.dispatch('drag', 0, 0);
    return this.dispatch('done', this.state);
  };
  prototype.onPointerDrag = function(λ){
    return this.callbacks.drag = λ;
  };
  prototype.onPointerRelease = function(λ){
    return this.callbacks.done = λ;
  };
  prototype.toggleEventListening = function(state){
    return this.state.enabled = state;
  };
  return DragMonitor;
}());
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}



},{"std":37}],4:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var EventSource, BrowserEventSource, out$ = typeof exports != 'undefined' && exports || this;
EventSource = require('./event-source').EventSource;
out$.BrowserEventSource = BrowserEventSource = (function(superclass){
  var prototype = extend$((import$(BrowserEventSource, superclass).displayName = 'BrowserEventSource', BrowserEventSource), superclass).prototype, constructor = BrowserEventSource;
  prototype.listener = function(eventName, processor){
    return document.addEventListener(eventName, compose$(processor, this.dispatch(eventName)));
  };
  function BrowserEventSource(){
    BrowserEventSource.superclass.apply(this, arguments);
  }
  return BrowserEventSource;
}(EventSource));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
function compose$() {
  var functions = arguments;
  return function() {
    var i, result;
    result = functions[0].apply(this, arguments);
    for (i = 1; i < functions.length; ++i) {
      result = functions[i](result);
    }
    return result;
  };
}



},{"./event-source":6}],5:[function(require,module,exports){
(function (global){
// Generated by LiveScript 1.4.0
global.INTERACTION_MODE_IDLE = Symbol('idle');
global.INTERACTION_MODE_HOT = Symbol('hot');
global.INTERACTION_MODE_ACTIVE = Symbol('active');
global.LINK_STATUS_OK = Symbol('ok');
global.LINK_STATUS_MISMATCH = Symbol('type-mismatch');
global.LINK_STATUS_INCOMPLETE = Symbol('incomplete');
global.KEY_Z = 90;
global.KEY_X = 88;
global.KEY_C = 67;
global.KEY_V = 86;
global.MOUSE_LEFT = 0;
global.MOUSE_MIDDLE = 1;
global.MOUSE_RIGHT = 2;
global.COLOR_DARK_GREEN = 'green';
global.COLOR_BRIGHT_GREEN = '#0e3';
global.COLOR_YELLOW = '#ff0';
global.COLOR_RED = '#f23';
global.COLOR_DARK_RED = '#812';
global.COLOR_BRIGHT_RED = '#f89';
global.COLOR_DARK_BLUE = '#118';
global.COLOR_BRIGHT_BLUE = '#48f';
global.COLOR_PURPLE = '#929';
global.COLOR_MAGENTA = '#f3f';
global.SIGNAL_TYPE_POKE = Symbol('poke');
global.SIGNAL_TYPE_NUMBER = Symbol('number');
global.SIGNAL_TYPE_GRAPHIC = Symbol('graphic');
global.SIGNAL_TYPE_TEXT = Symbol('text');
global.EVENT_SOURCE_WEBSOCKETS = Symbol('websockets');
global.EVENT_SOURCE_BROWSER = Symbol('browser');



}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],6:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var EventSource, out$ = typeof exports != 'undefined' && exports || this;
out$.EventSource = EventSource = (function(){
  EventSource.displayName = 'EventSource';
  var prototype = EventSource.prototype, constructor = EventSource;
  function EventSource(){
    this._dispatch = curry$(prototype.dispatch, true);
    this.dispatch = bind$(this, '_dispatch');
    this.callbacks = {
      keydown: [],
      keyup: [],
      mousedown: [],
      mouseup: []
    };
    this.establishListeners();
  }
  prototype.dispatch = function(eventName, value){
    return this.callbacks[eventName].map(function(it){
      return it(value);
    });
  };
  prototype.listener = function(eventName){
    return this.socket.on(eventName, this.dispatch(eventName));
  };
  prototype.on = function(event, λ){
    var that;
    if ((that = this.callbacks[event]) != null) {
      return that.push(λ);
    } else {
      return console.warn("GlobalServices.EventSource.on - not registering unknown event name: '" + event + "'");
    }
  };
  prototype.establishListeners = function(){
    this.listener('keydown', function(it){
      return it.which;
    });
    this.listener('keyup', function(it){
      return it.which;
    });
    this.listener('mousedown', function(it){
      return it.button;
    });
    return this.listener('mouseup', function(it){
      return it.button;
    });
  };
  return EventSource;
}());
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}



},{}],7:[function(require,module,exports){
(function (global){
// Generated by LiveScript 1.4.0
var ref$, id, log, PokeService, SceneLibrary, ServerInterface, BrowserEventSource, WebsocketEventSource;
ref$ = require('std'), id = ref$.id, log = ref$.log;
require('./const');
PokeService = require('./poke').PokeService;
SceneLibrary = require('./scene-library').SceneLibrary;
ServerInterface = require('./server-interface').ServerInterface;
BrowserEventSource = require('./browser-event-source').BrowserEventSource;
WebsocketEventSource = require('./websocket-event-source').WebsocketEventSource;
global.GlobalServices = {
  init: function(){
    GlobalServices.Server = new ServerInterface;
    GlobalServices.Poke = new PokeService;
    GlobalServices.SceneLibrary = new SceneLibrary({
      socket: GlobalServices.Server
    });
    return GlobalServices.EventSource = (function(){
      switch (CONFIG_EVENT_SOURCE) {
      case EVENT_SOURCE_WEBSOCKETS:
        return new WebsocketEventSource;
      case EVENT_SOURCE_BROWSER:
        return new BrowserEventSource;
      }
    }());
  }
};



}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./browser-event-source":4,"./const":5,"./poke":8,"./scene-library":9,"./server-interface":10,"./websocket-event-source":11,"std":37}],8:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, invoke, raf, PokeService, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, invoke = ref$.invoke, raf = ref$.raf;
out$.PokeService = PokeService = (function(){
  PokeService.displayName = 'PokeService';
  var prototype = PokeService.prototype, constructor = PokeService;
  function PokeService(){
    this.callbacks = [];
    this.pokeScheduled = false;
  }
  prototype.onPoke = function(λ){
    return this.callbacks.push(λ);
  };
  prototype.dispatch = function(){
    this.callbacks.map(invoke);
    return this.pokeScheduled = false;
  };
  prototype.poke = function(){
    return this.schedulePoke();
  };
  prototype.schedulePoke = function(){
    if (!this.pokeScheduled) {
      this.pokeScheduled = true;
      return raf(bind$(this, 'dispatch'));
    }
  };
  return PokeService;
}());
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}



},{"std":37}],9:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, SceneLibrary, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
out$.SceneLibrary = SceneLibrary = (function(){
  SceneLibrary.displayName = 'SceneLibrary';
  var prototype = SceneLibrary.prototype, constructor = SceneLibrary;
  function SceneLibrary(arg$){
    var this$ = this;
    this.socket = arg$.socket;
    this.loadCallback = id;
    this.socket.on('save-complete', function(name){
      return console.info("GlobalServices.SceneLibrary::save - Scene '" + name + "' saved.");
    });
    this.socket.on('load-complete', function(name, data){
      console.info("GlobalServices.SceneLibrary::load - Scene '" + name + "' loaded.");
      this$.loadCallback(JSON.parse(data));
      return this$.loadCallback = id;
    });
  }
  prototype.save = function(name, sceneData){
    var compressedScene;
    compressedScene = sceneData.replace(/[\s\n]/g, '');
    console.info('Persisting scene graph:', compressedScene);
    return this.socket.emit('save', name, compressedScene);
  };
  prototype.load = function(name, λ){
    this.socket.emit('load', name);
    return this.loadCallback = λ;
  };
  return SceneLibrary;
}());



},{"std":37}],10:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, ServerInterface, out$ = typeof exports != 'undefined' && exports || this, slice$ = [].slice;
ref$ = require('std'), id = ref$.id, log = ref$.log;
out$.ServerInterface = ServerInterface = (function(){
  ServerInterface.displayName = 'ServerInterface';
  var prototype = ServerInterface.prototype, constructor = ServerInterface;
  function ServerInterface(){
    this.socket = io(CONFIG_SOCKET_SERVER_ADDR);
  }
  prototype.getSocket = function(){
    return this.socket;
  };
  prototype.on = function(){
    var args, ref$;
    args = slice$.call(arguments);
    return (ref$ = this.socket).on.apply(ref$, args);
  };
  prototype.emit = function(){
    var args, ref$;
    args = slice$.call(arguments);
    return (ref$ = this.socket).emit.apply(ref$, args);
  };
  prototype.emitMessage = function(msg){
    var data, ref$;
    data = slice$.call(arguments, 1);
    return (ref$ = this.socket).emit.apply(ref$, [msg].concat(slice$.call(data)));
  };
  return ServerInterface;
}());



},{"std":37}],11:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var EventSource, WebsocketEventSource, out$ = typeof exports != 'undefined' && exports || this;
EventSource = require('./event-source').EventSource;
out$.WebsocketEventSource = WebsocketEventSource = (function(superclass){
  var prototype = extend$((import$(WebsocketEventSource, superclass).displayName = 'WebsocketEventSource', WebsocketEventSource), superclass).prototype, constructor = WebsocketEventSource;
  function WebsocketEventSource(){
    this._dispatch = curry$(prototype.dispatch, true);
    this.dispatch = bind$(this, '_dispatch');
    this.socket = GlobalServices.Server.getSocket();
    WebsocketEventSource.superclass.apply(this, arguments);
    this.socket.on('connect', function(){
      return console.info('connect');
    });
    this.socket.on('disconnect', function(){
      return console.warn('disconnect');
    });
  }
  prototype.dispatch = function(eventName, value){
    return this.callbacks[eventName].map(function(it){
      return it(value);
    });
  };
  return WebsocketEventSource;
}(EventSource));
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./event-source":6}],12:[function(require,module,exports){
(function (global){
// Generated by LiveScript 1.4.0
var ref$, id, log, v2, raf, Link, LinkRep, Scene, Workspace, VisualNode, DragMonitor, NodeProvider, constructTestScene, hotNode, workspace, scene, walk, draw, dragger;
ref$ = require('std'), id = ref$.id, log = ref$.log, v2 = ref$.v2, raf = ref$.raf;
require('global');
require('config');
Link = require('./link').Link;
LinkRep = require('./representations/link').LinkRep;
Scene = require('./scene').Scene;
Workspace = require('./workspace').Workspace;
VisualNode = require('./visual-node').VisualNode;
DragMonitor = require('./drag-monitor').DragMonitor;
NodeProvider = require('./node-provider').NodeProvider;
constructTestScene = require('./test-data').constructTestScene;
GlobalServices.init();
hotNode = null;
workspace = new Workspace;
scene = true
  ? new Scene(constructTestScene())
  : new Scene;
walk = function(node){
  var i, input;
  return {
    type: node.constructor.displayName,
    view: node.rep.serialise(),
    self: node.serialise(),
    incoming: (function(){
      var i$, ref$, len$, results$ = [];
      for (i$ = 0, len$ = (ref$ = node.inputs.all).length; i$ < len$; ++i$) {
        i = i$;
        input = ref$[i$];
        if (input.link) {
          results$.push({
            node: walk(input.link.from.owner),
            outputIndex: input.link.from.index
          });
        } else {
          results$.push(null);
        }
      }
      return results$;
    }())
  };
};
GlobalServices.SceneLibrary.load('test-scene', function(data){
  var output, traverse;
  return;
  output = {
    puppet: null,
    links: [],
    nodes: []
  };
  console.info("Scene:", JSON.stringify(data, null, 2));
  traverse = function(nodeData, parent){
    var ref$, NodeClass, RepClass, node, visualNode, i$, len$, i, v, child;
    ref$ = NodeProvider(nodeData.type), NodeClass = ref$[0], RepClass = ref$[1];
    node = NodeClass.deserialise(nodeData.state);
    output.nodes.push(visualNode = new VisualNode({
      content: node,
      rep: new RepClass(node),
      pos: v2(0, 0)
    }));
    if (nodeData.type === 'Puppet') {
      output.puppet = node;
    }
    for (i$ = 0, len$ = (ref$ = nodeData.incoming).length; i$ < len$; ++i$) {
      i = i$;
      v = ref$[i$];
      if (v != null) {
        child = traverse(v.node);
        output.links.push(new LinkRep(new Link({
          from: child.outputs.get(v.outputIndex),
          to: node.inputs.get(i)
        })));
      }
    }
    return node;
  };
  return traverse(data);
});
draw = function(){
  workspace.clear();
  return scene.drawOnto(workspace);
};
global.GlobalServices.Poke.onPoke(function(){
  scene.pull();
  return draw();
});
workspace.install(document.body);
draw();
dragger = new DragMonitor;
dragger.onPointerRelease(draw);
dragger.onPointerDrag(function(Δx, Δy){
  if (hotNode != null) {
    hotNode.moveBy(v2(Δx, Δy));
  }
  return draw();
});
document.addEventListener('mousemove', function(arg$){
  var pageX, pageY, hotFound, i$, ref$, len$, node;
  pageX = arg$.pageX, pageY = arg$.pageY;
  if ((hotNode != null ? hotNode.state.mode : void 8) === INTERACTION_MODE_ACTIVE) {
    return;
  }
  hotFound = false;
  for (i$ = 0, len$ = (ref$ = scene.nodes).length; i$ < len$; ++i$) {
    node = ref$[i$];
    if (node.boundsContains(v2(pageX, pageY))) {
      node.setMode(INTERACTION_MODE_HOT);
      hotFound = true;
      hotNode = node;
    } else {
      node.setMode(INTERACTION_MODE_IDLE);
    }
  }
  if (!hotFound) {
    hotNode = null;
  }
  return draw();
});
document.addEventListener('mousedown', function(){
  if (hotNode != null) {
    hotNode.setMode(INTERACTION_MODE_ACTIVE);
  }
  return draw();
});
document.addEventListener('mouseup', function(){
  if (hotNode != null) {
    hotNode.setMode(INTERACTION_MODE_HOT);
  }
  return draw();
});



}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./drag-monitor":3,"./link":13,"./node-provider":14,"./representations/link":28,"./scene":34,"./test-data":38,"./visual-node":39,"./workspace":40,"config":1,"global":7,"std":37}],13:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, abs, hyp, randomFrom, determineStatus, Link, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, abs = ref$.abs, hyp = ref$.hyp, randomFrom = ref$.randomFrom;
determineStatus = function(a, b){
  if (!a) {
    console.warn("Link::new - 'from' end is unavailable");
    return LINK_STATUS_INCOMPLETE;
  } else if (!b) {
    console.warn("Link::new - 'to' end is unavailable");
    return LINK_STATUS_INCOMPLETE;
  } else if (a.type !== b.type) {
    console.warn("Link::new - can't join ports of disparate types! - FROM:", a.type, "| TO:", b.type);
    return LINK_STATUS_MISMATCH;
  } else {
    return LINK_STATUS_OK;
  }
};
out$.Link = Link = (function(){
  Link.displayName = 'Link';
  var prototype = Link.prototype, constructor = Link;
  function Link(arg$){
    var ref$, ref1$;
    this.from = arg$.from, this.to = arg$.to;
    if ((ref$ = this.from) != null) {
      ref$.assignLink(this);
    }
    if ((ref1$ = this.to) != null) {
      ref1$.assignLink(this);
    }
    this.status = determineStatus(this.from, this.to);
    this.signalStrength = 0;
  }
  prototype.pushTo = function(){
    if (this.status === LINK_STATUS_OK) {
      return this.to.push();
    } else {
      return null;
    }
  };
  prototype.pullFrom = function(){
    if (this.status === LINK_STATUS_OK) {
      return this.from.pull();
    } else {
      return null;
    }
  };
  prototype.inferSignalStrength = function(){
    return this.signalStrength = (function(){
      switch (this.from.type) {
      case SIGNAL_TYPE_POKE:
        if (this.from.pull()) {
          return 1;
        } else {
          return 0;
        }
        break;
      case SIGNAL_TYPE_GRAPHIC:
        if (this.from.pull()) {
          return 1;
        } else {
          return 0;
        }
        break;
      case SIGNAL_TYPE_NUMBER:
        return this.from.pull();
      default:
        return 1;
      }
    }.call(this));
  };
  return Link;
}());



},{"std":37}],14:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var Puppet, KeyNode, MicNode, MouseNode, TimerNode, GraphicNode, MicRep, KeyRep, TimerRep, PuppetRep, GraphicRep, MouseRep, LinkRep, NodeProvider, out$ = typeof exports != 'undefined' && exports || this;
Puppet = require('./puppet').Puppet;
KeyNode = require('./nodes/key').KeyNode;
MicNode = require('./nodes/mic').MicNode;
MouseNode = require('./nodes/mouse').MouseNode;
TimerNode = require('./nodes/timer').TimerNode;
GraphicNode = require('./nodes/graphic').GraphicNode;
MicRep = require('./representations/mic').MicRep;
KeyRep = require('./representations/key').KeyRep;
TimerRep = require('./representations/timer').TimerRep;
PuppetRep = require('./representations/puppet').PuppetRep;
GraphicRep = require('./representations/graphic').GraphicRep;
MouseRep = require('./representations/mouse').MouseRep;
LinkRep = require('./representations/link').LinkRep;
out$.NodeProvider = NodeProvider = function(nodeType){
  switch (nodeType) {
  case 'Puppet':
    return [Puppet, PuppetRep];
  case 'KeyNode':
    return [KeyNode, KeyRep];
  case 'GraphicNode':
    return [GraphicNode, GraphicRep];
  case 'MouseNode':
    return [MouseNode, MouseRep];
  case 'TimerNode':
    return [TimerNode, TimerRep];
  case 'MicNode':
    return [MicNode, MicRep];
  default:
    return console.warn("NodeProvider - can't get node for type '" + nodeType + "'");
  }
};



},{"./nodes/graphic":16,"./nodes/key":17,"./nodes/mic":18,"./nodes/mouse":19,"./nodes/timer":20,"./puppet":23,"./representations/graphic":26,"./representations/key":27,"./representations/link":28,"./representations/mic":29,"./representations/mouse":30,"./representations/puppet":32,"./representations/timer":33}],15:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, InputSet, OutputSet, Node, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
ref$ = require('../port-set'), InputSet = ref$.InputSet, OutputSet = ref$.OutputSet;
out$.Node = Node = (function(){
  Node.displayName = 'Node';
  var prototype = Node.prototype, constructor = Node;
  function Node(){
    this.state = false;
    this.callback = id;
    this.inputs = [];
    this.outputs = [];
  }
  prototype.set = function(state){
    this.state = state;
    return this.callback(state);
  };
  prototype.onStateChange = function(λ){
    return this.callback = λ;
  };
  prototype.generatePorts = function(arg$){
    var inputSpec, ref$, outputSpec;
    inputSpec = (ref$ = arg$.inputSpec) != null
      ? ref$
      : [], outputSpec = (ref$ = arg$.outputSpec) != null
      ? ref$
      : [];
    this.inputs = new InputSet({
      spec: inputSpec,
      owner: this
    });
    return this.outputs = new OutputSet({
      spec: outputSpec,
      owner: this
    });
  };
  prototype.serialise = function(){
    return console.warn(this.constructor.displayName, 'should implement serialise');
  };
  Node.deserialise = function(config){
    return new this(config);
  };
  return Node;
}());



},{"../port-set":21,"std":37}],16:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Node, Sprite, GraphicNode, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
Node = require('./base').Node;
Sprite = require('../sprite').Sprite;
out$.GraphicNode = GraphicNode = (function(superclass){
  var inputSpec, outputSpec, prototype = extend$((import$(GraphicNode, superclass).displayName = 'GraphicNode', GraphicNode), superclass).prototype, constructor = GraphicNode;
  inputSpec = [{
    type: SIGNAL_TYPE_POKE,
    onPush: function(){
      return this.set(true);
    }
  }];
  outputSpec = [{
    type: SIGNAL_TYPE_GRAPHIC,
    onPull: function(){
      return this.onPull();
    }
  }];
  function GraphicNode(arg$){
    this.sprite = arg$.sprite;
    GraphicNode.superclass.apply(this, arguments);
    this.generatePorts({
      inputSpec: inputSpec,
      outputSpec: outputSpec
    });
    this.set(true);
  }
  prototype.onPull = function(){
    if (this.inputs.get(0).link != null) {
      this.set(this.inputs.get(0).pull());
    }
    if (this.state) {
      return this.sprite;
    } else {
      return null;
    }
  };
  prototype.serialise = function(){
    return {
      sprite: this.sprite.serialise()
    };
  };
  GraphicNode.deserialise = function(config){
    return new GraphicNode({
      sprite: new Sprite(config.sprite)
    });
  };
  return GraphicNode;
}(Node));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"../sprite":36,"./base":15,"std":37}],17:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Node, Output, KeyNode, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
Node = require('./base').Node;
Output = require('../port').Output;
out$.KeyNode = KeyNode = (function(superclass){
  var outputSpec, prototype = extend$((import$(KeyNode, superclass).displayName = 'KeyNode', KeyNode), superclass).prototype, constructor = KeyNode;
  outputSpec = [{
    type: SIGNAL_TYPE_POKE,
    onPull: function(){
      return this.state;
    }
  }];
  function KeyNode(arg$){
    var this$ = this;
    this.keycode = arg$.keycode;
    KeyNode.superclass.apply(this, arguments);
    this.generatePorts({
      outputSpec: outputSpec
    });
    GlobalServices.EventSource.on('keydown', function(it){
      if (this$.keycode === it) {
        return this$.set(true);
      }
    });
    GlobalServices.EventSource.on('keyup', function(it){
      if (this$.keycode === it) {
        return this$.set(false);
      }
    });
  }
  prototype.set = function(){
    GlobalServices.Poke.poke();
    return superclass.prototype.set.apply(this, arguments);
  };
  prototype.serialise = function(){
    return {
      keycode: this.keycode
    };
  };
  return KeyNode;
}(Node));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"../port":22,"./base":15,"std":37}],18:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, raf, keys, getMicrophone, Node, MicNode, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, raf = ref$.raf, keys = ref$.keys, getMicrophone = ref$.getMicrophone;
Node = require('./base').Node;
out$.MicNode = MicNode = (function(superclass){
  var SMOOTHING, outputSpec, prototype = extend$((import$(MicNode, superclass).displayName = 'MicNode', MicNode), superclass).prototype, constructor = MicNode;
  SMOOTHING = 2;
  outputSpec = [
    {
      type: SIGNAL_TYPE_POKE,
      onPull: function(){
        return this.state;
      }
    }, {
      type: SIGNAL_TYPE_NUMBER,
      onPull: function(){
        return this.value;
      }
    }
  ];
  function MicNode(arg$){
    var ref$;
    this.threshold = (ref$ = arg$.threshold) != null ? ref$ : 1.1;
    MicNode.superclass.apply(this, arguments);
    this.running = false;
    this.audio = new AudioContext;
    this.hist = [];
    this.avg = 0;
    this.value = 0;
    this.generatePorts({
      outputSpec: outputSpec
    });
    this.analyser = this.audio.createAnalyser();
    this.analyser.fftSize = 2048;
    this.bufferLength = this.analyser.frequencyBinCount;
    this.dataArray = new Uint8Array(this.bufferLength);
    this.start();
  }
  prototype.start = function(){
    var this$ = this;
    return getMicrophone(function(micStream){
      this$.mic = this$.audio.createMediaStreamSource(micStream);
      this$.mic.connect(this$.analyser);
      this$.running = true;
      return this$.monitor();
    });
  };
  prototype.monitor = function(){
    var avg, max, i$, to$, i, sample, ref$, len$, p;
    if (this.running) {
      raf(bind$(this, 'monitor'));
    }
    this.analyser.getByteTimeDomainData(this.dataArray);
    avg = 0;
    max = 0;
    for (i$ = 0, to$ = this.bufferLength; i$ <= to$; ++i$) {
      i = i$;
      sample = this.dataArray[i];
      if (sample > max) {
        max = sample;
      }
    }
    this.hist.push(max / 128);
    if (this.hist.length >= SMOOTHING) {
      this.hist.shift();
    }
    for (i$ = 0, len$ = (ref$ = this.hist).length; i$ < len$; ++i$) {
      p = ref$[i$];
      avg += p;
    }
    avg /= SMOOTHING;
    this.set(avg > this.threshold);
    this.avg = avg;
    this.value = this.avg / this.threshold;
    return GlobalServices.Poke.poke();
  };
  prototype.serialise = function(){
    return {
      threshold: this.threshold
    };
  };
  return MicNode;
}(Node));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}



},{"./base":15,"std":37}],19:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Node, MouseNode, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
Node = require('./base').Node;
out$.MouseNode = MouseNode = (function(superclass){
  var outputSpec, prototype = extend$((import$(MouseNode, superclass).displayName = 'MouseNode', MouseNode), superclass).prototype, constructor = MouseNode;
  outputSpec = [{
    type: SIGNAL_TYPE_POKE,
    onPull: function(){
      return this.state;
    }
  }];
  function MouseNode(arg$){
    var this$ = this;
    this.buttonIndex = arg$.buttonIndex;
    MouseNode.superclass.apply(this, arguments);
    this.generatePorts({
      outputSpec: outputSpec
    });
    GlobalServices.EventSource.on('mousedown', function(button){
      if (this$.buttonIndex === button) {
        this$.set(true);
      }
      return GlobalServices.Poke.poke();
    });
    GlobalServices.EventSource.on('mouseup', function(button){
      if (this$.buttonIndex === button) {
        this$.set(false);
      }
      return GlobalServices.Poke.poke();
    });
    if (this.buttonIndex === MOUSE_RIGHT) {
      document.addEventListener('contextmenu', function(it){
        return it.preventDefault();
      });
    }
  }
  prototype.serialise = function(){
    return {
      buttonIndex: this.buttonIndex
    };
  };
  return MouseNode;
}(Node));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./base":15,"std":37}],20:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, delay, Node, TimerNode, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, delay = ref$.delay;
Node = require('./base').Node;
out$.TimerNode = TimerNode = (function(superclass){
  var outputSpec, prototype = extend$((import$(TimerNode, superclass).displayName = 'TimerNode', TimerNode), superclass).prototype, constructor = TimerNode;
  outputSpec = [{
    type: SIGNAL_TYPE_POKE,
    onPull: function(){
      return this.state;
    }
  }];
  function TimerNode(arg$){
    var ref$;
    this.time = arg$.time, this.duty = (ref$ = arg$.duty) != null ? ref$ : 0.5, this.offset = (ref$ = arg$.offset) != null ? ref$ : 0;
    this.tick = bind$(this, 'tick', prototype);
    TimerNode.superclass.apply(this, arguments);
    this.generatePorts({
      outputSpec: outputSpec
    });
    this.state = false;
    this.active = false;
    this.start();
  }
  prototype.tick = function(){
    this.set(true);
    return delay(this.time * 1000 * this.duty, bind$(this, 'setOff'), this.active ? delay(this.time * 1000, this.tick) : void 8);
  };
  prototype.set = function(){
    GlobalServices.Poke.poke();
    return superclass.prototype.set.apply(this, arguments);
  };
  prototype.setOff = function(){
    return this.set(false);
  };
  prototype.start = function(){
    var this$ = this;
    this.active = true;
    return delay((this.time - this.offset) * 1000, function(){
      return bind$(this$, 'tick')();
    });
  };
  prototype.stop = function(){
    this.active = false;
    return this.set(false);
  };
  prototype.serialise = function(){
    return {
      time: this.time,
      duty: this.duty,
      offset: this.offset
    };
  };
  return TimerNode;
}(Node));
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./base":15,"std":37}],21:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, v2, Input, Output, PortSet, InputSet, OutputSet, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, v2 = ref$.v2;
ref$ = require('./port'), Input = ref$.Input, Output = ref$.Output;
PortSet = (function(){
  PortSet.displayName = 'PortSet';
  var prototype = PortSet.prototype, constructor = PortSet;
  function PortSet(arg$){
    var spec;
    spec = arg$.spec, this.owner = arg$.owner;
    this.ports = this.generatePorts(spec);
    this.map = bind$(this.ports, 'map');
  }
  prototype.get = function(ix){
    return this.ports[ix];
  };
  Object.defineProperty(prototype, 'all', {
    get: function(){
      return this.ports;
    },
    configurable: true,
    enumerable: true
  });
  Object.defineProperty(prototype, 'next', {
    get: function(){
      var i$, ref$, len$, port;
      for (i$ = 0, len$ = (ref$ = this.ports).length; i$ < len$; ++i$) {
        port = ref$[i$];
        if (port.link == null) {
          return port;
        }
      }
    },
    configurable: true,
    enumerable: true
  });
  Object.defineProperty(prototype, 'length', {
    get: function(){
      return this.ports.length;
    },
    configurable: true,
    enumerable: true
  });
  return PortSet;
}());
out$.InputSet = InputSet = (function(superclass){
  var prototype = extend$((import$(InputSet, superclass).displayName = 'InputSet', InputSet), superclass).prototype, constructor = InputSet;
  prototype.generatePorts = function(spec){
    var i$, len$, ix, ref$, type, onPush, ref1$, results$ = [];
    for (i$ = 0, len$ = spec.length; i$ < len$; ++i$) {
      ix = i$;
      ref$ = spec[i$], type = ref$.type, onPush = (ref1$ = ref$.onPush) != null ? ref1$ : id;
      results$.push(new Input({
        type: type,
        owner: this.owner,
        index: ix,
        onPush: onPush.bind(this.owner)
      }));
    }
    return results$;
  };
  function InputSet(){
    InputSet.superclass.apply(this, arguments);
  }
  return InputSet;
}(PortSet));
out$.OutputSet = OutputSet = (function(superclass){
  var prototype = extend$((import$(OutputSet, superclass).displayName = 'OutputSet', OutputSet), superclass).prototype, constructor = OutputSet;
  prototype.generatePorts = function(spec){
    var i$, len$, ix, ref$, type, onPull, ref1$, results$ = [];
    for (i$ = 0, len$ = spec.length; i$ < len$; ++i$) {
      ix = i$;
      ref$ = spec[i$], type = ref$.type, onPull = (ref1$ = ref$.onPull) != null ? ref1$ : id;
      results$.push(new Output({
        type: type,
        owner: this.owner,
        index: ix,
        onPull: onPull.bind(this.owner)
      }));
    }
    return results$;
  };
  function OutputSet(){
    OutputSet.superclass.apply(this, arguments);
  }
  return OutputSet;
}(PortSet));
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./port":22,"std":37}],22:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, v2, Port, Input, Output, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, v2 = ref$.v2;
Port = (function(){
  Port.displayName = 'Port';
  var prototype = Port.prototype, constructor = Port;
  function Port(arg$){
    this.type = arg$.type, this.owner = arg$.owner, this.index = arg$.index;
  }
  prototype.assignLink = function(link){
    this.link = link;
  };
  prototype.push = function(){
    var ref$;
    return (ref$ = this.link) != null ? ref$.pushTo() : void 8;
  };
  prototype.pull = function(){
    var ref$;
    return (ref$ = this.link) != null ? ref$.pullFrom() : void 8;
  };
  return Port;
}());
out$.Input = Input = (function(superclass){
  var prototype = extend$((import$(Input, superclass).displayName = 'Input', Input), superclass).prototype, constructor = Input;
  function Input(arg$){
    var onPush;
    onPush = arg$.onPush;
    Input.superclass.apply(this, arguments);
    this.push = onPush;
  }
  return Input;
}(Port));
out$.Output = Output = (function(superclass){
  var prototype = extend$((import$(Output, superclass).displayName = 'Output', Output), superclass).prototype, constructor = Output;
  function Output(arg$){
    var onPull;
    onPull = arg$.onPull;
    Output.superclass.apply(this, arguments);
    this.pull = onPull;
  }
  return Output;
}(Port));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"std":37}],23:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, mash, Node, Puppet, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, mash = ref$.mash;
Node = require('./nodes/base').Node;
out$.Puppet = Puppet = (function(superclass){
  var inputSpec, prototype = extend$((import$(Puppet, superclass).displayName = 'Puppet', Puppet), superclass).prototype, constructor = Puppet;
  inputSpec = [
    {
      type: SIGNAL_TYPE_GRAPHIC
    }, {
      type: SIGNAL_TYPE_GRAPHIC
    }, {
      type: SIGNAL_TYPE_GRAPHIC
    }, {
      type: SIGNAL_TYPE_GRAPHIC
    }, {
      type: SIGNAL_TYPE_GRAPHIC
    }, {
      type: SIGNAL_TYPE_GRAPHIC
    }, {
      type: SIGNAL_TYPE_GRAPHIC
    }, {
      type: SIGNAL_TYPE_GRAPHIC
    }
  ];
  function Puppet(){
    this.generatePorts({
      inputSpec: inputSpec
    });
    this.chain = [];
  }
  prototype.pull = function(){
    return this.chain = this.inputs.map(function(it){
      return it.pull();
    }).filter(id);
  };
  prototype.getSize = function(){
    var max, i$, ref$, len$, sprite;
    max = 0;
    for (i$ = 0, len$ = (ref$ = this.chain).length; i$ < len$; ++i$) {
      sprite = ref$[i$];
      if (sprite.width > max) {
        max = sprite.width;
      }
      if (sprite.height > max) {
        max = sprite.width;
      }
    }
    return max;
  };
  prototype.getWinner = function(){
    var ref$;
    return (ref$ = this.chain)[ref$.length - 1];
  };
  prototype.serialise = function(){
    return {};
  };
  return Puppet;
}(Node));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./nodes/base":15,"std":37}],24:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var RectXYWH, RectXYS, out$ = typeof exports != 'undefined' && exports || this;
out$.RectXYWH = RectXYWH = (function(){
  RectXYWH.displayName = 'RectXYWH';
  var prototype = RectXYWH.prototype, constructor = RectXYWH;
  function RectXYWH(arg$, arg1$){
    this.x = arg$.x, this.y = arg$.y;
    this.w = arg1$.w, this.h = arg1$.h;
    this.update();
  }
  prototype.update = function(){
    this.left = this.x - this.w / 2;
    this.right = this.x + this.w / 2;
    this.top = this.y - this.h / 2;
    return this.bottom = this.y + this.h / 2;
  };
  prototype.contains = function(arg$){
    var x, y;
    x = arg$.x, y = arg$.y;
    return (this.left < x && x < this.right) && (this.top < y && y < this.bottom);
  };
  return RectXYWH;
}());
out$.RectXYS = RectXYS = (function(superclass){
  var prototype = extend$((import$(RectXYS, superclass).displayName = 'RectXYS', RectXYS), superclass).prototype, constructor = RectXYS;
  function RectXYS(pos, size){
    RectXYS.superclass.call(this, pos, {
      w: size,
      h: size
    });
  }
  prototype.moveTo = function(arg$){
    var x, y;
    x = arg$.x, y = arg$.y;
    this.x = x;
    this.y = y;
    return this.update();
  };
  return RectXYS;
}(RectXYWH));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{}],25:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Representation, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
out$.Representation = Representation = (function(){
  Representation.displayName = 'Representation';
  var bw, prototype = Representation.prototype, constructor = Representation;
  bw = 10;
  function Representation(target){
    this.target = target;
    this.size == null && (this.size = 100);
    this.state = {
      mode: INTERACTION_MODE_IDLE
    };
    this.canvas = document.createElement('canvas');
    this.canvas.width = this.canvas.height = this.size;
    this.ctx = this.canvas.getContext('2d');
  }
  prototype.draw = function(){
    this.drawBacking();
    return this.drawBorder();
  };
  prototype.drawBacking = function(color){
    color == null && (color = 'white');
    this.ctx.fillStyle = color;
    return this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
  };
  prototype.drawBorder = function(color){
    color == null && (color = this.borderColor());
    this.ctx.fillStyle = color;
    this.ctx.fillRect(0, 0, this.size, bw);
    this.ctx.fillRect(0, bw, bw, this.size - bw);
    this.ctx.fillRect(this.size - bw, bw, bw, this.size - bw);
    return this.ctx.fillRect(bw, this.size - bw, this.size - bw * 2, bw);
  };
  prototype.borderColor = function(){
    if (this.target.state) {
      return COLOR_YELLOW;
    } else {
      return this.modeColor(this.state.mode);
    }
  };
  prototype.modeColor = function(mode){
    switch (mode) {
    case INTERACTION_MODE_IDLE:
      return 'darkred';
    case INTERACTION_MODE_HOT:
      return 'orange';
    case INTERACTION_MODE_ACTIVE:
      return 'red';
    }
  };
  prototype.setMode = function(mode){
    return this.state.mode = mode;
  };
  prototype.serialise = function(){
    return {
      pos: this.pos,
      size: this.size
    };
  };
  Representation.NullRepresentation = new Representation({
    state: false
  });
  return Representation;
}());



},{"std":37}],26:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, v2, Representation, GraphicRep, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, v2 = ref$.v2;
Representation = require('./base').Representation;
out$.GraphicRep = GraphicRep = (function(superclass){
  var prototype = extend$((import$(GraphicRep, superclass).displayName = 'GraphicRep', GraphicRep), superclass).prototype, constructor = GraphicRep;
  function GraphicRep(){
    this.size = 130;
    GraphicRep.superclass.apply(this, arguments);
  }
  prototype.draw = function(target){
    superclass.prototype.draw.apply(this, arguments);
    this.ctx.globalAlpha = target.state ? 1 : 0.3;
    this.ctx.drawImage(target.sprite.canvas, 10, 10, this.size - 20, (target.sprite.size.y / target.sprite.size.x) * (this.size - 20));
    return this.ctx.globalAlpha = 1;
  };
  return GraphicRep;
}(Representation));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./base":25,"std":37}],27:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Representation, keysymbols, KeyRep, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
Representation = require('./base').Representation;
keysymbols = {
  90: 'Z',
  88: 'X',
  67: 'C',
  86: 'V'
};
out$.KeyRep = KeyRep = (function(superclass){
  var prototype = extend$((import$(KeyRep, superclass).displayName = 'KeyRep', KeyRep), superclass).prototype, constructor = KeyRep;
  function KeyRep(){
    KeyRep.superclass.apply(this, arguments);
    this.symbol = keysymbols[this.target.keycode];
  }
  prototype.draw = function(){
    superclass.prototype.draw.apply(this, arguments);
    this.ctx.fillStyle = 'black';
    this.ctx.font = this.size / 2 + "px monospace";
    this.ctx.textAlign = 'center';
    this.ctx.textBaseline = 'middle';
    return this.ctx.fillText(this.symbol, this.size / 2, this.size / 2, this.size, this.size);
  };
  return KeyRep;
}(Representation));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./base":25,"std":37}],28:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, hyp, abs, v2, translate2, i, LinkRep, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, hyp = ref$.hyp, abs = ref$.abs, v2 = ref$.v2, translate2 = ref$.translate2;
i = 0;
out$.LinkRep = LinkRep = (function(){
  LinkRep.displayName = 'LinkRep';
  var bendStrength, prototype = LinkRep.prototype, constructor = LinkRep;
  bendStrength = 50;
  function LinkRep(target){
    this.target = target;
    this.i = i++;
  }
  prototype.getStatusColors = function(){
    switch (this.target.status) {
    case LINK_STATUS_OK:
      switch (this.target.to.type) {
      case SIGNAL_TYPE_NUMBER:
        return [COLOR_PURPLE, COLOR_MAGENTA];
      case SIGNAL_TYPE_GRAPHIC:
        return [COLOR_DARK_BLUE, COLOR_BRIGHT_BLUE];
      default:
        return [COLOR_DARK_GREEN, COLOR_BRIGHT_GREEN];
      }
      break;
    default:
      return [COLOR_RED, COLOR_BRIGHT_RED];
    }
  };
  prototype.draw = function(arg$){
    var ctx, tp, fp, ss, d, b, ref$, baseColor, powerColor;
    ctx = arg$.ctx;
    tp = v2(0, 0);
    fp = v2(0, 0);
    if (this.target.status === LINK_STATUS_INCOMPLETE) {
      if (this.target.from) {
        fp = this.target.from.owner.rep.outputs.getPos(this.target.from.index);
        tp = translate2(fp, v2(-10, 0));
      } else if (this.target.to) {
        tp = this.target.to.owner.rep.inputs.getPos(this.target.to.index);
        fp = translate2(tp, v2(10, 0));
      }
      ss = Math.random();
    } else {
      fp = this.target.from.owner.rep.outputs.getPos(this.target.from.index);
      tp = this.target.to.owner.rep.inputs.getPos(this.target.to.index);
      ss = this.target.inferSignalStrength();
    }
    d = hyp(tp, fp);
    d = tp.x - fp.x;
    b = d <= bendStrength ? bendStrength * Math.pow(abs(d) / bendStrength, 1.4) : bendStrength;
    ref$ = this.getStatusColors(), baseColor = ref$[0], powerColor = ref$[1];
    ctx.lineWidth = 5;
    ctx.strokeStyle = baseColor;
    ctx.beginPath();
    ctx.moveTo(fp.x, fp.y);
    ctx.bezierCurveTo(fp.x + b, fp.y, tp.x - b, tp.y, tp.x, tp.y);
    ctx.stroke();
    ctx.globalAlpha = ss;
    ctx.strokeStyle = powerColor;
    ctx.beginPath();
    ctx.moveTo(fp.x, fp.y);
    ctx.bezierCurveTo(fp.x + b, fp.y, tp.x - b, tp.y, tp.x, tp.y);
    ctx.stroke();
    return ctx.globalAlpha = 1;
  };
  return LinkRep;
}());



},{"std":37}],29:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Representation, MicRep, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
Representation = require('./base').Representation;
out$.MicRep = MicRep = (function(superclass){
  var size, prototype = extend$((import$(MicRep, superclass).displayName = 'MicRep', MicRep), superclass).prototype, constructor = MicRep;
  size = 70;
  function MicRep(){
    MicRep.superclass.apply(this, arguments);
    this.ctx.fillStyle = 'grey';
    this.ctx.fillRect(0, 0, this.size, this.size);
    this.ctx.fillStyle = 'lightgrey';
    this.ctx.fillRect(0, 0, this.size, this.size);
    this.ctx.fillStyle = 'darkgrey';
    this.ctx.fillRect(0, this.size / 2, this.size, this.size / 2);
  }
  prototype.draw = function(target){
    var w, v, t;
    w = this.size / 5;
    v = target.value / 2;
    t = target.threshold / 2;
    this.ctx.fillStyle = 'white';
    this.ctx.fillRect(this.size / 2 - w / 2, 0, w, this.size);
    this.ctx.fillStyle = target.state ? 'red' : 'blue';
    this.ctx.fillRect(this.size / 2 - w / 2, this.size - 10 - this.size * v, w, this.size * v);
    this.ctx.globalAlpha = 1;
    return this.drawBorder();
  };
  return MicRep;
}(Representation));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./base":25,"std":37}],30:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Representation, keysymbols, MouseRep, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
Representation = require('./base').Representation;
keysymbols = {
  0: '◀',
  1: '■',
  2: '▶'
};
out$.MouseRep = MouseRep = (function(superclass){
  var prototype = extend$((import$(MouseRep, superclass).displayName = 'MouseRep', MouseRep), superclass).prototype, constructor = MouseRep;
  function MouseRep(){
    MouseRep.superclass.apply(this, arguments);
    this.symbol = keysymbols[this.target.buttonIndex];
  }
  prototype.draw = function(){
    superclass.prototype.draw.apply(this, arguments);
    this.ctx.fillStyle = 'black';
    this.ctx.font = this.size / 2 + "px monospace";
    this.ctx.textAlign = 'center';
    this.ctx.textBaseline = 'middle';
    return this.ctx.fillText(this.symbol, this.size / 2, this.size / 2, this.size, this.size);
  };
  return MouseRep;
}(Representation));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./base":25,"std":37}],31:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, v2, portColor, PortSetRep, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, v2 = ref$.v2;
portColor = function(arg$){
  var type;
  type = arg$.type;
  switch (type) {
  case SIGNAL_TYPE_NUMBER:
    return COLOR_MAGENTA;
  case SIGNAL_TYPE_GRAPHIC:
    return COLOR_BRIGHT_BLUE;
  default:
    return COLOR_BRIGHT_GREEN;
  }
};
out$.PortSetRep = PortSetRep = (function(){
  PortSetRep.displayName = 'PortSetRep';
  var PORT_WIDTH, prototype = PortSetRep.prototype, constructor = PortSetRep;
  PORT_WIDTH = 20;
  function PortSetRep(target, arg$){
    var ref$, res$, i$, len$, i;
    this.target = target;
    this.offset = (ref$ = arg$.offset) != null ? ref$ : 0, this.height = (ref$ = arg$.height) != null ? ref$ : 100, this.basis = (ref$ = arg$.basis) != null
      ? ref$
      : v2(0, 0);
    res$ = [];
    for (i$ = 0, len$ = (ref$ = this.target.ports).length; i$ < len$; ++i$) {
      i = ref$[i$];
      res$.push(v2(0, 0));
    }
    this.portPositions = res$;
    this.length = this.portPositions.length;
    this.moveTo(this.basis);
  }
  prototype.getPos = function(ix){
    return this.portPositions[ix];
  };
  prototype.getPortVerticalPos = function(i){
    var space, start, yPos;
    space = (this.height - 20 * this.length) / (this.length === 1
      ? 1
      : this.length - 1);
    start = PORT_WIDTH / 2 - this.height / 2;
    return yPos = start + i * (PORT_WIDTH + space);
  };
  prototype.moveTo = function(arg$){
    var x, y, i$, ref$, len$, i, pos, results$ = [];
    x = arg$.x, y = arg$.y;
    this.basis.x = x + this.offset;
    this.basis.y = y;
    for (i$ = 0, len$ = (ref$ = this.portPositions).length; i$ < len$; ++i$) {
      i = i$;
      pos = ref$[i$];
      pos.x = this.basis.x;
      results$.push(pos.y = this.basis.y + this.getPortVerticalPos(i));
    }
    return results$;
  };
  prototype.draw = function(arg$){
    var ctx, i$, ref$, len$, i, port, results$ = [];
    ctx = arg$.ctx;
    for (i$ = 0, len$ = (ref$ = this.target.ports).length; i$ < len$; ++i$) {
      i = i$;
      port = ref$[i$];
      ctx.fillStyle = portColor(port);
      results$.push(ctx.fillRect(this.portPositions[i].x, this.portPositions[i].y - 10, 8, 20));
    }
    return results$;
  };
  return PortSetRep;
}());



},{"std":37}],32:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, v2, Representation, PuppetRep, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, v2 = ref$.v2;
Representation = require('./base').Representation;
out$.PuppetRep = PuppetRep = (function(superclass){
  var offset, prototype = extend$((import$(PuppetRep, superclass).displayName = 'PuppetRep', PuppetRep), superclass).prototype, constructor = PuppetRep;
  offset = v2(10, 10);
  function PuppetRep(){
    PuppetRep.superclass.apply(this, arguments);
  }
  prototype.draw = function(arg$){
    var ctx, sprite;
    ctx = arg$.ctx;
    this.size = this.target.getSize();
    this.canvas.width = this.canvas.height = this.size;
    this.drawBorder();
    if (sprite = this.target.getWinner()) {
      return sprite.blitTo(this.ctx, offset.x, offset.y + this.size - 20 - sprite.height);
    }
  };
  return PuppetRep;
}(Representation));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./base":25,"std":37}],33:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var Representation, TimerRep, out$ = typeof exports != 'undefined' && exports || this;
Representation = require('./base').Representation;
out$.TimerRep = TimerRep = (function(superclass){
  var prototype = extend$((import$(TimerRep, superclass).displayName = 'TimerRep', TimerRep), superclass).prototype, constructor = TimerRep;
  function TimerRep(){
    TimerRep.superclass.apply(this, arguments);
  }
  prototype.draw = function(){
    superclass.prototype.draw.apply(this, arguments);
    this.ctx.fillStyle = 'black';
    this.ctx.font = this.size / 4 + "px monospace";
    this.ctx.textAlign = 'center';
    this.ctx.textBaseline = 'middle';
    this.ctx.beginPath();
    this.ctx.moveTo(0, this.size / 2 + 0.5);
    this.ctx.lineTo(this.size, this.size / 2 + 0.5);
    this.ctx.stroke();
    this.ctx.fillText(this.target.time, this.size / 2, this.size / 2 - this.size / 5, this.size, this.size);
    return this.ctx.fillText(this.target.duty, this.size / 2, this.size / 2 + this.size / 5, this.size, this.size);
  };
  return TimerRep;
}(Representation));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./base":25}],34:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Scene, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
out$.Scene = Scene = (function(){
  Scene.displayName = 'Scene';
  var prototype = Scene.prototype, constructor = Scene;
  function Scene(sceneData){
    this.links = [];
    this.nodes = [];
    this.puppet = {
      pull: id
    };
    if (sceneData) {
      this['import'](sceneData);
    }
  }
  prototype.pull = function(){
    return this.puppet.pull();
  };
  prototype['import'] = function(arg$){
    this.puppet = arg$.puppet, this.links = arg$.links, this.nodes = arg$.nodes;
  };
  prototype.drawOnto = function(workspace){
    this.links.map(function(it){
      return it.draw(workspace);
    });
    return this.nodes.map(function(it){
      return it.draw(workspace);
    });
  };
  return Scene;
}());



},{"std":37}],35:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Node, Representation, PokeShim, NumericShim, GraphicShim, ShimRep, AbstractShimRep, NumericShimRep, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
Node = require('./nodes/base').Node;
Representation = require('./representations/base').Representation;
out$.PokeShim = PokeShim = (function(superclass){
  var inputSpec, prototype = extend$((import$(PokeShim, superclass).displayName = 'PokeShim', PokeShim), superclass).prototype, constructor = PokeShim;
  inputSpec = [{
    type: SIGNAL_TYPE_POKE,
    onPush: id
  }];
  function PokeShim(){
    PokeShim.superclass.apply(this, arguments);
    this.generatePorts({
      inputSpec: inputSpec
    });
  }
  prototype.serialise = function(){
    return {};
  };
  return PokeShim;
}(Node));
out$.NumericShim = NumericShim = (function(superclass){
  var inputSpec, prototype = extend$((import$(NumericShim, superclass).displayName = 'NumericShim', NumericShim), superclass).prototype, constructor = NumericShim;
  inputSpec = [{
    type: SIGNAL_TYPE_NUMBER,
    onPush: id
  }];
  function NumericShim(){
    NumericShim.superclass.apply(this, arguments);
    this.generatePorts({
      inputSpec: inputSpec
    });
  }
  prototype.serialise = function(){
    return {};
  };
  return NumericShim;
}(Node));
out$.GraphicShim = GraphicShim = (function(superclass){
  var inputSpec, prototype = extend$((import$(GraphicShim, superclass).displayName = 'GraphicShim', GraphicShim), superclass).prototype, constructor = GraphicShim;
  inputSpec = [{
    type: SIGNAL_TYPE_GRAPHIC,
    onPush: id
  }];
  function GraphicShim(){
    GraphicShim.superclass.apply(this, arguments);
    this.generatePorts({
      inputSpec: inputSpec
    });
  }
  prototype.serialise = function(){
    return {};
  };
  return GraphicShim;
}(Node));
out$.ShimRep = ShimRep = (function(superclass){
  var prototype = extend$((import$(ShimRep, superclass).displayName = 'ShimRep', ShimRep), superclass).prototype, constructor = ShimRep;
  function ShimRep(){
    ShimRep.superclass.apply(this, arguments);
  }
  return ShimRep;
}(Representation));
out$.AbstractShimRep = AbstractShimRep = (function(superclass){
  var prototype = extend$((import$(AbstractShimRep, superclass).displayName = 'AbstractShimRep', AbstractShimRep), superclass).prototype, constructor = AbstractShimRep;
  prototype.draw = function(){
    this.drawBacking(COLOR_PURPLE);
    this.ctx.globalAlpha = this.target.inputs.get(0).pull();
    this.ctx.fillRect(0, 0, this.size, this.size);
    this.ctx.globalAlpha = 1;
    this.ctx;
    return this.drawBorder(COLOR_PURPLE);
  };
  function AbstractShimRep(){
    AbstractShimRep.superclass.apply(this, arguments);
  }
  return AbstractShimRep;
}(Representation));
out$.NumericShimRep = NumericShimRep = (function(superclass){
  var prototype = extend$((import$(NumericShimRep, superclass).displayName = 'NumericShimRep', NumericShimRep), superclass).prototype, constructor = NumericShimRep;
  prototype.draw = function(){
    var value;
    superclass.prototype.draw.apply(this, arguments);
    value = function(it){
      return it.substr(0, 3);
    }(
    function(it){
      return it.replace(/^0/, '');
    }(
    function(it){
      return String(it);
    }(
    (function(it){
      return 0.01 * it;
    })(
    Math.round(
    (function(it){
      return 100 * it;
    })(
    this.target.inputs.get(0).pull()))))));
    this.ctx.fillStyle = 'black';
    this.ctx.font = this.size / 3 + "px monospace";
    this.ctx.textAlign = 'center';
    this.ctx.textBaseline = 'middle';
    return this.ctx.fillText(value, this.size / 2, this.size / 2, this.size, this.size);
  };
  function NumericShimRep(){
    NumericShimRep.superclass.apply(this, arguments);
  }
  return NumericShimRep;
}(Representation));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./nodes/base":15,"./representations/base":25,"std":37}],36:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, v2, Blitter, Sprite, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, v2 = ref$.v2;
Blitter = require('./blitter').Blitter;
out$.Sprite = Sprite = (function(superclass){
  var prototype = extend$((import$(Sprite, superclass).displayName = 'Sprite', Sprite), superclass).prototype, constructor = Sprite;
  function Sprite(arg$){
    var this$ = this;
    this.src = arg$.src;
    Sprite.superclass.apply(this, arguments);
    this.img = new Image;
    this.size = v2(0, 0);
    this.img.onload = function(){
      this$.width = this$.canvas.width = this$.img.width;
      this$.height = this$.canvas.height = this$.img.height;
      this$.size = v2(this$.width, this$.height);
      this$.ctx.drawImage(this$.img, 0, 0);
      return GlobalServices.Poke.poke();
    };
    this.img.src = this.src;
    this.active = false;
  }
  prototype.serialise = function(){
    return {
      src: this.src
    };
  };
  return Sprite;
}(Blitter));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./blitter":2,"std":37}],37:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var id, log, flip, delay, defer, v2, floor, rand, randomFrom, sqrt, hyp, raf, mash, logError, getMicrophone, keys, loadImage, abs, invoke, translate2, out$ = typeof exports != 'undefined' && exports || this;
out$.id = id = function(it){
  return it;
};
out$.log = log = function(){
  console.log.apply(console, arguments);
  return arguments[0];
};
out$.flip = flip = function(λ){
  return curry$(function(a, b){
    return λ(b, a);
  });
};
out$.delay = delay = flip(setTimeout);
out$.defer = defer = delay(0);
out$.v2 = v2 = function(x, y){
  if (y != null) {
    return {
      x: x,
      y: y
    };
  } else {
    return {
      x: x.x,
      y: x.y
    };
  }
};
out$.floor = floor = Math.floor;
out$.rand = rand = (function(it){
  return it * Math.random();
});
out$.randomFrom = randomFrom = function(xs){
  return xs[floor(rand(xs.length))];
};
out$.sqrt = sqrt = Math.sqrt;
out$.hyp = hyp = function(a, b){
  var Δx, Δy;
  Δx = b.x - a.x;
  Δy = b.y - a.y;
  return sqrt(Δx * Δx + Δy * Δy);
};
out$.raf = raf = requestAnimationFrame;
out$.mash = mash = function(xs){
  var i$, len$, ref$, k, v, resultObj$ = {};
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    ref$ = xs[i$], k = ref$[0], v = ref$[1];
    resultObj$[k] = v;
  }
  return resultObj$;
};
out$.logError = logError = function(){
  return log(this, arguments);
};
out$.getMicrophone = getMicrophone = function(λ){
  return navigator.webkitGetUserMedia({
    audio: true
  }, λ, logError);
};
out$.keys = keys = function(it){
  var k, v, results$ = [];
  for (k in it) {
    v = it[k];
    results$.push(k);
  }
  return results$;
};
out$.loadImage = loadImage = function(src, λ){
  var image;
  λ == null && (λ = id);
  image = new Image;
  image.src = src;
  image.onload = λ;
  return image;
};
out$.abs = abs = Math.abs;
out$.invoke = invoke = function(it){
  return typeof it == 'function' ? it() : void 8;
};
out$.translate2 = translate2 = function(origin, translation){
  return v2(origin.x + translation.x, origin.y + translation.y);
};
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}



},{}],38:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, mash, v2, Link, Sprite, VisualNode, Puppet, KeyNode, MicNode, MouseNode, TimerNode, GraphicNode, MicRep, KeyRep, TimerRep, PuppetRep, GraphicRep, MouseRep, LinkRep, NumericShim, NumericShimRep, constructTestScene, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, mash = ref$.mash, v2 = ref$.v2;
Link = require('./link').Link;
Sprite = require('./sprite').Sprite;
VisualNode = require('./visual-node').VisualNode;
Puppet = require('./puppet').Puppet;
KeyNode = require('./nodes/key').KeyNode;
MicNode = require('./nodes/mic').MicNode;
MouseNode = require('./nodes/mouse').MouseNode;
TimerNode = require('./nodes/timer').TimerNode;
GraphicNode = require('./nodes/graphic').GraphicNode;
MicRep = require('./representations/mic').MicRep;
KeyRep = require('./representations/key').KeyRep;
TimerRep = require('./representations/timer').TimerRep;
PuppetRep = require('./representations/puppet').PuppetRep;
GraphicRep = require('./representations/graphic').GraphicRep;
MouseRep = require('./representations/mouse').MouseRep;
LinkRep = require('./representations/link').LinkRep;
ref$ = require('./shim'), NumericShim = ref$.NumericShim, NumericShimRep = ref$.NumericShimRep;
out$.constructTestScene = constructTestScene = function(){
  var output, puppet, zKey, xKey, cKey, vKey, timer, left, mic, micNode, leftNode, timerNode, zNode, xNode, cNode, vNode, puppetNode, animNodes, i, name, sprite, graphic, node, shimNode, shim;
  output = {
    nodes: [],
    links: [],
    puppet: null
  };
  puppet = new Puppet;
  zKey = new KeyNode({
    keycode: KEY_Z
  });
  xKey = new KeyNode({
    keycode: KEY_X
  });
  cKey = new KeyNode({
    keycode: KEY_C
  });
  vKey = new KeyNode({
    keycode: KEY_V
  });
  timer = new TimerNode({
    time: 10,
    duty: 0.1,
    offset: 7
  });
  left = new MouseNode({
    buttonIndex: MOUSE_LEFT
  });
  mic = new MicNode({
    threshold: 1.1
  });
  output.nodes.push(micNode = new VisualNode({
    content: mic,
    rep: new MicRep(mic),
    size: 70,
    pos: v2(50, 800)
  }));
  output.nodes.push(leftNode = new VisualNode({
    content: left,
    rep: new MouseRep(left),
    size: 70,
    pos: v2(50, 100)
  }));
  output.nodes.push(timerNode = new VisualNode({
    content: timer,
    rep: new TimerRep(timer),
    size: 100,
    pos: v2(65, 685)
  }));
  output.nodes.push(zNode = new VisualNode({
    content: zKey,
    rep: new KeyRep(zKey),
    size: 70,
    pos: v2(50, 195)
  }));
  output.nodes.push(xNode = new VisualNode({
    content: xKey,
    rep: new KeyRep(xKey),
    size: 70,
    pos: v2(50, 275)
  }));
  output.nodes.push(cNode = new VisualNode({
    content: cKey,
    rep: new KeyRep(cKey),
    size: 70,
    pos: v2(50, 355)
  }));
  output.nodes.push(vNode = new VisualNode({
    content: vKey,
    rep: new KeyRep(vKey),
    size: 70,
    pos: v2(50, 435)
  }));
  output.nodes.push(puppetNode = new VisualNode({
    content: puppet,
    rep: new PuppetRep(puppet),
    size: 180,
    pos: v2(550, 450)
  }));
  animNodes = mash((function(){
    var i$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = ['look', 'draw', 'drop', 'frustrate', 'choke', 'sing']).length; i$ < len$; ++i$) {
      i = i$;
      name = ref$[i$];
      sprite = new Sprite({
        src: "assets/" + name + "_01.png"
      });
      graphic = new GraphicNode({
        sprite: sprite
      });
      output.nodes.push(node = new VisualNode({
        content: graphic,
        rep: new GraphicRep(graphic),
        size: 130,
        pos: v2(260, 80 + 140 * i)
      }));
      results$.push([name, node]);
    }
    return results$;
  }()));
  output.links.push(VisualNode.link(animNodes.look, puppetNode));
  output.links = output.links.concat(VisualNode.chain(leftNode, animNodes.draw, puppetNode));
  output.links = output.links.concat(VisualNode.chain(zNode, animNodes.drop, puppetNode));
  output.links = output.links.concat(VisualNode.chain(xNode, animNodes.frustrate, puppetNode));
  output.links = output.links.concat(VisualNode.chain(timerNode, animNodes.choke, puppetNode));
  output.links = output.links.concat(VisualNode.chain(micNode, animNodes.sing, puppetNode));
  output.nodes.push(shimNode = new VisualNode({
    content: shim = new NumericShim,
    rep: new NumericShimRep(shim),
    size: 50,
    pos: v2(140, 840)
  }));
  output.links.push(new LinkRep(new Link({
    from: micNode.content.outputs.next,
    to: shimNode.content.inputs.next
  })));
  output.puppet = puppet;
  return output;
};



},{"./link":13,"./nodes/graphic":16,"./nodes/key":17,"./nodes/mic":18,"./nodes/mouse":19,"./nodes/timer":20,"./puppet":23,"./representations/graphic":26,"./representations/key":27,"./representations/link":28,"./representations/mic":29,"./representations/mouse":30,"./representations/puppet":32,"./representations/timer":33,"./shim":35,"./sprite":36,"./visual-node":39,"std":37}],39:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, v2, Representation, RectXYS, Link, PortSetRep, LinkRep, VisualNode, out$ = typeof exports != 'undefined' && exports || this, slice$ = [].slice;
ref$ = require('std'), id = ref$.id, log = ref$.log, v2 = ref$.v2;
Representation = require('./representations/base').Representation;
RectXYS = require('./rect').RectXYS;
Link = require('./link').Link;
PortSetRep = require('./representations/port-set').PortSetRep;
LinkRep = require('./representations/link').LinkRep;
out$.VisualNode = VisualNode = (function(){
  VisualNode.displayName = 'VisualNode';
  var prototype = VisualNode.prototype, constructor = VisualNode;
  function VisualNode(arg$){
    var ref$;
    this.content = arg$.content, this.pos = arg$.pos, this.size = arg$.size, this.rep = (ref$ = arg$.rep) != null
      ? ref$
      : Representation.NullRepresentation;
    this.state = {
      mode: INTERACTION_MODE_IDLE,
      signal: false
    };
    this.bounds = new RectXYS(this.pos, this.size);
    this.inputs = new PortSetRep(this.content.inputs, {
      basis: v2(this.pos),
      height: this.size,
      offset: this.size / -2 - 3
    });
    this.outputs = new PortSetRep(this.content.outputs, {
      basis: v2(this.pos),
      height: this.size,
      offset: this.size / 2 - 6
    });
    this.content.rep = this;
  }
  prototype.pull = function(){
    return this.state.signal = this.content.state;
  };
  prototype.draw = function(arg$){
    var ctx;
    ctx = arg$.ctx;
    this.rep.draw(this.content);
    ctx.drawImage(this.rep.canvas, this.pos.x - this.size / 2, this.pos.y - this.size / 2, this.size, this.size);
    this.inputs.draw({
      ctx: ctx
    });
    return this.outputs.draw({
      ctx: ctx
    });
  };
  prototype.setMode = function(mode){
    this.rep.setMode(mode);
    return this.state.mode = mode;
  };
  prototype.moveTo = function(arg$){
    var x, y;
    x = arg$.x, y = arg$.y;
    this.pos.x = x;
    this.pos.y = y;
    return this.updateChildPos();
  };
  prototype.moveBy = function(arg$){
    var x, y;
    x = arg$.x, y = arg$.y;
    this.pos.x += x;
    this.pos.y += y;
    return this.updateChildPos();
  };
  prototype.updateChildPos = function(){
    log("Moved to:", this.pos.x, this.pos.y);
    this.bounds.moveTo(this.pos);
    this.inputs.moveTo(this.pos);
    return this.outputs.moveTo(this.pos);
  };
  prototype.boundsContains = function(point){
    return this.bounds.contains(point);
  };
  prototype.serialise = function(){
    return this.rep.serialise();
  };
  VisualNode.link = function(a, b){
    return new LinkRep(new Link({
      from: a.content.outputs.next,
      to: b.content.inputs.next
    }));
  };
  VisualNode.chain = function(){
    var nodes, i$, to$, i, results$ = [];
    nodes = slice$.call(arguments);
    for (i$ = 0, to$ = nodes.length - 2; i$ <= to$; ++i$) {
      i = i$;
      results$.push(this.link(nodes[i], nodes[i + 1]));
    }
    return results$;
  };
  return VisualNode;
}());



},{"./link":13,"./rect":24,"./representations/base":25,"./representations/link":28,"./representations/port-set":31,"std":37}],40:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var Blitter, Workspace, out$ = typeof exports != 'undefined' && exports || this;
Blitter = require('./blitter').Blitter;
out$.Workspace = Workspace = (function(superclass){
  var prototype = extend$((import$(Workspace, superclass).displayName = 'Workspace', Workspace), superclass).prototype, constructor = Workspace;
  function Workspace(){
    Workspace.superclass.call(this, {
      size: 950
    });
  }
  prototype.install = function(host){
    return host.appendChild(this.canvas);
  };
  return Workspace;
}(Blitter));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./blitter":2}]},{},[12])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvbGFrbWVlci9Qcm9qZWN0cy90d2l0Y2hpZS9jb25maWcvaW5kZXgubHMiLCIvVXNlcnMvbGFrbWVlci9Qcm9qZWN0cy90d2l0Y2hpZS9zcmMvYmxpdHRlci5scyIsIi9Vc2Vycy9sYWttZWVyL1Byb2plY3RzL3R3aXRjaGllL3NyYy9kcmFnLW1vbml0b3IubHMiLCIvVXNlcnMvbGFrbWVlci9Qcm9qZWN0cy90d2l0Y2hpZS9zcmMvZ2xvYmFsL2Jyb3dzZXItZXZlbnQtc291cmNlLmxzIiwiL1VzZXJzL2xha21lZXIvUHJvamVjdHMvdHdpdGNoaWUvc3JjL2dsb2JhbC9jb25zdC5scyIsIi9Vc2Vycy9sYWttZWVyL1Byb2plY3RzL3R3aXRjaGllL3NyYy9nbG9iYWwvZXZlbnQtc291cmNlLmxzIiwiL1VzZXJzL2xha21lZXIvUHJvamVjdHMvdHdpdGNoaWUvc3JjL2dsb2JhbC9pbmRleC5scyIsIi9Vc2Vycy9sYWttZWVyL1Byb2plY3RzL3R3aXRjaGllL3NyYy9nbG9iYWwvcG9rZS5scyIsIi9Vc2Vycy9sYWttZWVyL1Byb2plY3RzL3R3aXRjaGllL3NyYy9nbG9iYWwvc2NlbmUtbGlicmFyeS5scyIsIi9Vc2Vycy9sYWttZWVyL1Byb2plY3RzL3R3aXRjaGllL3NyYy9nbG9iYWwvc2VydmVyLWludGVyZmFjZS5scyIsIi9Vc2Vycy9sYWttZWVyL1Byb2plY3RzL3R3aXRjaGllL3NyYy9nbG9iYWwvd2Vic29ja2V0LWV2ZW50LXNvdXJjZS5scyIsIi9Vc2Vycy9sYWttZWVyL1Byb2plY3RzL3R3aXRjaGllL3NyYy9pbmRleC5scyIsIi9Vc2Vycy9sYWttZWVyL1Byb2plY3RzL3R3aXRjaGllL3NyYy9saW5rLmxzIiwiL1VzZXJzL2xha21lZXIvUHJvamVjdHMvdHdpdGNoaWUvc3JjL25vZGUtcHJvdmlkZXIubHMiLCIvVXNlcnMvbGFrbWVlci9Qcm9qZWN0cy90d2l0Y2hpZS9zcmMvbm9kZXMvYmFzZS5scyIsIi9Vc2Vycy9sYWttZWVyL1Byb2plY3RzL3R3aXRjaGllL3NyYy9ub2Rlcy9ncmFwaGljLmxzIiwiL1VzZXJzL2xha21lZXIvUHJvamVjdHMvdHdpdGNoaWUvc3JjL25vZGVzL2tleS5scyIsIi9Vc2Vycy9sYWttZWVyL1Byb2plY3RzL3R3aXRjaGllL3NyYy9ub2Rlcy9taWMubHMiLCIvVXNlcnMvbGFrbWVlci9Qcm9qZWN0cy90d2l0Y2hpZS9zcmMvbm9kZXMvbW91c2UubHMiLCIvVXNlcnMvbGFrbWVlci9Qcm9qZWN0cy90d2l0Y2hpZS9zcmMvbm9kZXMvdGltZXIubHMiLCIvVXNlcnMvbGFrbWVlci9Qcm9qZWN0cy90d2l0Y2hpZS9zcmMvcG9ydC1zZXQubHMiLCIvVXNlcnMvbGFrbWVlci9Qcm9qZWN0cy90d2l0Y2hpZS9zcmMvcG9ydC5scyIsIi9Vc2Vycy9sYWttZWVyL1Byb2plY3RzL3R3aXRjaGllL3NyYy9wdXBwZXQubHMiLCIvVXNlcnMvbGFrbWVlci9Qcm9qZWN0cy90d2l0Y2hpZS9zcmMvcmVjdC5scyIsIi9Vc2Vycy9sYWttZWVyL1Byb2plY3RzL3R3aXRjaGllL3NyYy9yZXByZXNlbnRhdGlvbnMvYmFzZS5scyIsIi9Vc2Vycy9sYWttZWVyL1Byb2plY3RzL3R3aXRjaGllL3NyYy9yZXByZXNlbnRhdGlvbnMvZ3JhcGhpYy5scyIsIi9Vc2Vycy9sYWttZWVyL1Byb2plY3RzL3R3aXRjaGllL3NyYy9yZXByZXNlbnRhdGlvbnMva2V5LmxzIiwiL1VzZXJzL2xha21lZXIvUHJvamVjdHMvdHdpdGNoaWUvc3JjL3JlcHJlc2VudGF0aW9ucy9saW5rLmxzIiwiL1VzZXJzL2xha21lZXIvUHJvamVjdHMvdHdpdGNoaWUvc3JjL3JlcHJlc2VudGF0aW9ucy9taWMubHMiLCIvVXNlcnMvbGFrbWVlci9Qcm9qZWN0cy90d2l0Y2hpZS9zcmMvcmVwcmVzZW50YXRpb25zL21vdXNlLmxzIiwiL1VzZXJzL2xha21lZXIvUHJvamVjdHMvdHdpdGNoaWUvc3JjL3JlcHJlc2VudGF0aW9ucy9wb3J0LXNldC5scyIsIi9Vc2Vycy9sYWttZWVyL1Byb2plY3RzL3R3aXRjaGllL3NyYy9yZXByZXNlbnRhdGlvbnMvcHVwcGV0LmxzIiwiL1VzZXJzL2xha21lZXIvUHJvamVjdHMvdHdpdGNoaWUvc3JjL3JlcHJlc2VudGF0aW9ucy90aW1lci5scyIsIi9Vc2Vycy9sYWttZWVyL1Byb2plY3RzL3R3aXRjaGllL3NyYy9zY2VuZS5scyIsIi9Vc2Vycy9sYWttZWVyL1Byb2plY3RzL3R3aXRjaGllL3NyYy9zaGltLmxzIiwiL1VzZXJzL2xha21lZXIvUHJvamVjdHMvdHdpdGNoaWUvc3JjL3Nwcml0ZS5scyIsIi9Vc2Vycy9sYWttZWVyL1Byb2plY3RzL3R3aXRjaGllL3NyYy9zdGQvaW5kZXgubHMiLCIvVXNlcnMvbGFrbWVlci9Qcm9qZWN0cy90d2l0Y2hpZS9zcmMvdGVzdC1kYXRhLmxzIiwiL1VzZXJzL2xha21lZXIvUHJvamVjdHMvdHdpdGNoaWUvc3JjL3Zpc3VhbC1ub2RlLmxzIiwiL1VzZXJzL2xha21lZXIvUHJvamVjdHMvdHdpdGNoaWUvc3JjL3dvcmtzcGFjZS5scyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0FDSUEsTUFBTSxDQUFDLG1CQUFvQixDQUFBLENBQUEsQ0FBRTtBQUU3QixNQUFNLENBQUMseUJBQTBCLENBQUEsQ0FBQSxDQUFFOzs7Ozs7Ozs7QUNMbkMsSUFBQSxHQUFjLE9BQWQsQ0FBc0IsS0FBQSxDQUF0QixFQUFFLEVBQVUsQ0FBQSxDQUFBLENBQVosSUFBQSxDQUFFLEVBQUYsRUFBTSxHQUFNLENBQUEsQ0FBQSxDQUFaLElBQUEsQ0FBTTtlQUVPLFdBQU4sUUFBQSxDQUFBOzs7RUFFTCxHQUFJLENBQUEsQ0FBQSxDQUFLLFFBQUEsQ0FBQSxDQUFBLENBQUgsQ0FBQTtBQUFBLElBQUksQ0FBSixRQUFBLENBQUEsRUFBQSxDQUFBLENBQUksQ0FBSixDQUFBLENBQUEsQ0FBUSxDQUFSLENBQUEsQ0FBQTtBQUFBLElBQUEsTUFBQSxDQUFjLFFBQUEsQ0FBQSxDQUFkLENBQUE7QUFBQSxNQUFBLE1BQUEsQ0FBaUIsQ0FBQSxFQUFqQixDQUFBO0FBQUEsSUFBQSxDQUFBLENBQUE7QUFBQSxFQUFBLENBQUEsQ0FBQTtFQUVOLFFBQUEsQ0FBQSxPQUFBLENBQUEsSUFBQTtJQUFHLElBQUMsQ0FBQSxZQUFBO0lBRUYsSUFBQyxDQUFBLE1BQU8sQ0FBQSxDQUFBLENBQUUsUUFBUSxDQUFDLGNBQWUsUUFBQTtJQUNsQyxJQUFDLENBQUEsTUFBTSxDQUFDLEtBQU0sQ0FBQSxDQUFBLENBQUUsSUFBQyxDQUFBLE1BQU0sQ0FBQyxNQUFPLENBQUEsQ0FBQSxDQUFFLElBQUMsQ0FBQTtJQUNsQyxJQUFDLENBQUEsR0FBSSxDQUFBLENBQUEsQ0FBRSxJQUFDLENBQUEsTUFBTSxDQUFDLFdBQVksSUFBQTtJQUMzQixJQUFDLENBQUEsRUFBRyxDQUFBLENBQUEsQ0FBRSxJQUFHOztZQUVYLFFBQU8sUUFBQSxDQUFBO1dBQ0wsSUFBQyxDQUFBLEdBQUcsQ0FBQyxVQUFXLEdBQUcsR0FBRyxJQUFDLENBQUEsTUFBTSxJQUFDLENBQUEsSUFBZDs7WUFFbEIsU0FBUyxRQUFBLENBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUE7SUFDUCxJQUFHLENBQUEsUUFBRyxDQUFBLEVBQUEsQ0FBSSxDQUFBLFFBQVY7YUFDRSxHQUFHLENBQUMsVUFBVyxJQUFDLENBQUEsUUFBUSxHQUFHLEdBQUcsR0FBRyxDQUFsQjtLQUNqQjthQUNFLEdBQUcsQ0FBQyxVQUFXLElBQUMsQ0FBQSxRQUFRLEdBQUcsQ0FBWjs7Ozs7Ozs7Ozs7QUNwQnJCLElBQUEsR0FBcUIsT0FBckIsQ0FBNkIsS0FBQSxDQUE3QixFQUFFLEVBQWlCLENBQUEsQ0FBQSxDQUFuQixJQUFBLENBQUUsRUFBRixFQUFNLEdBQWEsQ0FBQSxDQUFBLENBQW5CLElBQUEsQ0FBTSxHQUFOLEVBQVcsS0FBUSxDQUFBLENBQUEsQ0FBbkIsSUFBQSxDQUFXO21CQUdFLGVBQU4sUUFBQSxDQUFBOzs7RUFFTCxjQUFnQixDQUFBLENBQUEsQ0FBRSxRQUFBLENBQUEsQ0FBQTtXQUFPLFFBQUEsQ0FBQSxJQUFBOztNQUFHLGFBQUEsT0FBTyxhQUFBO2FBQVksRUFBRSxPQUFPLEtBQVA7OztFQUNqRCxjQUFnQixDQUFBLENBQUEsQ0FBRTtFQUVsQixRQUFBLENBQUEsV0FBQSxDQUFBOztTQWlEQTtTQUpBO1NBUkE7SUFwQ0UsSUFBQyxDQUFBLEtBQU0sQ0FBQSxDQUFBLENBQ0w7TUFBQSxTQUFTO01BQ1QsVUFBVTtNQUNWLFVBQVU7TUFDVixNQUFNO01BQ04sSUFBSTtNQUNKLElBQUk7TUFDSixNQUFNLENBQUMsR0FBRSxDQUFIO0lBTk47SUFRRixJQUFDLENBQUEsU0FBVSxDQUFBLENBQUEsQ0FDVDtNQUFBLE1BQU07TUFDTixNQUFNO0lBRE47SUFLRixRQUFRLENBQUMsaUJBQW1CLFdBQVUsUUFBQSxDQUFBLElBQUE7O01BQUcsYUFBQTtNQUN2QyxJQUFHLEtBQU0sQ0FBQSxHQUFBLENBQUcsRUFBWjtlQUNFLEtBQUMsQ0FBQSxjQUFjOztLQUZTO0lBSTVCLFFBQVEsQ0FBQyxpQkFBbUIsU0FBUSxRQUFBLENBQUEsSUFBQTs7TUFBRyxhQUFBO01BQ3JDLElBQUcsS0FBTSxDQUFBLEdBQUEsQ0FBRyxFQUFaO2VBQ0UsS0FBQyxDQUFBLGVBQWU7O0tBRlE7SUFJNUIsUUFBUSxDQUFDLGlCQUFtQixhQUFZLGVBQWdCLElBQUMsQ0FBQSxhQUFELENBQTVCO0lBQzVCLFFBQVEsQ0FBQyxpQkFBbUIsYUFBWSxlQUFnQixJQUFDLENBQUEsV0FBRCxDQUE1QjtJQUM1QixRQUFRLENBQUMsaUJBQW1CLFdBQVksZUFBZ0IsSUFBQyxDQUFBLGNBQUQsQ0FBNUI7SUFFNUIsUUFBUSxDQUFDLGlCQUFtQixjQUFhLGVBQWdCLElBQUMsQ0FBQSxhQUFELENBQTdCO0lBQzVCLFFBQVEsQ0FBQyxpQkFBbUIsYUFBYSxlQUFnQixJQUFDLENBQUEsV0FBRCxDQUE3QjtJQUM1QixRQUFRLENBQUMsaUJBQW1CLFlBQWEsZUFBZ0IsSUFBQyxDQUFBLGNBQUQsQ0FBN0I7O1lBRzlCLFdBQVUsUUFBQSxDQUFBLEtBQUE7O0lBQVc7SUFDbkIsSUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDLE9BQVY7cUJBQ0UsSUFBQyxDQUFBLFVBQVMsQ0FBQyxLQUFELGNBQVcsSUFBSDs7O1lBRXRCLGNBQWMsUUFBQSxDQUFBLENBQUEsRUFBQSxDQUFBOztJQUNaLElBQUcsSUFBQyxDQUFBLEtBQUssQ0FBQyxJQUFLLENBQUEsRUFBQSxDQUFHLElBQUMsQ0FBQSxLQUFLLENBQUMsUUFBekI7TUFDRSxJQUFDLENBQUEsS0FBSyxDQUFDLFFBQVMsQ0FBQSxDQUFBLENBQUU7TUFDbEIsSUFBQyxDQUFBLEtBQUssQ0FBQyxFQUFHLENBQUEsQ0FBQSxDQUFFLEVBQUcsQ0FBQSxDQUFBLENBQUUsQ0FBRSxDQUFBLENBQUEsQ0FBRSxJQUFDLENBQUEsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFEO01BQ2hDLElBQUMsQ0FBQSxLQUFLLENBQUMsRUFBRyxDQUFBLENBQUEsQ0FBRSxFQUFHLENBQUEsQ0FBQSxDQUFFLENBQUUsQ0FBQSxDQUFBLENBQUUsSUFBQyxDQUFBLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBRDtNQUNoQyxJQUFDLENBQUEsS0FBSyxDQUFDLElBQUssQ0FBQSxDQUFBLENBQUUsQ0FBQyxHQUFHLENBQUo7YUFDZCxJQUFDLENBQUEsU0FBUyxRQUFPLElBQUksRUFBWDs7O1lBRWQsZ0JBQWdCLFFBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQTtJQUNkLElBQUMsQ0FBQSxLQUFLLENBQUMsSUFBSyxDQUFBLENBQUEsQ0FBRTtXQUNkLElBQUMsQ0FBQSxLQUFLLENBQUMsSUFBSyxDQUFBLENBQUEsQ0FBRSxDQUFDLEdBQUcsQ0FBSjs7WUFFaEIsaUJBQWlCLFFBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQTs7SUFBQyxjQUFBLElBQUksSUFBQyxDQUFBLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBRDtJQUFJLGNBQUEsSUFBSSxJQUFDLENBQUEsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFEO0lBQ2xELE1BQU0sUUFBQSxDQUFBO2FBQUcsS0FBQyxDQUFBLEtBQUssQ0FBQyxRQUFTLENBQUEsQ0FBQSxDQUFFO0tBQXJCO0lBQ04sSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUFTLENBQUEsQ0FBQSxDQUFFO0lBQ2xCLElBQUMsQ0FBQSxLQUFLLENBQUMsSUFBSyxDQUFBLENBQUEsQ0FBRSxDQUFDLEdBQUcsQ0FBSjtJQUNkLElBQUMsQ0FBQSxLQUFLLENBQUMsSUFBSyxDQUFBLENBQUEsQ0FBRTtJQUNkLElBQUMsQ0FBQSxTQUFTLFFBQU8sR0FBRyxDQUFWO1dBQ1YsSUFBQyxDQUFBLFNBQVMsUUFBTyxJQUFDLENBQUEsS0FBUjs7WUFLWixnQkFBb0IsUUFBQSxDQUFBLENBQUE7V0FBTyxJQUFDLENBQUEsU0FBUyxDQUFDLElBQUssQ0FBQSxDQUFBLENBQUU7O1lBQzdDLG1CQUFvQixRQUFBLENBQUEsQ0FBQTtXQUFPLElBQUMsQ0FBQSxTQUFTLENBQUMsSUFBSyxDQUFBLENBQUEsQ0FBRTs7WUFFN0MsdUJBQXdCLFFBQUEsQ0FBQSxLQUFBO1dBQ3RCLElBQUMsQ0FBQSxLQUFLLENBQUMsT0FBUSxDQUFBLENBQUEsQ0FBRTs7Ozs7Ozs7Ozs7OztBQ3hFbkIsV0FBYyxDQUFBLENBQUEsQ0FBRSxPQUFsQixDQUEwQixnQkFBQSxDQUExQixDQUFFOzBCQUVXLHNCQUFOLFFBQUEsQ0FBQSxVQUFBOztZQUVMLFdBQVUsUUFBQSxDQUFBLFNBQUEsRUFBQSxTQUFBO1dBQ1IsUUFBUSxDQUFDLGlCQUFtQixXQUFzQixRQUFBLENBQVYsU0FBVSxFQUFHLElBQUMsQ0FBQSxRQUFKLENBQWEsU0FBQSxDQUFiLENBQXRCOzs7Ozs7RUFIQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNBaEMsTUFBTSxDQUFDLHFCQUF3QixDQUFBLENBQUEsQ0FBRSxPQUFPLE1BQUE7QUFDeEMsTUFBTSxDQUFDLG9CQUF3QixDQUFBLENBQUEsQ0FBRSxPQUFPLEtBQUE7QUFDeEMsTUFBTSxDQUFDLHVCQUF3QixDQUFBLENBQUEsQ0FBRSxPQUFPLFFBQUE7QUFFeEMsTUFBTSxDQUFDLGNBQXVCLENBQUEsQ0FBQSxDQUFFLE9BQU8sSUFBQTtBQUN2QyxNQUFNLENBQUMsb0JBQXVCLENBQUEsQ0FBQSxDQUFFLE9BQU8sZUFBQTtBQUN2QyxNQUFNLENBQUMsc0JBQXVCLENBQUEsQ0FBQSxDQUFFLE9BQU8sWUFBQTtBQUV2QyxNQUFNLENBQUMsS0FBTSxDQUFBLENBQUEsQ0FBRTtBQUNmLE1BQU0sQ0FBQyxLQUFNLENBQUEsQ0FBQSxDQUFFO0FBQ2YsTUFBTSxDQUFDLEtBQU0sQ0FBQSxDQUFBLENBQUU7QUFDZixNQUFNLENBQUMsS0FBTSxDQUFBLENBQUEsQ0FBRTtBQUVmLE1BQU0sQ0FBQyxVQUFhLENBQUEsQ0FBQSxDQUFFO0FBQ3RCLE1BQU0sQ0FBQyxZQUFhLENBQUEsQ0FBQSxDQUFFO0FBQ3RCLE1BQU0sQ0FBQyxXQUFhLENBQUEsQ0FBQSxDQUFFO0FBRXRCLE1BQU0sQ0FBQyxnQkFBbUIsQ0FBQSxDQUFBLENBQUU7QUFDNUIsTUFBTSxDQUFDLGtCQUFtQixDQUFBLENBQUEsQ0FBRTtBQUM1QixNQUFNLENBQUMsWUFBbUIsQ0FBQSxDQUFBLENBQUU7QUFDNUIsTUFBTSxDQUFDLFNBQW1CLENBQUEsQ0FBQSxDQUFFO0FBQzVCLE1BQU0sQ0FBQyxjQUFtQixDQUFBLENBQUEsQ0FBRTtBQUM1QixNQUFNLENBQUMsZ0JBQW1CLENBQUEsQ0FBQSxDQUFFO0FBQzVCLE1BQU0sQ0FBQyxlQUFtQixDQUFBLENBQUEsQ0FBRTtBQUM1QixNQUFNLENBQUMsaUJBQW1CLENBQUEsQ0FBQSxDQUFFO0FBQzVCLE1BQU0sQ0FBQyxZQUFtQixDQUFBLENBQUEsQ0FBRTtBQUM1QixNQUFNLENBQUMsYUFBbUIsQ0FBQSxDQUFBLENBQUU7QUFFNUIsTUFBTSxDQUFDLGdCQUFvQixDQUFBLENBQUEsQ0FBRSxPQUFPLE1BQUE7QUFDcEMsTUFBTSxDQUFDLGtCQUFvQixDQUFBLENBQUEsQ0FBRSxPQUFPLFFBQUE7QUFDcEMsTUFBTSxDQUFDLG1CQUFvQixDQUFBLENBQUEsQ0FBRSxPQUFPLFNBQUE7QUFDcEMsTUFBTSxDQUFDLGdCQUFvQixDQUFBLENBQUEsQ0FBRSxPQUFPLE1BQUE7QUFFcEMsTUFBTSxDQUFDLHVCQUF3QixDQUFBLENBQUEsQ0FBRSxPQUFPLFlBQUE7QUFDeEMsTUFBTSxDQUFDLG9CQUF3QixDQUFBLENBQUEsQ0FBRSxPQUFPLFNBQUE7Ozs7Ozs7OzttQkNwQzNCLGVBQU4sUUFBQSxDQUFBOzs7RUFFTCxRQUFBLENBQUEsV0FBQSxDQUFBO3NDQVNBO1NBQUE7SUFSRSxJQUFDLENBQUEsU0FBVSxDQUFBLENBQUEsQ0FDVDtNQUFBLFNBQVc7TUFDWCxPQUFXO01BQ1gsV0FBVztNQUNYLFNBQVc7SUFIWDtJQUtGLElBQUMsQ0FBQSxtQkFBbUI7O1lBRXRCLFdBQVUsUUFBQSxDQUFBLFNBQUEsRUFBQSxLQUFBO1dBQ1IsSUFBQyxDQUFBLFNBQVMsQ0FBQyxTQUFELENBQVksQ0FBQyxJQUFJLFFBQUEsQ0FBQSxFQUFBO2FBQUcsR0FBRyxLQUFBO0tBQU47O1lBRTdCLFdBQVUsUUFBQSxDQUFBLFNBQUE7V0FDUixJQUFDLENBQUEsTUFBTSxDQUFDLEdBQUcsV0FBWSxJQUFDLENBQUEsU0FBUyxTQUFBLENBQXRCOztZQUViLEtBQUksUUFBQSxDQUFBLEtBQUEsRUFBQSxDQUFBOztJQUNGLElBQUcsQ0FBQSxJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUMsQ0FBQSxTQUFTLENBQUMsS0FBRCxDQUFWLENBQUEsUUFBSDthQUNFLElBQUksQ0FBQyxLQUFLLENBQUE7S0FDWjthQUNFLE9BQU8sQ0FBQyxLQUFLLHVFQUFBLENBQUEsQ0FBQSxDQUFzRSxLQUFBLENBQUEsQ0FBQSxDQUFBLEdBQTNFOzs7WUFFWixxQkFBcUIsUUFBQSxDQUFBO0lBQ25CLElBQUMsQ0FBQSxTQUFTLFdBQWEsUUFBQSxDQUFBLEVBQUE7YUFBQSxFQUFBLENBQUM7S0FBZDtJQUNWLElBQUMsQ0FBQSxTQUFTLFNBQWEsUUFBQSxDQUFBLEVBQUE7YUFBQSxFQUFBLENBQUM7S0FBZDtJQUNWLElBQUMsQ0FBQSxTQUFTLGFBQWEsUUFBQSxDQUFBLEVBQUE7YUFBQSxFQUFBLENBQUM7S0FBZDtXQUNWLElBQUMsQ0FBQSxTQUFTLFdBQWEsUUFBQSxDQUFBLEVBQUE7YUFBQSxFQUFBLENBQUM7S0FBZDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDekJkLElBQUEsR0FBYyxPQUFkLENBQXNCLEtBQUEsQ0FBdEIsRUFBRSxFQUFVLENBQUEsQ0FBQSxDQUFaLElBQUEsQ0FBRSxFQUFGLEVBQU0sR0FBTSxDQUFBLENBQUEsQ0FBWixJQUFBLENBQU07QUFFTixRQUFRLFNBQUE7QUFFTixXQUF1QixDQUFBLENBQUEsQ0FBRSxPQUEzQixDQUFtQyxRQUFBLENBQW5DLENBQUU7QUFDQSxZQUF1QixDQUFBLENBQUEsQ0FBRSxPQUEzQixDQUFtQyxpQkFBQSxDQUFuQyxDQUFFO0FBQ0EsZUFBdUIsQ0FBQSxDQUFBLENBQUUsT0FBM0IsQ0FBbUMsb0JBQUEsQ0FBbkMsQ0FBRTtBQUNBLGtCQUF1QixDQUFBLENBQUEsQ0FBRSxPQUEzQixDQUFtQyx3QkFBQSxDQUFuQyxDQUFFO0FBQ0Esb0JBQXVCLENBQUEsQ0FBQSxDQUFFLE9BQTNCLENBQW1DLDBCQUFBLENBQW5DLENBQUU7QUFLRixNQUFNLENBQUMsY0FBZSxDQUFBLENBQUEsQ0FFcEI7RUFBQSxNQUFNLFFBQUEsQ0FBQTtJQUVKLGNBQWMsQ0FBQyxNQUFPLENBQUEsQ0FBQSxDQUFFLElBQUk7SUFFNUIsY0FBYyxDQUFDLElBQUssQ0FBQSxDQUFBLENBQUUsSUFBSTtJQUUxQixjQUFjLENBQUMsWUFBYSxDQUFBLENBQUEsS0FBTSxhQUFhO01BQUEsUUFBUSxjQUFjLENBQUM7SUFBdkIsQ0FBQTtXQUUvQyxjQUFjLENBQUMsV0FBWSxDQUFBLENBQUE7TUFDekIsUUFBTyxtQkFBUDtBQUFBLE1BQ0UsS0FBQSx1QkFBQTtBQUFBLGVBQTJCLElBQUk7TUFDL0IsS0FBQSxvQkFBQTtBQUFBLGVBQTJCLElBQUk7Ozs7QUFYckM7Ozs7Ozs7OztBQ2pCRixJQUFBLEdBQTJCLE9BQTNCLENBQW1DLEtBQUEsQ0FBbkMsRUFBRSxFQUF1QixDQUFBLENBQUEsQ0FBekIsSUFBQSxDQUFFLEVBQUYsRUFBTSxHQUFtQixDQUFBLENBQUEsQ0FBekIsSUFBQSxDQUFNLEdBQU4sRUFBVyxNQUFjLENBQUEsQ0FBQSxDQUF6QixJQUFBLENBQVcsTUFBWCxFQUFtQixHQUFNLENBQUEsQ0FBQSxDQUF6QixJQUFBLENBQW1CO21CQUVOLGVBQU4sUUFBQSxDQUFBOzs7RUFFTCxRQUFBLENBQUEsV0FBQSxDQUFBO0lBQ0UsSUFBQyxDQUFBLFNBQVUsQ0FBQSxDQUFBLENBQUU7SUFDYixJQUFDLENBQUEsYUFBZSxDQUFBLENBQUEsQ0FBRTs7WUFFcEIsU0FBUyxRQUFBLENBQUEsQ0FBQTtXQUNQLElBQUMsQ0FBQSxTQUFTLENBQUMsS0FBSyxDQUFBOztZQUVsQixXQUFVLFFBQUEsQ0FBQTtJQUNSLElBQUMsQ0FBQSxTQUFTLENBQUMsSUFBSSxNQUFBO1dBQ2YsSUFBQyxDQUFBLGFBQWUsQ0FBQSxDQUFBLENBQUU7O1lBRXBCLE9BQU0sUUFBQSxDQUFBO1dBQ0osSUFBQyxDQUFBLGFBQWE7O1lBRWhCLGVBQWUsUUFBQSxDQUFBO0lBQ2IsSUFBRyxDQUFJLElBQUMsQ0FBQSxhQUFSO01BQ0UsSUFBQyxDQUFBLGFBQWUsQ0FBQSxDQUFBLENBQUU7YUFDbEIsVUFBSSxNQUFLLFdBQUw7Ozs7Ozs7Ozs7Ozs7O0FDckJWLElBQUEsR0FBYyxPQUFkLENBQXNCLEtBQUEsQ0FBdEIsRUFBRSxFQUFVLENBQUEsQ0FBQSxDQUFaLElBQUEsQ0FBRSxFQUFGLEVBQU0sR0FBTSxDQUFBLENBQUEsQ0FBWixJQUFBLENBQU07b0JBR08sZ0JBQU4sUUFBQSxDQUFBOzs7RUFFTCxRQUFBLENBQUEsWUFBQSxDQUFBLElBQUE7O0lBQUcsSUFBQyxDQUFBLGNBQUE7SUFFRixJQUFDLENBQUEsWUFBYyxDQUFBLENBQUEsQ0FBRTtJQUVqQixJQUFDLENBQUEsTUFBTSxDQUFDLEdBQUcsaUJBQWdCLFFBQUEsQ0FBQSxJQUFBO2FBQ3pCLE9BQU8sQ0FBQyxLQUFLLDZDQUFBLENBQUEsQ0FBQSxDQUE0QyxJQUFBLENBQUEsQ0FBQSxDQUFBLFVBQWpEO0tBREM7SUFHWCxJQUFDLENBQUEsTUFBTSxDQUFDLEdBQUcsaUJBQWdCLFFBQUEsQ0FBQSxJQUFBLEVBQUEsSUFBQTtNQUN6QixPQUFPLENBQUMsS0FBSyw2Q0FBQSxDQUFBLENBQUEsQ0FBNEMsSUFBQSxDQUFBLENBQUEsQ0FBQSxXQUFqRDtNQUNSLEtBQUMsQ0FBQSxhQUFjLElBQUksQ0FBQyxNQUFNLElBQUEsQ0FBWDthQUNmLEtBQUMsQ0FBQSxZQUFjLENBQUEsQ0FBQSxDQUFFO0tBSFI7O1lBS2IsT0FBTSxRQUFBLENBQUEsSUFBQSxFQUFBLFNBQUE7O0lBQ0osZUFBaUIsQ0FBQSxDQUFBLENBQUUsU0FBVSxDQUFDLFFBQVEsV0FBVyxFQUFYO0lBQ3RDLE9BQU8sQ0FBQyxLQUFLLDJCQUEyQixlQUEzQjtXQUNiLElBQUMsQ0FBQSxNQUFNLENBQUMsS0FBSyxRQUFPLE1BQU0sZUFBYjs7WUFFZixPQUFNLFFBQUEsQ0FBQSxJQUFBLEVBQUEsQ0FBQTtJQUNKLElBQUMsQ0FBQSxNQUFNLENBQUMsS0FBSyxRQUFPLElBQVA7V0FDYixJQUFDLENBQUEsWUFBYyxDQUFBLENBQUEsQ0FBRTs7Ozs7Ozs7OztBQ3hCckIsSUFBQSxHQUFjLE9BQWQsQ0FBc0IsS0FBQSxDQUF0QixFQUFFLEVBQVUsQ0FBQSxDQUFBLENBQVosSUFBQSxDQUFFLEVBQUYsRUFBTSxHQUFNLENBQUEsQ0FBQSxDQUFaLElBQUEsQ0FBTTt1QkFNTyxtQkFBTixRQUFBLENBQUE7OztFQUVMLFFBQUEsQ0FBQSxlQUFBLENBQUE7SUFDRSxJQUFDLENBQUEsTUFBTyxDQUFBLENBQUEsQ0FBRSxHQUFHLHlCQUFEOztZQUVkLFlBQVksUUFBQSxDQUFBO1dBQ1YsSUFBQyxDQUFBOztZQUVILEtBQU0sUUFBQSxDQUFBOztJQUFJO21CQUFTLElBQUMsQ0FBQSxPQUFNLENBQUMsZUFBTSxJQUFIOztZQUM5QixPQUFNLFFBQUEsQ0FBQTs7SUFBSTttQkFBUyxJQUFDLENBQUEsT0FBTSxDQUFDLGlCQUFRLElBQUg7O1lBRWhDLGNBQWMsUUFBQSxDQUFBLEdBQUE7O0lBQVM7bUJBQ3JCLElBQUMsQ0FBQSxPQUFNLENBQUMsa0JBQUssd0JBQVEsTUFBUjs7Ozs7Ozs7OztBQ2xCZixXQUFjLENBQUEsQ0FBQSxDQUFFLE9BQWxCLENBQTBCLGdCQUFBLENBQTFCLENBQUU7NEJBRVcsd0JBQU4sUUFBQSxDQUFBLFVBQUE7O0VBRUwsUUFBQSxDQUFBLG9CQUFBLENBQUE7c0NBTUE7U0FBQTtJQUxFLElBQUMsQ0FBQSxNQUFPLENBQUEsQ0FBQSxDQUFFLGNBQWMsQ0FBQyxNQUFNLENBQUMsVUFBVTtJQUMxQyxvQkFBQSxpQ0FBTTtJQUNOLElBQUMsQ0FBQSxNQUFNLENBQUMsR0FBRyxXQUFhLFFBQUEsQ0FBQTthQUFHLE9BQU8sQ0FBQyxLQUFLLFNBQUE7S0FBN0I7SUFDWCxJQUFDLENBQUEsTUFBTSxDQUFDLEdBQUcsY0FBYSxRQUFBLENBQUE7YUFBRyxPQUFPLENBQUMsS0FBSyxZQUFBO0tBQTdCOztZQUViLFdBQVUsUUFBQSxDQUFBLFNBQUEsRUFBQSxLQUFBO1dBQ1IsSUFBQyxDQUFBLFNBQVMsQ0FBQyxTQUFELENBQVksQ0FBQyxJQUFJLFFBQUEsQ0FBQSxFQUFBO2FBQUcsR0FBRyxLQUFBO0tBQU47OztFQVRHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0ZsQyxJQUFBLEdBQXVCLE9BQXZCLENBQStCLEtBQUEsQ0FBL0IsRUFBRSxFQUFtQixDQUFBLENBQUEsQ0FBckIsSUFBQSxDQUFFLEVBQUYsRUFBTSxHQUFlLENBQUEsQ0FBQSxDQUFyQixJQUFBLENBQU0sR0FBTixFQUFXLEVBQVUsQ0FBQSxDQUFBLENBQXJCLElBQUEsQ0FBVyxFQUFYLEVBQWUsR0FBTSxDQUFBLENBQUEsQ0FBckIsSUFBQSxDQUFlO0FBRWYsUUFBUSxRQUFBO0FBQ1IsUUFBUSxRQUFBO0FBRU4sSUFBZSxDQUFBLENBQUEsQ0FBRSxPQUFuQixDQUEyQixRQUFBLENBQTNCLENBQUU7QUFDQSxPQUFlLENBQUEsQ0FBQSxDQUFFLE9BQW5CLENBQTJCLHdCQUFBLENBQTNCLENBQUU7QUFDQSxLQUFlLENBQUEsQ0FBQSxDQUFFLE9BQW5CLENBQTJCLFNBQUEsQ0FBM0IsQ0FBRTtBQUNBLFNBQWUsQ0FBQSxDQUFBLENBQUUsT0FBbkIsQ0FBMkIsYUFBQSxDQUEzQixDQUFFO0FBQ0EsVUFBZSxDQUFBLENBQUEsQ0FBRSxPQUFuQixDQUEyQixlQUFBLENBQTNCLENBQUU7QUFDQSxXQUFlLENBQUEsQ0FBQSxDQUFFLE9BQW5CLENBQTJCLGdCQUFBLENBQTNCLENBQUU7QUFDQSxZQUFlLENBQUEsQ0FBQSxDQUFFLE9BQW5CLENBQTJCLGlCQUFBLENBQTNCLENBQUU7QUFFQSxrQkFBdUIsQ0FBQSxDQUFBLENBQUUsT0FBM0IsQ0FBbUMsYUFBQSxDQUFuQyxDQUFFO0FBS0YsY0FBYyxDQUFDLEtBQUk7QUFLbkIsT0FBUyxDQUFBLENBQUEsQ0FBRTtBQUNYLFNBQVUsQ0FBQSxDQUFBLENBQUUsSUFBSTtBQUVoQixLQUFNLENBQUEsQ0FBQSxDQUNEO0VBQ0QsTUFBSSxNQUFNLG1CQUFvQixDQUFwQjtFQUNaLEVBQ0UsSUFBSTtBQUtSLElBQUssQ0FBQSxDQUFBLENBQUUsUUFBQSxDQUFBLElBQUE7O0VBQ0wsTUFBQSxDQUNFLENBREY7QUFBQSxJQUNFLElBREYsRUFDUSxJQUFJLENBQUEsV0FBRSxDQUFBLFdBRGQsQ0FBQTtBQUFBLElBRUUsSUFGRixFQUVRLElBQUksQ0FBQyxHQUFHLENBQUMsU0FGakIsQ0FFMEIsQ0FGMUIsQ0FBQTtBQUFBLElBR0UsSUFIRixFQUdRLElBQUksQ0FBQyxTQUhiLENBR3NCLENBSHRCLENBQUE7QUFBQSxJQUlFLFFBSkYsRUFBQSxDQUFBLFFBQUEsQ0FBQSxDQUFBLENBQUE7QUFBQSxVQUFBLEVBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLFFBQUEsR0FBQSxFQUFBO0FBQUEsTUFLSSxLQUxKLDhDQUFBLEVBQUEsU0FBQSxNQUtJLEdBTEo7QUFBQSxRQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsRUFBQSxDQUFBO0FBQUEsUUFLUSxLQUxSLENBQUEsQ0FBQSxDQUFBLFFBQUEsQ0FBQTtBQUFBLFFBTU0sSUFBRyxLQUFLLENBQUMsSUFBVCxFQU5OO0FBQUEsVUFBQSxhQUFBLENBT1EsQ0FQUjtBQUFBLFlBT1EsSUFQUixFQU9jLElBUGQsQ0FPbUIsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBaEIsQ0FQbkIsQ0FBQTtBQUFBLFlBUVEsV0FSUixFQVFzQixLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQVJ0QztBQUFBLFVBT1EsQ0FQUixDQUFBLENBQUE7QUFBQSxTQVNNLE1BVE47QUFBQSxVQUFBLGFBQUEsQ0FVUSxJQVZSLENBQUEsQ0FBQTtBQUFBLFNBQUE7QUFBQSxNQUFBLENBQUE7QUFBQSxhQUFBLFFBQUEsQ0FBQTtBQUFBLElBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQTtBQUFBLEVBQ0UsQ0FERjs7QUFlRixjQUFjLENBQUMsWUFBWSxDQUFDLEtBQUssY0FBYSxRQUFBLENBQUEsSUFBQTs7RUFFNUMsTUFBQTtFQUVBLE1BQU8sQ0FBQSxDQUFBLENBQ0w7SUFBQSxRQUFRO0lBQ1IsT0FBTztJQUNQLE9BQU87RUFGUDtFQUlGLE9BQU8sQ0FBQyxLQUFhLFVBQUUsSUFBSSxDQUFDLFVBQVUsTUFBTSxNQUFNLENBQVosQ0FBakI7RUFFckIsUUFBUyxDQUFBLENBQUEsQ0FBRSxRQUFBLENBQUEsUUFBQSxFQUFBLE1BQUE7O0lBQ1QsSUFBQSxHQUEwQixZQUExQixDQUF1QyxRQUFTLENBQUMsSUFBVixDQUF2QyxFQUFFLFNBQXNCLENBQUEsQ0FBQSxDQUF4QixJQUFBLENBQUEsQ0FBQSxDQUFBLEVBQWEsUUFBVyxDQUFBLENBQUEsQ0FBeEIsSUFBQSxDQUFBLENBQUE7SUFDQSxJQUFLLENBQUEsQ0FBQSxDQUFFLFNBQVMsQ0FBQyxZQUFZLFFBQVMsQ0FBQyxLQUFWO0lBQzdCLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxVQUFZLENBQUEsQ0FBQSxLQUFNLFdBQVc7TUFBQSxTQUFTO01BQU0sU0FBVSxTQUFTLElBQUE7TUFBTyxLQUFLLEdBQUcsR0FBRSxDQUFGO0lBQWpELENBQUEsQ0FBN0I7SUFFbEIsSUFBRyxRQUFTLENBQUMsSUFBSyxDQUFBLEdBQUEsQ0FBRyxRQUFyQjtNQUNFLE1BQU0sQ0FBQyxNQUFPLENBQUEsQ0FBQSxDQUFHOztJQUVuQixzRUFBQTs7TUFBSTtVQUFnQyxDQUFBO1FBQ2xDLEtBQU0sQ0FBQSxDQUFBLENBQUUsU0FBUyxDQUFDLENBQUMsSUFBRjtRQUNqQixNQUFNLENBQUMsS0FBSyxDQUFDLFNBQVMsWUFBWSxLQUFLO1VBQUEsTUFBTyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLFdBQUY7VUFBaUIsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQTtRQUE5RCxDQUFBLENBQVQsQ0FBWjs7O0lBRXBCLE1BQUEsQ0FBTyxJQUFQOztTQUVGLFNBQVMsSUFBQTtDQXpCc0I7QUE4QmpDLElBQUssQ0FBQSxDQUFBLENBQUUsUUFBQSxDQUFBO0VBQ0wsU0FBUyxDQUFDLE1BQUs7U0FDZixLQUFLLENBQUMsU0FBVSxTQUFBOztBQUVsQixNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxPQUFRLFFBQUEsQ0FBQTtFQUNqQyxLQUFLLENBQUMsS0FBSTtTQUNWLEtBQUk7Q0FGNkI7QUFPbkMsU0FBUyxDQUFDLFFBQVEsUUFBUSxDQUFDLElBQVQ7QUFDbEIsS0FBSTtBQVlKLE9BQVEsQ0FBQSxDQUFBLENBQUUsSUFBSTtBQUNkLE9BQU8sQ0FBQyxpQkFBbUIsSUFBQTtBQUMzQixPQUFPLENBQUMsY0FBZ0IsUUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBO01BQ3RCO0lBQUEsT0FBUyxDQUFDLE9BQVEsR0FBRyxJQUFJLEVBQUosQ0FBSDs7U0FDbEIsS0FBSTtDQUZrQjtBQU94QixRQUFRLENBQUMsaUJBQW1CLGFBQVksUUFBQSxDQUFBLElBQUE7O0VBQUcsYUFBQSxPQUFPLGFBQUE7RUFDaEQsSUFBd0IsQ0FBckIsT0FBcUIsUUFBQSxDQUFyQixFQUFBLE9BQVMsQ0FBQyxLQUFLLENBQUMsSUFBSyxDQUFBLEVBQUEsTUFBQSxDQUFBLENBQUEsR0FBQSxDQUFHLHVCQUEzQjtJQUNFLE1BQUE7O0VBRUYsUUFBVSxDQUFBLENBQUEsQ0FBRTtFQUVaLGdFQUFBO0lBQUk7SUFDRixJQUFHLElBQUksQ0FBQyxjQUFSLENBQXdCLEVBQXhCLENBQTJCLEtBQTNCLEVBQWtDLEtBQVAsQ0FBSCxDQUF4QjtNQUNFLElBQUksQ0FBQyxRQUFTLG9CQUFBO01BQ2QsUUFBVSxDQUFBLENBQUEsQ0FBRztNQUNiLE9BQVMsQ0FBQSxDQUFBLENBQUc7S0FDZDtNQUNFLElBQUksQ0FBQyxRQUFTLHFCQUFBOzs7RUFFbEIsSUFBRyxDQUFJLFFBQVA7SUFDRSxPQUFTLENBQUEsQ0FBQSxDQUFHOztTQUVkLEtBQUk7Q0FqQnNCO0FBbUI1QixRQUFRLENBQUMsaUJBQW1CLGFBQVksUUFBQSxDQUFBO01BQ3RDO0lBQUEsT0FBUyxDQUFDLFFBQVMsdUJBQUE7O1NBQ25CLEtBQUk7Q0FGc0I7QUFJNUIsUUFBUSxDQUFDLGlCQUFtQixXQUFVLFFBQUEsQ0FBQTtNQUNwQztJQUFBLE9BQVMsQ0FBQyxRQUFTLG9CQUFBOztTQUNuQixLQUFJO0NBRnNCOzs7Ozs7Ozs7QUN6STVCLElBQUEsR0FBcUMsT0FBckMsQ0FBNkMsS0FBQSxDQUE3QyxFQUFFLEVBQWlDLENBQUEsQ0FBQSxDQUFuQyxJQUFBLENBQUUsRUFBRixFQUFNLEdBQTZCLENBQUEsQ0FBQSxDQUFuQyxJQUFBLENBQU0sR0FBTixFQUFXLEdBQXdCLENBQUEsQ0FBQSxDQUFuQyxJQUFBLENBQVcsR0FBWCxFQUFnQixHQUFtQixDQUFBLENBQUEsQ0FBbkMsSUFBQSxDQUFnQixHQUFoQixFQUFxQixVQUFjLENBQUEsQ0FBQSxDQUFuQyxJQUFBLENBQXFCO0FBRXJCLGVBQWlCLENBQUEsQ0FBQSxDQUFFLFFBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQTtFQUNqQixJQUFHLENBQUksQ0FBUDtJQUNFLE9BQU8sQ0FBQyxLQUE0Qyx1Q0FBQTtXQUNwRDtHQUNGLE1BQUEsSUFBUSxDQUFJLENBQVo7SUFDRSxPQUFPLENBQUMsS0FBMEMscUNBQUE7V0FDbEQ7R0FDRixNQUFBLElBQVEsQ0FBQyxDQUFDLElBQUssQ0FBQSxHQUFBLENBQUssQ0FBQyxDQUFDLElBQXRCO0lBQ0UsT0FBTyxDQUFDLEtBQStELDREQUFFLENBQUMsQ0FBQyxNQUFhLFNBQUUsQ0FBQyxDQUFDLElBQXJCO1dBQ3ZFO0dBQ0Y7V0FDRTs7O1lBR1MsUUFBTixRQUFBLENBQUE7OztFQUVMLFFBQUEsQ0FBQSxJQUFBLENBQUEsSUFBQTs7SUFBRyxJQUFDLENBQUEsWUFBQSxNQUFNLElBQUMsQ0FBQSxVQUFBO2dCQUVULElBQUMsQ0FBQTtVQUFLLENBQUMsV0FBWSxJQUFBOztpQkFDbkIsSUFBQyxDQUFBO1dBQUcsQ0FBQyxXQUFZLElBQUE7O0lBQ2pCLElBQUMsQ0FBQSxNQUFPLENBQUEsQ0FBQSxDQUFFLGdCQUFpQixJQUFDLENBQUEsTUFBTSxJQUFDLENBQUEsRUFBUjtJQUMzQixJQUFDLENBQUEsY0FBZ0IsQ0FBQSxDQUFBLENBQUU7O1lBRXJCLFNBQVcsUUFBQSxDQUFBO0lBQUcsSUFBRyxJQUFDLENBQUEsTUFBTyxDQUFBLEdBQUEsQ0FBRyxjQUFkO2FBQWtDLElBQUMsQ0FBQSxFQUFFLENBQUMsS0FBSTtLQUFJO2FBQUs7OztZQUNqRSxXQUFXLFFBQUEsQ0FBQTtJQUFHLElBQUcsSUFBQyxDQUFBLE1BQU8sQ0FBQSxHQUFBLENBQUcsY0FBZDthQUFrQyxJQUFDLENBQUEsSUFBSSxDQUFDLEtBQUk7S0FBRTthQUFLOzs7WUFFakUsc0JBQXVCLFFBQUEsQ0FBQTtXQUNyQixJQUFDLENBQUEsY0FBZ0IsQ0FBQSxDQUFBO01BQ2YsUUFBTyxJQUFDLENBQUEsSUFBSSxDQUFDLElBQWI7QUFBQSxNQUNFLEtBQUEsZ0JBQUE7QUFBQSxRQUF3QixJQUFHLElBQUMsQ0FBQSxJQUFJLENBQUMsSUFBVCxDQUFhLENBQWI7aUJBQW9CO1NBQUU7aUJBQUs7OztNQUNuRCxLQUFBLG1CQUFBO0FBQUEsUUFBd0IsSUFBRyxJQUFDLENBQUEsSUFBSSxDQUFDLElBQVQsQ0FBYSxDQUFiO2lCQUFvQjtTQUFFO2lCQUFLOzs7TUFDbkQsS0FBQSxrQkFBQTtBQUFBLGVBQXVCLElBQUMsQ0FBQSxJQUFJLENBQUMsS0FBSTs7ZUFDcEI7Ozs7Ozs7Ozs7OztBQ2hDbkIsTUFBYyxDQUFBLENBQUEsQ0FBRSxPQUFsQixDQUEwQixVQUFBLENBQTFCLENBQUU7QUFDQSxPQUFjLENBQUEsQ0FBQSxDQUFFLE9BQWxCLENBQTBCLGFBQUEsQ0FBMUIsQ0FBRTtBQUNBLE9BQWMsQ0FBQSxDQUFBLENBQUUsT0FBbEIsQ0FBMEIsYUFBQSxDQUExQixDQUFFO0FBQ0EsU0FBYyxDQUFBLENBQUEsQ0FBRSxPQUFsQixDQUEwQixlQUFBLENBQTFCLENBQUU7QUFDQSxTQUFjLENBQUEsQ0FBQSxDQUFFLE9BQWxCLENBQTBCLGVBQUEsQ0FBMUIsQ0FBRTtBQUNBLFdBQWMsQ0FBQSxDQUFBLENBQUUsT0FBbEIsQ0FBMEIsaUJBQUEsQ0FBMUIsQ0FBRTtBQUVBLE1BQWEsQ0FBQSxDQUFBLENBQUUsT0FBakIsQ0FBeUIsdUJBQUEsQ0FBekIsQ0FBRTtBQUNBLE1BQWEsQ0FBQSxDQUFBLENBQUUsT0FBakIsQ0FBeUIsdUJBQUEsQ0FBekIsQ0FBRTtBQUNBLFFBQWEsQ0FBQSxDQUFBLENBQUUsT0FBakIsQ0FBeUIseUJBQUEsQ0FBekIsQ0FBRTtBQUNBLFNBQWEsQ0FBQSxDQUFBLENBQUUsT0FBakIsQ0FBeUIsMEJBQUEsQ0FBekIsQ0FBRTtBQUNBLFVBQWEsQ0FBQSxDQUFBLENBQUUsT0FBakIsQ0FBeUIsMkJBQUEsQ0FBekIsQ0FBRTtBQUNBLFFBQWEsQ0FBQSxDQUFBLENBQUUsT0FBakIsQ0FBeUIseUJBQUEsQ0FBekIsQ0FBRTtBQUNBLE9BQWEsQ0FBQSxDQUFBLENBQUUsT0FBakIsQ0FBeUIsd0JBQUEsQ0FBekIsQ0FBRTtvQkFLSyxZQUFhLENBQUEsQ0FBQSxDQUFFLFFBQUEsQ0FBQSxRQUFBO0VBQ3BCLFFBQU8sUUFBUDtBQUFBLEVBQ0UsS0FBQSxRQUFBO0FBQUEsV0FBVyxDQUFFLFFBQVEsU0FBVjtFQUNYLEtBQUEsU0FBQTtBQUFBLFdBQVksQ0FBRSxTQUFTLE1BQVg7RUFDWixLQUFBLGFBQUE7QUFBQSxXQUFnQixDQUFFLGFBQWEsVUFBZjtFQUNoQixLQUFBLFdBQUE7QUFBQSxXQUFjLENBQUUsV0FBVyxRQUFiO0VBQ2QsS0FBQSxXQUFBO0FBQUEsV0FBYyxDQUFFLFdBQVcsUUFBYjtFQUNkLEtBQUEsU0FBQTtBQUFBLFdBQVksQ0FBRSxTQUFTLE1BQVg7O1dBQ0MsT0FBTyxDQUFDLEtBQUssMENBQUEsQ0FBQSxDQUFBLENBQXlDLFFBQUEsQ0FBQSxDQUFBLENBQUEsR0FBOUM7Ozs7Ozs7OztBQzVCekIsSUFBQSxHQUFjLE9BQWQsQ0FBc0IsS0FBQSxDQUF0QixFQUFFLEVBQVUsQ0FBQSxDQUFBLENBQVosSUFBQSxDQUFFLEVBQUYsRUFBTSxHQUFNLENBQUEsQ0FBQSxDQUFaLElBQUEsQ0FBTTtBQUVOLElBQUEsR0FBMEIsT0FBMUIsQ0FBa0MsYUFBQSxDQUFsQyxFQUFFLFFBQXNCLENBQUEsQ0FBQSxDQUF4QixJQUFBLENBQUUsUUFBRixFQUFZLFNBQVksQ0FBQSxDQUFBLENBQXhCLElBQUEsQ0FBWTtZQUVDLFFBQU4sUUFBQSxDQUFBOzs7RUFFTCxRQUFBLENBQUEsSUFBQSxDQUFBO0lBQ0UsSUFBQyxDQUFBLEtBQVMsQ0FBQSxDQUFBLENBQUU7SUFDWixJQUFDLENBQUEsUUFBUyxDQUFBLENBQUEsQ0FBRTtJQUNaLElBQUMsQ0FBQSxNQUFTLENBQUEsQ0FBQSxDQUFFO0lBQ1osSUFBQyxDQUFBLE9BQVMsQ0FBQSxDQUFBLENBQUU7O1lBRWQsTUFBSyxRQUFBLENBQUEsS0FBQTtJQUNILElBQUMsQ0FBQSxLQUFNLENBQUEsQ0FBQSxDQUFFO1dBQ1QsSUFBQyxDQUFBLFNBQVMsS0FBQTs7WUFTWixnQkFBaUIsUUFBQSxDQUFBLENBQUE7V0FDZixJQUFDLENBQUEsUUFBUyxDQUFBLENBQUEsQ0FBRTs7WUFFZCxnQkFBZ0IsUUFBQSxDQUFBLElBQUE7O0lBQUcseUJBQUE7O01BQWEsRUFBQSxJQUFJLDBCQUFBOztNQUFjLEVBQUE7SUFDaEQsSUFBQyxDQUFBLE1BQVEsQ0FBQSxDQUFBLEtBQU0sU0FBUztNQUFFLE1BQU07TUFBWSxPQUFPO0lBQTNCLENBQUE7V0FDeEIsSUFBQyxDQUFBLE9BQVEsQ0FBQSxDQUFBLEtBQU0sVUFBVTtNQUFFLE1BQU07TUFBYSxPQUFPO0lBQTVCLENBQUE7O1lBRTNCLFlBQVcsUUFBQSxDQUFBO1dBQ1QsT0FBTyxDQUFDLEtBQUssSUFBSSxDQUFBLFdBQUUsQ0FBQSxhQUFjLDRCQUFwQjs7RUFFZixJQUFDLENBQUEsV0FBWSxDQUFBLENBQUEsQ0FBRSxRQUFBLENBQUEsTUFBQTtlQUFnQixLQUFLLE1BQUE7Ozs7Ozs7Ozs7QUNqQ3RDLElBQUEsR0FBYyxPQUFkLENBQXNCLEtBQUEsQ0FBdEIsRUFBRSxFQUFVLENBQUEsQ0FBQSxDQUFaLElBQUEsQ0FBRSxFQUFGLEVBQU0sR0FBTSxDQUFBLENBQUEsQ0FBWixJQUFBLENBQU07QUFFSixJQUFPLENBQUEsQ0FBQSxDQUFFLE9BQVgsQ0FBbUIsUUFBQSxDQUFuQixDQUFFO0FBQ0EsTUFBUyxDQUFBLENBQUEsQ0FBRSxPQUFiLENBQXFCLFdBQUEsQ0FBckIsQ0FBRTttQkFRVyxlQUFOLFFBQUEsQ0FBQSxVQUFBOztFQUVMLFNBQVksQ0FBQSxDQUFBLENBQUUsQ0FBRTtJQUFFLE1BQU07SUFBcUIsUUFBUyxRQUFBLENBQUE7YUFBRyxJQUFDLENBQUEsSUFBSSxJQUFBOztFQUE5QyxDQUFGO0VBQ2QsVUFBWSxDQUFBLENBQUEsQ0FBRSxDQUFFO0lBQUUsTUFBTTtJQUFxQixRQUFTLFFBQUEsQ0FBQTthQUFHLElBQUMsQ0FBQSxPQUFPOztFQUFqRCxDQUFGO0VBRWQsUUFBQSxDQUFBLFdBQUEsQ0FBQSxJQUFBO0lBQUcsSUFBQyxDQUFBLGNBQUE7SUFDRixXQUFBLGlDQUFNO0lBRU4sSUFBQyxDQUFBLGNBQWU7TUFBRSxXQUFBO01BQVksWUFBQTtJQUFkLENBQUE7SUFDaEIsSUFBQyxDQUFBLElBQUksSUFBQTs7WUFFUCxTQUFTLFFBQUEsQ0FBQTtJQUNQLElBQUcsSUFBQyxDQUFBLE1BQU0sQ0FBQyxHQUFSLENBQVksQ0FBRCxDQUFHLENBQUMsSUFBZixRQUFIO01BQ0UsSUFBQyxDQUFBLElBQUksSUFBQyxDQUFBLE1BQU0sQ0FBQyxJQUFJLENBQUQsQ0FBRyxDQUFDLEtBQUksQ0FBbkI7O0lBQ1AsSUFBRyxJQUFDLENBQUEsS0FBSjthQUFlLElBQUMsQ0FBQTtLQUFPO2FBQUs7OztZQUU5QixZQUFXLFFBQUEsQ0FBQTtXQUNUO01BQUEsUUFBUSxJQUFDLENBQUEsTUFBTSxDQUFDLFVBQVM7SUFBekI7O0VBRUYsV0FBQyxDQUFBLFdBQVksQ0FBQSxDQUFBLENBQUUsUUFBQSxDQUFBLE1BQUE7ZUFDVCxZQUFZO01BQUEsWUFBWSxPQUFPLE1BQU0sQ0FBQyxNQUFQO0lBQW5CLENBQUE7OztFQXBCSzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDWHpCLElBQUEsR0FBYyxPQUFkLENBQXNCLEtBQUEsQ0FBdEIsRUFBRSxFQUFVLENBQUEsQ0FBQSxDQUFaLElBQUEsQ0FBRSxFQUFGLEVBQU0sR0FBTSxDQUFBLENBQUEsQ0FBWixJQUFBLENBQU07QUFFSixJQUFPLENBQUEsQ0FBQSxDQUFFLE9BQVgsQ0FBbUIsUUFBQSxDQUFuQixDQUFFO0FBQ0EsTUFBVSxDQUFBLENBQUEsQ0FBRSxPQUFkLENBQXNCLFNBQUEsQ0FBdEIsQ0FBRTtlQUdXLFdBQU4sUUFBQSxDQUFBLFVBQUE7O0VBRUwsVUFBWSxDQUFBLENBQUEsQ0FBRSxDQUFFO0lBQUUsTUFBTTtJQUFrQixRQUFTLFFBQUEsQ0FBQTthQUFHLElBQUMsQ0FBQTs7RUFBdkMsQ0FBRjtFQUVkLFFBQUEsQ0FBQSxPQUFBLENBQUEsSUFBQTs7SUFBRyxJQUFDLENBQUEsZUFBQTtJQUNGLE9BQUEsaUNBQU07SUFFTixJQUFDLENBQUEsY0FBZTtNQUFFLFlBQUE7SUFBRixDQUFBO0lBRWhCLGNBQWMsQ0FBQyxXQUFXLENBQUMsR0FBRyxXQUFVLFFBQUEsQ0FBQSxFQUFBO01BQUcsSUFBRyxLQUFDLENBQUEsT0FBUSxDQUFBLEdBQUEsQ0FBRyxFQUFmO2VBQXVCLEtBQUMsQ0FBQSxJQUFJLElBQUE7O0tBQXpDO0lBQzlCLGNBQWMsQ0FBQyxXQUFXLENBQUMsR0FBRyxTQUFVLFFBQUEsQ0FBQSxFQUFBO01BQUcsSUFBRyxLQUFDLENBQUEsT0FBUSxDQUFBLEdBQUEsQ0FBRyxFQUFmO2VBQXVCLEtBQUMsQ0FBQSxJQUFJLEtBQUE7O0tBQXpDOztZQUVoQyxNQUFLLFFBQUEsQ0FBQTtJQUNILGNBQWMsQ0FBQyxJQUFJLENBQUMsS0FBSTtXQUN4QixvQkFBQSxDQUZGLHlCQUVROztZQUVSLFlBQVcsUUFBQSxDQUFBO1dBQ1Q7TUFBQSxTQUFTLElBQUMsQ0FBQTtJQUFWOzs7RUFqQmlCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNOckIsSUFBQSxHQUF5QyxPQUF6QyxDQUFpRCxLQUFBLENBQWpELEVBQUUsRUFBcUMsQ0FBQSxDQUFBLENBQXZDLElBQUEsQ0FBRSxFQUFGLEVBQU0sR0FBaUMsQ0FBQSxDQUFBLENBQXZDLElBQUEsQ0FBTSxHQUFOLEVBQVcsR0FBNEIsQ0FBQSxDQUFBLENBQXZDLElBQUEsQ0FBVyxHQUFYLEVBQWdCLElBQXVCLENBQUEsQ0FBQSxDQUF2QyxJQUFBLENBQWdCLElBQWhCLEVBQXNCLGFBQWlCLENBQUEsQ0FBQSxDQUF2QyxJQUFBLENBQXNCO0FBRXBCLElBQU8sQ0FBQSxDQUFBLENBQUUsT0FBWCxDQUFtQixRQUFBLENBQW5CLENBQUU7ZUFHVyxXQUFOLFFBQUEsQ0FBQSxVQUFBOztFQUVMLFNBQVUsQ0FBQSxDQUFBLENBQUU7RUFFWixVQUFZLENBQUEsQ0FBQSxDQUFFO0lBQ1o7TUFBRSxNQUFNO01BQW9CLFFBQVMsUUFBQSxDQUFBO2VBQUcsSUFBQyxDQUFBOztJQUF6QyxHQUNBO01BQUUsTUFBTTtNQUFvQixRQUFTLFFBQUEsQ0FBQTtlQUFHLElBQUMsQ0FBQTs7SUFBekM7RUFGWTtFQUtkLFFBQUEsQ0FBQSxPQUFBLENBQUEsSUFBQTs7SUFBRyxJQUFDLENBQUEseUJBQUEsMEJBQVksRUFBQTtJQUNkLE9BQUEsaUNBQU07SUFFTixJQUFDLENBQUEsT0FBUSxDQUFBLENBQUEsQ0FBRTtJQUNYLElBQUMsQ0FBQSxLQUFRLENBQUEsQ0FBQSxDQUFFLElBQUk7SUFDZixJQUFDLENBQUEsSUFBUSxDQUFBLENBQUEsQ0FBRTtJQUNYLElBQUMsQ0FBQSxHQUFRLENBQUEsQ0FBQSxDQUFFO0lBQ1gsSUFBQyxDQUFBLEtBQVEsQ0FBQSxDQUFBLENBQUU7SUFFWCxJQUFDLENBQUEsY0FBZTtNQUFFLFlBQUE7SUFBRixDQUFBO0lBRWhCLElBQUMsQ0FBQSxRQUFTLENBQUEsQ0FBQSxDQUFFLElBQUMsQ0FBQSxLQUFLLENBQUMsZUFBZTtJQUNsQyxJQUFDLENBQUEsUUFBUSxDQUFDLE9BQVMsQ0FBQSxDQUFBLENBQUU7SUFDckIsSUFBQyxDQUFBLFlBQWMsQ0FBQSxDQUFBLENBQUUsSUFBQyxDQUFBLFFBQVEsQ0FBQztJQUMzQixJQUFDLENBQUEsU0FBYyxDQUFBLENBQUEsS0FBTSxXQUFXLElBQUMsQ0FBQSxZQUFEO0lBRWhDLElBQUMsQ0FBQSxNQUFLOztZQUVSLFFBQU8sUUFBQSxDQUFBOztXQUNMLGNBQWUsUUFBQSxDQUFBLFNBQUE7TUFDYixLQUFDLENBQUEsR0FBSSxDQUFBLENBQUEsQ0FBRSxLQUFDLENBQUEsS0FBSyxDQUFDLHdCQUEyQixTQUFBO01BQ3pDLEtBQUMsQ0FBQSxHQUFHLENBQUMsUUFBUSxLQUFDLENBQUEsUUFBRDtNQUNiLEtBQUMsQ0FBQSxPQUFRLENBQUEsQ0FBQSxDQUFFO2FBQ1gsS0FBQyxDQUFBLFFBQU87S0FKSzs7WUFNakIsVUFBUyxRQUFBLENBQUE7O0lBQ1AsSUFBRyxJQUFDLENBQUEsT0FBSjtNQUFpQixVQUFJLE1BQUssVUFBTDs7SUFDckIsSUFBQyxDQUFBLFFBQVEsQ0FBQyxzQkFBMEIsSUFBQyxDQUFBLFNBQUQ7SUFDcEMsR0FBSSxDQUFBLENBQUEsQ0FBRTtJQUNOLEdBQUksQ0FBQSxDQUFBLENBQUU7SUFFTixxREFBQTs7TUFDRSxNQUFPLENBQUEsQ0FBQSxDQUFFLElBQUMsQ0FBQSxTQUFVLENBQUMsQ0FBRDtNQUNwQixJQUFHLE1BQU8sQ0FBQSxDQUFBLENBQUUsR0FBWjtRQUNFLEdBQUksQ0FBQSxDQUFBLENBQUU7OztJQUVWLElBQUMsQ0FBQSxJQUFJLENBQUMsS0FBSyxHQUFJLENBQUEsQ0FBQSxDQUFFLEdBQU47SUFDWCxJQUFHLElBQUMsQ0FBQSxJQUFJLENBQUMsTUFBTyxDQUFBLEVBQUEsQ0FBRyxTQUFuQjtNQUNFLElBQUMsQ0FBQSxJQUFJLENBQUMsTUFBSzs7SUFFYiw4REFBQTtNQUFJO01BQWMsR0FBSSxDQUFBLEVBQUEsQ0FBRzs7SUFDekIsR0FBSSxDQUFBLEVBQUEsQ0FBRztJQUNQLElBQUMsQ0FBQSxJQUFJLEdBQUksQ0FBQSxDQUFBLENBQUUsSUFBQyxDQUFBLFNBQVA7SUFDTCxJQUFDLENBQUEsR0FBSSxDQUFBLENBQUEsQ0FBRTtJQUNQLElBQUMsQ0FBQSxLQUFNLENBQUEsQ0FBQSxDQUFFLElBQUMsQ0FBQSxHQUFJLENBQUEsQ0FBQSxDQUFFLElBQUMsQ0FBQTtXQUVqQixjQUFjLENBQUMsSUFBSSxDQUFDLEtBQUk7O1lBRTFCLFlBQVcsUUFBQSxDQUFBO1dBQ1Q7TUFBQSxXQUFXLElBQUMsQ0FBQTtJQUFaOzs7RUExRGlCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNMckIsSUFBQSxHQUFjLE9BQWQsQ0FBc0IsS0FBQSxDQUF0QixFQUFFLEVBQVUsQ0FBQSxDQUFBLENBQVosSUFBQSxDQUFFLEVBQUYsRUFBTSxHQUFNLENBQUEsQ0FBQSxDQUFaLElBQUEsQ0FBTTtBQUVKLElBQU8sQ0FBQSxDQUFBLENBQUUsT0FBWCxDQUFtQixRQUFBLENBQW5CLENBQUU7aUJBR1csYUFBTixRQUFBLENBQUEsVUFBQTs7RUFFTCxVQUFZLENBQUEsQ0FBQSxDQUFFLENBQUU7SUFBRSxNQUFNO0lBQWtCLFFBQVMsUUFBQSxDQUFBO2FBQUcsSUFBQyxDQUFBOztFQUF2QyxDQUFGO0VBRWQsUUFBQSxDQUFBLFNBQUEsQ0FBQSxJQUFBOztJQUFHLElBQUMsQ0FBQSxtQkFBQTtJQUNGLFNBQUEsaUNBQU07SUFFTixJQUFDLENBQUEsY0FBZTtNQUFFLFlBQUE7SUFBRixDQUFBO0lBRWhCLGNBQWMsQ0FBQyxXQUFXLENBQUMsR0FBRyxhQUFZLFFBQUEsQ0FBQSxNQUFBO01BQ3hDLElBQUcsS0FBQyxDQUFBLFdBQWEsQ0FBQSxHQUFBLENBQUcsTUFBcEI7UUFBZ0MsS0FBQyxDQUFBLElBQUksSUFBQTs7YUFDckMsY0FBYyxDQUFDLElBQUksQ0FBQyxLQUFJO0tBRkk7SUFJOUIsY0FBYyxDQUFDLFdBQVcsQ0FBQyxHQUFHLFdBQVUsUUFBQSxDQUFBLE1BQUE7TUFDdEMsSUFBRyxLQUFDLENBQUEsV0FBYSxDQUFBLEdBQUEsQ0FBRyxNQUFwQjtRQUFnQyxLQUFDLENBQUEsSUFBSSxLQUFBOzthQUNyQyxjQUFjLENBQUMsSUFBSSxDQUFDLEtBQUk7S0FGSTtJQU05QixJQUFHLElBQUMsQ0FBQSxXQUFhLENBQUEsR0FBQSxDQUFHLFdBQXBCO01BQ0UsUUFBUSxDQUFDLGlCQUFtQixlQUFlLFFBQUEsQ0FBQSxFQUFBO2VBQUEsRUFBQSxDQUFDLGVBQWU7T0FBL0I7OztZQUVoQyxZQUFXLFFBQUEsQ0FBQTtXQUNUO01BQUEsYUFBYyxJQUFDLENBQUE7SUFBZjs7O0VBdkJtQjs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDTHZCLElBQUEsR0FBcUIsT0FBckIsQ0FBNkIsS0FBQSxDQUE3QixFQUFFLEVBQWlCLENBQUEsQ0FBQSxDQUFuQixJQUFBLENBQUUsRUFBRixFQUFNLEdBQWEsQ0FBQSxDQUFBLENBQW5CLElBQUEsQ0FBTSxHQUFOLEVBQVcsS0FBUSxDQUFBLENBQUEsQ0FBbkIsSUFBQSxDQUFXO0FBRVQsSUFBTyxDQUFBLENBQUEsQ0FBRSxPQUFYLENBQW1CLFFBQUEsQ0FBbkIsQ0FBRTtpQkFFVyxhQUFOLFFBQUEsQ0FBQSxVQUFBOztFQUVMLFVBQVksQ0FBQSxDQUFBLENBQUUsQ0FBRTtJQUFFLE1BQU07SUFBa0IsUUFBUyxRQUFBLENBQUE7YUFBRyxJQUFDLENBQUE7O0VBQXZDLENBQUY7RUFFZCxRQUFBLENBQUEsU0FBQSxDQUFBLElBQUE7O0lBQUcsSUFBQyxDQUFBLFlBQUEsTUFBTSxJQUFDLENBQUEsb0JBQUEscUJBQU8sRUFBQSxLQUFLLElBQUMsQ0FBQSxzQkFBQSx1QkFBUyxFQUFBO1NBT2pDO0lBTkUsU0FBQSxpQ0FBTTtJQUNOLElBQUMsQ0FBQSxjQUFlO01BQUUsWUFBQTtJQUFGLENBQUE7SUFDaEIsSUFBQyxDQUFBLEtBQU0sQ0FBQSxDQUFBLENBQUU7SUFDVCxJQUFDLENBQUEsTUFBTyxDQUFBLENBQUEsQ0FBRTtJQUNWLElBQUMsQ0FBQSxNQUFLOztZQUVSLE9BQU0sUUFBQSxDQUFBO0lBQ0osSUFBQyxDQUFBLElBQUksSUFBQTtXQUNMLE1BQU0sSUFBQyxDQUFBLElBQUssQ0FBQSxDQUFBLENBQUUsSUFBSyxDQUFBLENBQUEsQ0FBRSxJQUFDLENBQUEsWUFBTSxNQUFLLFdBQzlCLElBQUMsQ0FBQSxPQUFPLEVBQUssTUFBTSxJQUFDLENBQUEsSUFBSyxDQUFBLENBQUEsQ0FBRSxNQUFNLElBQUMsQ0FBQSxJQUFmLFVBRGhCOztZQUdSLE1BQUssUUFBQSxDQUFBO0lBQ0gsY0FBYyxDQUFDLElBQUksQ0FBQyxLQUFJO1dBQ3hCLG9CQUFBLENBRkYseUJBRVE7O1lBRVIsU0FBUyxRQUFBLENBQUE7V0FDUCxJQUFDLENBQUEsSUFBSSxLQUFBOztZQUVQLFFBQU8sUUFBQSxDQUFBOztJQUNMLElBQUMsQ0FBQSxNQUFPLENBQUEsQ0FBQSxDQUFFO1dBQ1YsTUFBTSxDQUFDLElBQUMsQ0FBQSxJQUFLLENBQUEsQ0FBQSxDQUFFLElBQUMsQ0FBQSxNQUFNLENBQUUsQ0FBQSxDQUFBLENBQUUsTUFBTSxRQUFBLENBQUE7bUJBQzlCLE9BQUssUUFBSTtLQURMOztZQUdSLE9BQU0sUUFBQSxDQUFBO0lBQ0osSUFBQyxDQUFBLE1BQU8sQ0FBQSxDQUFBLENBQUU7V0FDVixJQUFDLENBQUEsSUFBSSxLQUFBOztZQUVQLFlBQVcsUUFBQSxDQUFBO1dBQ1Q7TUFBQSxNQUFNLElBQUMsQ0FBQTtNQUNQLE1BQU0sSUFBQyxDQUFBO01BQ1AsUUFBUSxJQUFDLENBQUE7SUFGVDs7O0VBakNtQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDSnZCLElBQUEsR0FBa0IsT0FBbEIsQ0FBMEIsS0FBQSxDQUExQixFQUFFLEVBQWMsQ0FBQSxDQUFBLENBQWhCLElBQUEsQ0FBRSxFQUFGLEVBQU0sR0FBVSxDQUFBLENBQUEsQ0FBaEIsSUFBQSxDQUFNLEdBQU4sRUFBVyxFQUFLLENBQUEsQ0FBQSxDQUFoQixJQUFBLENBQVc7QUFFWCxJQUFBLEdBQW9CLE9BQXBCLENBQTRCLFFBQUEsQ0FBNUIsRUFBRSxLQUFnQixDQUFBLENBQUEsQ0FBbEIsSUFBQSxDQUFFLEtBQUYsRUFBUyxNQUFTLENBQUEsQ0FBQSxDQUFsQixJQUFBLENBQVM7QUFPSCxXQUFOLFFBQUEsQ0FBQTs7O0VBRUUsUUFBQSxDQUFBLE9BQUEsQ0FBQSxJQUFBOztJQUFHLFlBQUEsTUFBTSxJQUFDLENBQUEsYUFBQTtJQUNSLElBQUMsQ0FBQSxLQUFNLENBQUEsQ0FBQSxDQUFFLElBQUMsQ0FBQSxjQUFlLElBQUE7SUFDekIsSUFBQyxDQUFBLEdBQUksQ0FBQSxDQUFBLE9BQUUsSUFBQyxDQUFBLE9BQU07O1lBRWhCLE1BQUssUUFBQSxDQUFBLEVBQUE7V0FDSCxJQUFDLENBQUEsS0FBSyxDQUFDLEVBQUQ7OztTQUVGLFFBQUEsQ0FBQTthQUNKLElBQUMsQ0FBQTs7Ozs7O1NBRUksUUFBQSxDQUFBOztNQUNMLCtEQUFBO1FBQUk7UUFDRixJQUFPLElBQUksQ0FBQyxJQUFULFFBQUg7VUFDRSxNQUFBLENBQU8sSUFBUDs7Ozs7Ozs7U0FFRyxRQUFBLENBQUE7YUFDUCxJQUFDLENBQUEsS0FBSyxDQUFDOzs7Ozs7O2dCQVFFLFlBQU4sUUFBQSxDQUFBLFVBQUE7O1lBQ0wsZ0JBQWdCLFFBQUEsQ0FBQSxJQUFBOztJQUNkLGdEQUFBOzt1QkFBTSxZQUFBLE1BQU0sdUJBQUEsd0JBQVUsRUFBQTt3QkFDaEIsTUFBTTtRQUFFLE1BQUE7UUFBTSxPQUFPLElBQUMsQ0FBQTtRQUFPLE9BQU87UUFBSSxRQUFTLE1BQU8sQ0FBQyxLQUFLLElBQUMsQ0FBQSxLQUFEO01BQXhELENBQUE7Ozs7Ozs7O0VBSE07aUJBS1QsYUFBTixRQUFBLENBQUEsVUFBQTs7WUFDTCxnQkFBZ0IsUUFBQSxDQUFBLElBQUE7O0lBQ2QsZ0RBQUE7O3VCQUFNLFlBQUEsTUFBTSx1QkFBQSx3QkFBVSxFQUFBO3dCQUNoQixPQUFPO1FBQUUsTUFBQTtRQUFNLE9BQU8sSUFBQyxDQUFBO1FBQU8sT0FBTztRQUFJLFFBQVMsTUFBTyxDQUFDLEtBQUssSUFBQyxDQUFBLEtBQUQ7TUFBeEQsQ0FBQTs7Ozs7Ozs7RUFITTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDeEN2QixJQUFBLEdBQWtCLE9BQWxCLENBQTBCLEtBQUEsQ0FBMUIsRUFBRSxFQUFjLENBQUEsQ0FBQSxDQUFoQixJQUFBLENBQUUsRUFBRixFQUFNLEdBQVUsQ0FBQSxDQUFBLENBQWhCLElBQUEsQ0FBTSxHQUFOLEVBQVcsRUFBSyxDQUFBLENBQUEsQ0FBaEIsSUFBQSxDQUFXO0FBRUwsUUFBTixRQUFBLENBQUE7OztFQUNFLFFBQUEsQ0FBQSxJQUFBLENBQUEsSUFBQTtJQUFHLElBQUMsQ0FBQSxZQUFBLE1BQU0sSUFBQyxDQUFBLGFBQUEsT0FBTyxJQUFDLENBQUEsYUFBQTs7WUFFbkIsYUFBYSxRQUFBLENBQUEsSUFBQTtJQUFDLElBQUMsQ0FBQTs7WUFFZixPQUFNLFFBQUEsQ0FBQTs7bUJBQ0osSUFBQyxDQUFBLGNBQUQsTUFBTSxDQUFDLE9BQU87O1lBRWhCLE9BQU0sUUFBQSxDQUFBOzttQkFDSixJQUFDLENBQUEsY0FBRCxNQUFNLENBQUMsU0FBUzs7OzthQUVQLFNBQU4sUUFBQSxDQUFBLFVBQUE7O0VBQ0wsUUFBQSxDQUFBLEtBQUEsQ0FBQSxJQUFBOztJQUFHLGNBQUE7SUFDRCxLQUFBLGlDQUFNO0lBQ04sSUFBQyxDQUFBLElBQUssQ0FBQSxDQUFBLENBQUU7OztFQUhRO2NBS1AsVUFBTixRQUFBLENBQUEsVUFBQTs7RUFDTCxRQUFBLENBQUEsTUFBQSxDQUFBLElBQUE7O0lBQUcsY0FBQTtJQUNELE1BQUEsaUNBQU07SUFDTixJQUFDLENBQUEsSUFBSyxDQUFBLENBQUEsQ0FBRTs7O0VBSFE7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2xCcEIsSUFBQSxHQUFvQixPQUFwQixDQUE0QixLQUFBLENBQTVCLEVBQUUsRUFBZ0IsQ0FBQSxDQUFBLENBQWxCLElBQUEsQ0FBRSxFQUFGLEVBQU0sR0FBWSxDQUFBLENBQUEsQ0FBbEIsSUFBQSxDQUFNLEdBQU4sRUFBVyxJQUFPLENBQUEsQ0FBQSxDQUFsQixJQUFBLENBQVc7QUFFVCxJQUFTLENBQUEsQ0FBQSxDQUFFLE9BQWIsQ0FBcUIsY0FBQSxDQUFyQixDQUFFO2NBRVcsVUFBTixRQUFBLENBQUEsVUFBQTs7RUFFTCxTQUFXLENBQUEsQ0FBQSxDQUFFO0lBQ1Q7TUFBQSxNQUFNO0lBQU4sR0FDQTtNQUFBLE1BQU07SUFBTixHQUNBO01BQUEsTUFBTTtJQUFOLEdBQ0E7TUFBQSxNQUFNO0lBQU4sR0FDQTtNQUFBLE1BQU07SUFBTixHQUNBO01BQUEsTUFBTTtJQUFOLEdBQ0E7TUFBQSxNQUFNO0lBQU4sR0FDQTtNQUFBLE1BQU07SUFBTjtFQVJTO0VBV2IsUUFBQSxDQUFBLE1BQUEsQ0FBQTtJQUNFLElBQUMsQ0FBQSxjQUFlO01BQUUsV0FBQTtJQUFGLENBQUE7SUFDaEIsSUFBQyxDQUFBLEtBQU0sQ0FBQSxDQUFBLENBQUU7O1lBRVgsT0FBTSxRQUFBLENBQUE7V0FDSixJQUFDLENBQUEsS0FBTSxDQUFBLENBQUEsQ0FBRSxJQUFDLENBQUEsTUFBTSxDQUFDLElBQUssUUFBQSxDQUFBLEVBQUE7YUFBQSxFQUFBLENBQUMsS0FBSTtLQUFOLENBQVMsQ0FBQyxPQUFPLEVBQUE7O1lBRXhDLFVBQVUsUUFBQSxDQUFBOztJQUNSLEdBQUksQ0FBQSxDQUFBLENBQUU7SUFDTiwrREFBQTtNQUFJO01BQ0YsSUFBRyxNQUFNLENBQUMsS0FBTyxDQUFBLENBQUEsQ0FBRSxHQUFuQjtRQUE0QixHQUFJLENBQUEsQ0FBQSxDQUFFLE1BQU0sQ0FBQzs7TUFDekMsSUFBRyxNQUFNLENBQUMsTUFBTyxDQUFBLENBQUEsQ0FBRSxHQUFuQjtRQUE0QixHQUFJLENBQUEsQ0FBQSxDQUFFLE1BQU0sQ0FBQzs7O0lBQzNDLE1BQUEsQ0FBTyxHQUFQOztZQUVGLFlBQVksUUFBQSxDQUFBOzs7O1lBR1osWUFBVyxRQUFBLENBQUE7V0FBRzs7O0VBOUJJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Z0JDSlAsWUFBTixRQUFBLENBQUE7OztFQUVMLFFBQUEsQ0FBQSxRQUFBLENBQUEsSUFBQSxFQUFBLEtBQUE7SUFBRyxJQUFDLENBQUEsU0FBQSxHQUFHLElBQUMsQ0FBQSxTQUFBO0lBQU8sSUFBQyxDQUFBLFVBQUEsR0FBRyxJQUFDLENBQUEsVUFBQTtJQUNsQixJQUFDLENBQUEsT0FBTTs7WUFFVCxTQUFRLFFBQUEsQ0FBQTtJQUNOLElBQUMsQ0FBQSxJQUFPLENBQUEsQ0FBQSxDQUFFLElBQUMsQ0FBQSxDQUFFLENBQUEsQ0FBQSxDQUFFLElBQUMsQ0FBQSxDQUFDLENBQUEsQ0FBQSxDQUFDO0lBQ2xCLElBQUMsQ0FBQSxLQUFPLENBQUEsQ0FBQSxDQUFFLElBQUMsQ0FBQSxDQUFFLENBQUEsQ0FBQSxDQUFFLElBQUMsQ0FBQSxDQUFDLENBQUEsQ0FBQSxDQUFDO0lBQ2xCLElBQUMsQ0FBQSxHQUFPLENBQUEsQ0FBQSxDQUFFLElBQUMsQ0FBQSxDQUFFLENBQUEsQ0FBQSxDQUFFLElBQUMsQ0FBQSxDQUFDLENBQUEsQ0FBQSxDQUFDO1dBQ2xCLElBQUMsQ0FBQSxNQUFPLENBQUEsQ0FBQSxDQUFFLElBQUMsQ0FBQSxDQUFFLENBQUEsQ0FBQSxDQUFFLElBQUMsQ0FBQSxDQUFDLENBQUEsQ0FBQSxDQUFDOztZQUVwQixXQUFVLFFBQUEsQ0FBQSxJQUFBOztJQUFHLFNBQUEsR0FBRyxTQUFBO1dBQ1IsQ0FBTixJQUFDLENBQUEsSUFBSyxDQUFBLENBQUEsQ0FBRSxDQUFGLElBQUUsQ0FBRSxDQUFBLENBQUEsQ0FBRSxJQUFDLENBQUEsS0FBUCxDQUFhLENBQUEsRUFBQSxDQUFTLENBQUwsSUFBQyxDQUFBLEdBQUksQ0FBQSxDQUFBLENBQUUsQ0FBRixJQUFFLENBQUUsQ0FBQSxDQUFBLENBQUUsSUFBQyxDQUFBLE1BQVA7Ozs7ZUFHbkIsV0FBTixRQUFBLENBQUEsVUFBQTs7RUFFTCxRQUFBLENBQUEsT0FBQSxDQUFBLEdBQUEsRUFBQSxJQUFBO0lBQ0UsT0FBQSx1QkFBTSxLQUFLO01BQUUsR0FBRztNQUFNLEdBQUc7SUFBZCxDQUFMOztZQUVSLFNBQVMsUUFBQSxDQUFBLElBQUE7O0lBQUcsU0FBQSxHQUFHLFNBQUE7SUFDYixJQUFDLENBQUEsQ0FBRSxDQUFBLENBQUEsQ0FBRTtJQUNMLElBQUMsQ0FBQSxDQUFFLENBQUEsQ0FBQSxDQUFFO1dBQ0wsSUFBQyxDQUFBLE9BQU07OztFQVJVOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNmckIsSUFBQSxHQUFjLE9BQWQsQ0FBc0IsS0FBQSxDQUF0QixFQUFFLEVBQVUsQ0FBQSxDQUFBLENBQVosSUFBQSxDQUFFLEVBQUYsRUFBTSxHQUFNLENBQUEsQ0FBQSxDQUFaLElBQUEsQ0FBTTtzQkFFTyxrQkFBTixRQUFBLENBQUE7OztFQUVMLEVBQUcsQ0FBQSxDQUFBLENBQUU7RUFFTCxRQUFBLENBQUEsY0FBQSxDQUFBLE1BQUE7SUFBQyxJQUFDLENBQUE7SUFDQSxJQUFDLENBQUEsSUFBRCxRQUFBLENBQUEsRUFBQSxDQUFBLENBQUEsSUFBQyxDQUFBLElBQU0sQ0FBQSxDQUFBLENBQUUsR0FBVDtJQUNBLElBQUMsQ0FBQSxLQUFNLENBQUEsQ0FBQSxDQUFFO01BQUEsTUFBTTtJQUFOO0lBQ1QsSUFBQyxDQUFBLE1BQU8sQ0FBQSxDQUFBLENBQUUsUUFBUSxDQUFDLGNBQWUsUUFBQTtJQUNsQyxJQUFDLENBQUEsTUFBTSxDQUFDLEtBQU0sQ0FBQSxDQUFBLENBQUUsSUFBQyxDQUFBLE1BQU0sQ0FBQyxNQUFPLENBQUEsQ0FBQSxDQUFFLElBQUMsQ0FBQTtJQUNsQyxJQUFDLENBQUEsR0FBSSxDQUFBLENBQUEsQ0FBRSxJQUFDLENBQUEsTUFBTSxDQUFDLFdBQVksSUFBQTs7WUFFN0IsT0FBTSxRQUFBLENBQUE7SUFDSixJQUFDLENBQUEsWUFBWTtXQUNiLElBQUMsQ0FBQSxXQUFXOztZQUVkLGNBQWMsUUFBQSxDQUFBLEtBQUE7SUFBQyxrQkFBQSxRQUFRO0lBQ3JCLElBQUMsQ0FBQSxHQUFHLENBQUMsU0FBVyxDQUFBLENBQUEsQ0FBRTtXQUNsQixJQUFDLENBQUEsR0FBRyxDQUFDLFNBQVUsR0FBRyxHQUFHLElBQUMsQ0FBQSxNQUFNLENBQUMsT0FBTyxJQUFDLENBQUEsTUFBTSxDQUFDLE1BQTdCOztZQUVqQixhQUFhLFFBQUEsQ0FBQSxLQUFBO0lBQUMsa0JBQUEsUUFBUSxJQUFDLENBQUEsWUFBWTtJQUNqQyxJQUFDLENBQUEsR0FBRyxDQUFDLFNBQVcsQ0FBQSxDQUFBLENBQUU7SUFDbEIsSUFBQyxDQUFBLEdBQUcsQ0FBQyxTQUFVLEdBQUcsR0FBRyxJQUFDLENBQUEsTUFBTSxFQUFiO0lBQ2YsSUFBQyxDQUFBLEdBQUcsQ0FBQyxTQUFVLEdBQUcsSUFBSSxJQUFJLElBQUMsQ0FBQSxJQUFLLENBQUEsQ0FBQSxDQUFFLEVBQW5CO0lBQ2YsSUFBQyxDQUFBLEdBQUcsQ0FBQyxTQUFVLElBQUMsQ0FBQSxJQUFLLENBQUEsQ0FBQSxDQUFFLElBQUksSUFBSSxJQUFJLElBQUMsQ0FBQSxJQUFLLENBQUEsQ0FBQSxDQUFFLEVBQTVCO1dBQ2YsSUFBQyxDQUFBLEdBQUcsQ0FBQyxTQUFVLElBQUksSUFBQyxDQUFBLElBQUssQ0FBQSxDQUFBLENBQUUsSUFBSSxJQUFDLENBQUEsSUFBSyxDQUFBLENBQUEsQ0FBRSxFQUFHLENBQUEsQ0FBQSxDQUFFLEdBQUcsRUFBaEM7O1lBRWpCLGNBQWMsUUFBQSxDQUFBO0lBQ1osSUFBRyxJQUFDLENBQUEsTUFBTSxDQUFDLEtBQVg7YUFDRTtLQUNGO2FBQ0UsSUFBQyxDQUFBLFVBQVcsSUFBQyxDQUFBLEtBQUssQ0FBQyxJQUFQOzs7WUFFaEIsWUFBWSxRQUFBLENBQUEsSUFBQTtJQUNWLFFBQU8sSUFBUDtBQUFBLElBQ0UsS0FBQSxxQkFBQTtBQUFBLGFBQTJCO0lBQzNCLEtBQUEsb0JBQUE7QUFBQSxhQUEyQjtJQUMzQixLQUFBLHVCQUFBO0FBQUEsYUFBMkI7OztZQUUvQixVQUFVLFFBQUEsQ0FBQSxJQUFBO1dBQ1IsSUFBQyxDQUFBLEtBQUssQ0FBQyxJQUFLLENBQUEsQ0FBQSxDQUFFOztZQUVoQixZQUFXLFFBQUEsQ0FBQTtXQUNUO01BQUEsS0FBSyxJQUFDLENBQUE7TUFDTixNQUFNLElBQUMsQ0FBQTtJQURQOztFQUdGLGNBQUMsQ0FBQSxrQkFBbUIsQ0FBQSxDQUFBLEtBQU0sZUFBZTtJQUFFLE9BQU87RUFBVCxDQUFBOzs7Ozs7Ozs7QUMvQzNDLElBQUEsR0FBa0IsT0FBbEIsQ0FBMEIsS0FBQSxDQUExQixFQUFFLEVBQWMsQ0FBQSxDQUFBLENBQWhCLElBQUEsQ0FBRSxFQUFGLEVBQU0sR0FBVSxDQUFBLENBQUEsQ0FBaEIsSUFBQSxDQUFNLEdBQU4sRUFBVyxFQUFLLENBQUEsQ0FBQSxDQUFoQixJQUFBLENBQVc7QUFFVCxjQUFpQixDQUFBLENBQUEsQ0FBRSxPQUFyQixDQUE2QixRQUFBLENBQTdCLENBQUU7a0JBR1csY0FBTixRQUFBLENBQUEsVUFBQTs7RUFFTCxRQUFBLENBQUEsVUFBQSxDQUFBO0lBQ0UsSUFBQyxDQUFBLElBQUssQ0FBQSxDQUFBLENBQUU7SUFDUixVQUFBLGlDQUFNOztZQUVSLE9BQU0sUUFBQSxDQUFBLE1BQUE7SUFDSixvQkFBQSxDQURGLDBCQUNRO0lBQ04sSUFBQyxDQUFBLEdBQUcsQ0FBQyxXQUFhLENBQUEsQ0FBQSxDQUFLLE1BQU0sQ0FBQyxNQUFNLEVBQUssRUFBRSxFQUFLO0lBQ2hELElBQUMsQ0FBQSxHQUFHLENBQUMsVUFBVyxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsSUFBSSxJQUFJLElBQUMsQ0FBQSxJQUFLLENBQUEsQ0FBQSxDQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFFLENBQUEsQ0FBQSxDQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBRSxDQUFBLENBQUEsQ0FBRSxDQUFDLElBQUMsQ0FBQSxJQUFLLENBQUEsQ0FBQSxDQUFFLEVBQUUsQ0FBckc7V0FDaEIsSUFBQyxDQUFBLEdBQUcsQ0FBQyxXQUFhLENBQUEsQ0FBQSxDQUFFOzs7RUFWQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDTHhCLElBQUEsR0FBYyxPQUFkLENBQXNCLEtBQUEsQ0FBdEIsRUFBRSxFQUFVLENBQUEsQ0FBQSxDQUFaLElBQUEsQ0FBRSxFQUFGLEVBQU0sR0FBTSxDQUFBLENBQUEsQ0FBWixJQUFBLENBQU07QUFFSixjQUFpQixDQUFBLENBQUEsQ0FBRSxPQUFyQixDQUE2QixRQUFBLENBQTdCLENBQUU7QUFFRixVQUFXLENBQUEsQ0FBQSxDQUNUO0VBQUEsSUFBSTtFQUNKLElBQUk7RUFDSixJQUFJO0VBQ0osSUFBSTtBQUhKO2NBS1csVUFBTixRQUFBLENBQUEsVUFBQTs7RUFFTCxRQUFBLENBQUEsTUFBQSxDQUFBO0lBQ0UsTUFBQSxpQ0FBTTtJQUNOLElBQUMsQ0FBQSxNQUFPLENBQUEsQ0FBQSxDQUFFLFVBQVUsQ0FBQyxJQUFDLENBQUEsTUFBTSxDQUFDLE9BQVQ7O1lBRXRCLE9BQU0sUUFBQSxDQUFBO0lBQ0osb0JBQUEsQ0FERiwwQkFDUTtJQUNOLElBQUMsQ0FBQSxHQUFHLENBQUMsU0FBVyxDQUFBLENBQUEsQ0FBRTtJQUNsQixJQUFDLENBQUEsR0FBRyxDQUFDLElBQUssQ0FBQSxDQUFBLENBQUssSUFBQyxDQUFBLElBQUksQ0FBQSxDQUFBLENBQUMsQ0FBQyxDQUFBLENBQUEsQ0FBQztJQUN2QixJQUFDLENBQUEsR0FBRyxDQUFDLFNBQVcsQ0FBQSxDQUFBLENBQUU7SUFDbEIsSUFBQyxDQUFBLEdBQUcsQ0FBQyxZQUFjLENBQUEsQ0FBQSxDQUFFO1dBQ3JCLElBQUMsQ0FBQSxHQUFHLENBQUMsU0FBVSxJQUFDLENBQUEsUUFBUSxJQUFDLENBQUEsSUFBSSxDQUFBLENBQUEsQ0FBQyxHQUFHLElBQUMsQ0FBQSxJQUFJLENBQUEsQ0FBQSxDQUFDLEdBQUcsSUFBQyxDQUFBLE1BQU0sSUFBQyxDQUFBLElBQW5DOzs7RUFaQzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDVnBCLElBQUEsR0FBd0MsT0FBeEMsQ0FBZ0QsS0FBQSxDQUFoRCxFQUFFLEVBQW9DLENBQUEsQ0FBQSxDQUF0QyxJQUFBLENBQUUsRUFBRixFQUFNLEdBQWdDLENBQUEsQ0FBQSxDQUF0QyxJQUFBLENBQU0sR0FBTixFQUFXLEdBQTJCLENBQUEsQ0FBQSxDQUF0QyxJQUFBLENBQVcsR0FBWCxFQUFnQixHQUFzQixDQUFBLENBQUEsQ0FBdEMsSUFBQSxDQUFnQixHQUFoQixFQUFxQixFQUFpQixDQUFBLENBQUEsQ0FBdEMsSUFBQSxDQUFxQixFQUFyQixFQUF5QixVQUFhLENBQUEsQ0FBQSxDQUF0QyxJQUFBLENBQXlCO0FBRXpCLENBQUUsQ0FBQSxDQUFBLENBQUU7ZUFFUyxXQUFOLFFBQUEsQ0FBQTs7O0VBRUwsWUFBYyxDQUFBLENBQUEsQ0FBRTtFQUVoQixRQUFBLENBQUEsT0FBQSxDQUFBLE1BQUE7SUFBQyxJQUFDLENBQUE7SUFDQSxJQUFDLENBQUEsQ0FBRSxDQUFBLENBQUEsQ0FBRSxDQUFBOztZQUVQLGtCQUFtQixRQUFBLENBQUE7SUFDakIsUUFBTyxJQUFDLENBQUEsTUFBTSxDQUFDLE1BQWY7QUFBQSxJQUNFLEtBQUEsY0FBQTtBQUFBLE1BQ0EsUUFBTyxJQUFDLENBQUEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFsQjtBQUFBLE1BQ0UsS0FBQSxrQkFBQTtBQUFBLGVBQXVCLENBQUUsY0FBYyxhQUFoQjtNQUN2QixLQUFBLG1CQUFBO0FBQUEsZUFBdUIsQ0FBRSxpQkFBaUIsaUJBQW5COztlQUNBLENBQUUsa0JBQWtCLGtCQUFwQjs7OzthQUNaLENBQUUsV0FBVyxnQkFBYjs7O1lBR2pCLE9BQU0sUUFBQSxDQUFBLElBQUE7O0lBQUcsV0FBQTtJQUVQLEVBQUcsQ0FBQSxDQUFBLENBQUUsR0FBRyxHQUFFLENBQUY7SUFDUixFQUFHLENBQUEsQ0FBQSxDQUFFLEdBQUcsR0FBRSxDQUFGO0lBRVIsSUFBRyxJQUFDLENBQUEsTUFBTSxDQUFDLE1BQU8sQ0FBQSxHQUFBLENBQUcsc0JBQXJCO01BQ0UsSUFBRyxJQUFDLENBQUEsTUFBTSxDQUFDLElBQVg7UUFDRSxFQUFHLENBQUEsQ0FBQSxDQUFFLElBQUMsQ0FBQSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE9BQVEsSUFBQyxDQUFBLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBYjtRQUM1QyxFQUFHLENBQUEsQ0FBQSxDQUFFLFdBQVcsSUFBSSxHQUFHLENBQUEsSUFBSSxDQUFKLENBQVA7T0FDbEIsTUFBQSxJQUFRLElBQUMsQ0FBQSxNQUFNLENBQUMsRUFBaEI7UUFDRSxFQUFHLENBQUEsQ0FBQSxDQUFFLElBQUMsQ0FBQSxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLE9BQVEsSUFBQyxDQUFBLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBWDtRQUN6QyxFQUFHLENBQUEsQ0FBQSxDQUFFLFdBQVcsSUFBSSxHQUFHLElBQUcsQ0FBSCxDQUFQOztNQUNsQixFQUFHLENBQUEsQ0FBQSxDQUFFLElBQUksQ0FBQyxPQUFNO0tBQ2xCO01BQ0UsRUFBRyxDQUFBLENBQUEsQ0FBRSxJQUFDLENBQUEsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFRLElBQUMsQ0FBQSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQWI7TUFDNUMsRUFBRyxDQUFBLENBQUEsQ0FBRSxJQUFDLENBQUEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFRLElBQUMsQ0FBQSxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQVg7TUFDekMsRUFBRyxDQUFBLENBQUEsQ0FBRSxJQUFDLENBQUEsTUFBTSxDQUFDLG9CQUFxQjs7SUFFcEMsQ0FBRSxDQUFBLENBQUEsQ0FBRSxJQUFJLElBQUksRUFBSjtJQUNSLENBQUUsQ0FBQSxDQUFBLENBQUUsRUFBRSxDQUFDLENBQUUsQ0FBQSxDQUFBLENBQUUsRUFBRSxDQUFDO0lBQ2QsQ0FBRSxDQUFBLENBQUEsQ0FBSyxDQUFFLENBQUEsRUFBQSxDQUFHLGFBQWMsRUFBSyxZQUFjLENBQUEsQ0FBQSxDQUF5QixRQUF6QixDQUFJLEdBQU0sQ0FBRixDQUFBLENBQUUsQ0FBQSxDQUFBLENBQUMsWUFBWCxFQUEyQixHQUEzQixFQUErQixFQUFLO0lBRWpGLElBQUEsR0FBOEIsSUFBQyxDQUFBLGVBQS9CLENBQWdELENBQWhELEVBQUUsU0FBMEIsQ0FBQSxDQUFBLENBQTVCLElBQUEsQ0FBQSxDQUFBLENBQUEsRUFBYyxVQUFjLENBQUEsQ0FBQSxDQUE1QixJQUFBLENBQUEsQ0FBQTtJQUVBLEdBQUcsQ0FBQyxTQUFXLENBQUEsQ0FBQSxDQUFFO0lBQ2pCLEdBQUcsQ0FBQyxXQUFhLENBQUEsQ0FBQSxDQUFFO0lBRW5CLEdBQUcsQ0FBQyxVQUFVO0lBQ2QsR0FBRyxDQUFDLE9BQVEsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQVQ7SUFDWixHQUFHLENBQUMsY0FBZ0IsRUFBRSxDQUFDLENBQUUsQ0FBQSxDQUFBLENBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBRSxDQUFBLENBQUEsQ0FBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUF6QztJQUNwQixHQUFHLENBQUMsT0FBTTtJQUVWLEdBQUcsQ0FBQyxXQUFhLENBQUEsQ0FBQSxDQUFFO0lBQ25CLEdBQUcsQ0FBQyxXQUFhLENBQUEsQ0FBQSxDQUFFO0lBRW5CLEdBQUcsQ0FBQyxVQUFVO0lBQ2QsR0FBRyxDQUFDLE9BQVEsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQVQ7SUFDWixHQUFHLENBQUMsY0FBZ0IsRUFBRSxDQUFDLENBQUUsQ0FBQSxDQUFBLENBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBRSxDQUFBLENBQUEsQ0FBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUF6QztJQUNwQixHQUFHLENBQUMsT0FBTTtXQUVWLEdBQUcsQ0FBQyxXQUFhLENBQUEsQ0FBQSxDQUFFOzs7Ozs7Ozs7O0FDN0R2QixJQUFBLEdBQWMsT0FBZCxDQUFzQixLQUFBLENBQXRCLEVBQUUsRUFBVSxDQUFBLENBQUEsQ0FBWixJQUFBLENBQUUsRUFBRixFQUFNLEdBQU0sQ0FBQSxDQUFBLENBQVosSUFBQSxDQUFNO0FBRUosY0FBaUIsQ0FBQSxDQUFBLENBQUUsT0FBckIsQ0FBNkIsUUFBQSxDQUE3QixDQUFFO2NBR1csVUFBTixRQUFBLENBQUEsVUFBQTs7RUFFTCxJQUFLLENBQUEsQ0FBQSxDQUFFO0VBRVAsUUFBQSxDQUFBLE1BQUEsQ0FBQTtJQUNFLE1BQUEsaUNBQU07SUFFTixJQUFDLENBQUEsR0FBRyxDQUFDLFNBQVcsQ0FBQSxDQUFBLENBQUU7SUFDbEIsSUFBQyxDQUFBLEdBQUcsQ0FBQyxTQUFVLEdBQUcsR0FBRyxJQUFDLENBQUEsTUFBTSxJQUFDLENBQUEsSUFBZDtJQUVmLElBQUMsQ0FBQSxHQUFHLENBQUMsU0FBVyxDQUFBLENBQUEsQ0FBRTtJQUNsQixJQUFDLENBQUEsR0FBRyxDQUFDLFNBQVUsR0FBSSxHQUFHLElBQUMsQ0FBQSxNQUFNLElBQUMsQ0FBQSxJQUFmO0lBRWYsSUFBQyxDQUFBLEdBQUcsQ0FBQyxTQUFXLENBQUEsQ0FBQSxDQUFFO0lBQ2xCLElBQUMsQ0FBQSxHQUFHLENBQUMsU0FBVSxHQUFHLElBQUMsQ0FBQSxJQUFJLENBQUEsQ0FBQSxDQUFDLEdBQUcsSUFBQyxDQUFBLE1BQU0sSUFBQyxDQUFBLElBQUksQ0FBQSxDQUFBLENBQUMsQ0FBekI7O1lBRWpCLE9BQU0sUUFBQSxDQUFBLE1BQUE7O0lBRUosQ0FBRSxDQUFBLENBQUEsQ0FBRSxJQUFDLENBQUEsSUFBSSxDQUFBLENBQUEsQ0FBQztJQUNWLENBQUUsQ0FBQSxDQUFBLENBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQSxDQUFBLENBQUM7SUFDakIsQ0FBRSxDQUFBLENBQUEsQ0FBRSxNQUFNLENBQUMsU0FBUyxDQUFBLENBQUEsQ0FBQztJQUVyQixJQUFDLENBQUEsR0FBRyxDQUFDLFNBQVcsQ0FBQSxDQUFBLENBQUU7SUFDbEIsSUFBQyxDQUFBLEdBQUcsQ0FBQyxTQUFVLElBQUMsQ0FBQSxJQUFJLENBQUEsQ0FBQSxDQUFDLENBQUUsQ0FBQSxDQUFBLENBQUUsQ0FBQyxDQUFBLENBQUEsQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFDLENBQUEsSUFBdEI7SUFDZixJQUFDLENBQUEsR0FBRyxDQUFDLFNBQVcsQ0FBQSxDQUFBLENBQUssTUFBTSxDQUFDLE1BQU0sRUFBSyxNQUFLLEVBQUs7SUFDakQsSUFBQyxDQUFBLEdBQUcsQ0FBQyxTQUFVLElBQUMsQ0FBQSxJQUFJLENBQUEsQ0FBQSxDQUFDLENBQUUsQ0FBQSxDQUFBLENBQUUsQ0FBQyxDQUFBLENBQUEsQ0FBQyxHQUFHLElBQUMsQ0FBQSxJQUFLLENBQUEsQ0FBQSxDQUFFLEVBQUcsQ0FBQSxDQUFBLENBQUUsSUFBQyxDQUFBLElBQUssQ0FBQSxDQUFBLENBQUUsR0FBRyxHQUFHLElBQUMsQ0FBQSxJQUFLLENBQUEsQ0FBQSxDQUFFLENBQWxEO0lBQ2YsSUFBQyxDQUFBLEdBQUcsQ0FBQyxXQUFhLENBQUEsQ0FBQSxDQUFFO1dBRXBCLElBQUMsQ0FBQSxXQUFXOzs7RUE1Qkk7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0xwQixJQUFBLEdBQWMsT0FBZCxDQUFzQixLQUFBLENBQXRCLEVBQUUsRUFBVSxDQUFBLENBQUEsQ0FBWixJQUFBLENBQUUsRUFBRixFQUFNLEdBQU0sQ0FBQSxDQUFBLENBQVosSUFBQSxDQUFNO0FBRUosY0FBaUIsQ0FBQSxDQUFBLENBQUUsT0FBckIsQ0FBNkIsUUFBQSxDQUE3QixDQUFFO0FBRUYsVUFBVyxDQUFBLENBQUEsQ0FDVDtFQUFBLEdBQUc7RUFDSCxHQUFHO0VBQ0gsR0FBRztBQUZIO2dCQUtXLFlBQU4sUUFBQSxDQUFBLFVBQUE7O0VBRUwsUUFBQSxDQUFBLFFBQUEsQ0FBQTtJQUNFLFFBQUEsaUNBQU07SUFDTixJQUFDLENBQUEsTUFBTyxDQUFBLENBQUEsQ0FBRSxVQUFVLENBQUMsSUFBQyxDQUFBLE1BQU0sQ0FBQyxXQUFUOztZQUV0QixPQUFNLFFBQUEsQ0FBQTtJQUNKLG9CQUFBLENBREYsMEJBQ1E7SUFDTixJQUFDLENBQUEsR0FBRyxDQUFDLFNBQVcsQ0FBQSxDQUFBLENBQUU7SUFDbEIsSUFBQyxDQUFBLEdBQUcsQ0FBQyxJQUFLLENBQUEsQ0FBQSxDQUFLLElBQUMsQ0FBQSxJQUFJLENBQUEsQ0FBQSxDQUFDLENBQUMsQ0FBQSxDQUFBLENBQUM7SUFDdkIsSUFBQyxDQUFBLEdBQUcsQ0FBQyxTQUFXLENBQUEsQ0FBQSxDQUFFO0lBQ2xCLElBQUMsQ0FBQSxHQUFHLENBQUMsWUFBYyxDQUFBLENBQUEsQ0FBRTtXQUNyQixJQUFDLENBQUEsR0FBRyxDQUFDLFNBQVUsSUFBQyxDQUFBLFFBQVEsSUFBQyxDQUFBLElBQUksQ0FBQSxDQUFBLENBQUMsR0FBRyxJQUFDLENBQUEsSUFBSSxDQUFBLENBQUEsQ0FBQyxHQUFHLElBQUMsQ0FBQSxNQUFNLElBQUMsQ0FBQSxJQUFuQzs7O0VBWkc7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ1Z0QixJQUFBLEdBQWtCLE9BQWxCLENBQTBCLEtBQUEsQ0FBMUIsRUFBRSxFQUFjLENBQUEsQ0FBQSxDQUFoQixJQUFBLENBQUUsRUFBRixFQUFNLEdBQVUsQ0FBQSxDQUFBLENBQWhCLElBQUEsQ0FBTSxHQUFOLEVBQVcsRUFBSyxDQUFBLENBQUEsQ0FBaEIsSUFBQSxDQUFXO0FBR1gsU0FBVyxDQUFBLENBQUEsQ0FBRSxRQUFBLENBQUEsSUFBQTs7RUFBRyxZQUFBO0VBQ2QsUUFBTyxJQUFQO0FBQUEsRUFDRSxLQUFBLGtCQUFBO0FBQUEsV0FBc0I7RUFDdEIsS0FBQSxtQkFBQTtBQUFBLFdBQXVCOztXQUNUOzs7a0JBR0wsY0FBTixRQUFBLENBQUE7OztFQUVMLFVBQVcsQ0FBQSxDQUFBLENBQUU7RUFFYixRQUFBLENBQUEsVUFBQSxDQUFBLE1BQUEsRUFBQSxJQUFBOztJQUFDLElBQUMsQ0FBQTtJQUFVLElBQUMsQ0FBQSxzQkFBQSx1QkFBUyxFQUFBLEdBQUcsSUFBQyxDQUFBLHNCQUFBLHVCQUFTLEVBQUEsS0FBSyxJQUFDLENBQUEscUJBQUE7O01BQVEsRUFBQSxHQUFHLEdBQUUsQ0FBRjs7SUFDaEMsc0VBQUE7TUFBYztnQkFBWixHQUFHLEdBQUcsQ0FBSDs7SUFBdkIsSUFBQyxDQUFBLGFBQWUsQ0FBQSxDQUFBO0lBQ2hCLElBQUMsQ0FBQSxNQUFPLENBQUEsQ0FBQSxDQUFFLElBQUMsQ0FBQSxhQUFjLENBQUM7SUFDMUIsSUFBQyxDQUFBLE9BQVEsSUFBQyxDQUFBLEtBQUQ7O1lBRVgsU0FBUyxRQUFBLENBQUEsRUFBQTtXQUNQLElBQUMsQ0FBQSxhQUFjLENBQUMsRUFBRDs7WUFFakIscUJBQXVCLFFBQUEsQ0FBQSxDQUFBOztJQUNyQixLQUFNLENBQUEsQ0FBQSxDQUFFLENBQUMsSUFBQyxDQUFBLE1BQU8sQ0FBQSxDQUFBLENBQUUsRUFBRyxDQUFBLENBQUEsQ0FBRSxJQUFDLENBQUEsTUFBTSxDQUFFLENBQUEsQ0FBQSxDQUFBLENBQUssSUFBQyxDQUFBLE1BQU8sQ0FBQSxHQUFBLENBQUcsQ0FBaEI7QUFBQSxNQUFrQixFQUFLLENBQXZCO0FBQUEsTUFBeUIsRUFBSyxJQUFDLENBQUEsTUFBTyxDQUFBLENBQUEsQ0FBRSxDQUF4QztJQUNqQyxLQUFNLENBQUEsQ0FBQSxDQUFFLFVBQVUsQ0FBQSxDQUFBLENBQUMsQ0FBRSxDQUFBLENBQUEsQ0FBRSxJQUFDLENBQUEsTUFBTSxDQUFBLENBQUEsQ0FBQztXQUMvQixJQUFNLENBQUEsQ0FBQSxDQUFFLEtBQU0sQ0FBQSxDQUFBLENBQUUsQ0FBRSxDQUFBLENBQUEsQ0FBRSxDQUFDLFVBQVcsQ0FBQSxDQUFBLENBQUUsS0FBSzs7WUFFekMsU0FBUyxRQUFBLENBQUEsSUFBQTs7SUFBRyxTQUFBLEdBQUcsU0FBQTtJQUNiLElBQUMsQ0FBQSxLQUFLLENBQUMsQ0FBRSxDQUFBLENBQUEsQ0FBRSxDQUFFLENBQUEsQ0FBQSxDQUFFLElBQUMsQ0FBQTtJQUNoQixJQUFDLENBQUEsS0FBSyxDQUFDLENBQUUsQ0FBQSxDQUFBLENBQUU7SUFFWCx1RUFBQTs7TUFBSTtNQUNGLEdBQUcsQ0FBQyxDQUFFLENBQUEsQ0FBQSxDQUFFLElBQUMsQ0FBQSxLQUFLLENBQUM7b0JBQ2YsR0FBRyxDQUFDLENBQUUsQ0FBQSxDQUFBLENBQUUsSUFBQyxDQUFBLEtBQUssQ0FBQyxDQUFFLENBQUEsQ0FBQSxDQUFFLElBQUMsQ0FBQSxrQkFBSCxDQUF5QixDQUFBOzs7O1lBRTlDLE9BQU0sUUFBQSxDQUFBLElBQUE7O0lBQUcsV0FBQTtJQUNQLHNFQUFBOztNQUFJO01BQ0YsR0FBRyxDQUFDLFNBQVcsQ0FBQSxDQUFBLENBQUUsVUFBVyxJQUFBO29CQUM1QixHQUFHLENBQUMsU0FBVSxJQUFDLENBQUEsYUFBYyxDQUFDLENBQUQsQ0FBRyxDQUFDLEdBQUcsSUFBQyxDQUFBLGFBQWMsQ0FBQyxDQUFELENBQUcsQ0FBQyxDQUFFLENBQUEsQ0FBQSxDQUFFLElBQUksR0FBRyxFQUFwRDs7Ozs7Ozs7Ozs7O0FDdENwQixJQUFBLEdBQWtCLE9BQWxCLENBQTBCLEtBQUEsQ0FBMUIsRUFBRSxFQUFjLENBQUEsQ0FBQSxDQUFoQixJQUFBLENBQUUsRUFBRixFQUFNLEdBQVUsQ0FBQSxDQUFBLENBQWhCLElBQUEsQ0FBTSxHQUFOLEVBQVcsRUFBSyxDQUFBLENBQUEsQ0FBaEIsSUFBQSxDQUFXO0FBRVQsY0FBaUIsQ0FBQSxDQUFBLENBQUUsT0FBckIsQ0FBNkIsUUFBQSxDQUE3QixDQUFFO2lCQUVXLGFBQU4sUUFBQSxDQUFBLFVBQUE7O0VBRUwsTUFBTyxDQUFBLENBQUEsQ0FBRSxHQUFHLElBQUcsRUFBSDtFQUVaLFFBQUEsQ0FBQSxTQUFBLENBQUE7SUFDRSxTQUFBLGlDQUFNOztZQUVSLE9BQU0sUUFBQSxDQUFBLElBQUE7O0lBQUcsV0FBQTtJQUNQLElBQUMsQ0FBQSxJQUFLLENBQUEsQ0FBQSxDQUFFLElBQUMsQ0FBQSxNQUFNLENBQUMsUUFBUTtJQUN4QixJQUFDLENBQUEsTUFBTSxDQUFDLEtBQU0sQ0FBQSxDQUFBLENBQUUsSUFBQyxDQUFBLE1BQU0sQ0FBQyxNQUFPLENBQUEsQ0FBQSxDQUFFLElBQUMsQ0FBQTtJQUNsQyxJQUFDLENBQUEsV0FBVztJQUVaLElBQUcsTUFBTyxDQUFBLENBQUEsQ0FBRSxJQUFDLENBQUEsTUFBTSxDQUFDLFNBQXBCLENBQThCLENBQTlCO2FBQ0UsTUFBTSxDQUFDLE9BQVEsSUFBQyxDQUFBLEtBQUssTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUUsQ0FBQSxDQUFBLENBQUUsSUFBQyxDQUFBLElBQUssQ0FBQSxDQUFBLENBQUUsRUFBRyxDQUFBLENBQUEsQ0FBRSxNQUFNLENBQUMsTUFBL0M7Ozs7RUFiRTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDSnJCLGNBQWlCLENBQUEsQ0FBQSxDQUFFLE9BQXJCLENBQTZCLFFBQUEsQ0FBN0IsQ0FBRTtnQkFFVyxZQUFOLFFBQUEsQ0FBQSxVQUFBOztFQUNMLFFBQUEsQ0FBQSxRQUFBLENBQUE7SUFDRSxRQUFBLGlDQUFNOztZQUVSLE9BQU0sUUFBQSxDQUFBO0lBQ0osb0JBQUEsQ0FERiwwQkFDUTtJQUNOLElBQUMsQ0FBQSxHQUFHLENBQUMsU0FBVyxDQUFBLENBQUEsQ0FBRTtJQUNsQixJQUFDLENBQUEsR0FBRyxDQUFDLElBQUssQ0FBQSxDQUFBLENBQUssSUFBQyxDQUFBLElBQUksQ0FBQSxDQUFBLENBQUMsQ0FBQyxDQUFBLENBQUEsQ0FBQztJQUN2QixJQUFDLENBQUEsR0FBRyxDQUFDLFNBQVcsQ0FBQSxDQUFBLENBQUU7SUFDbEIsSUFBQyxDQUFBLEdBQUcsQ0FBQyxZQUFjLENBQUEsQ0FBQSxDQUFFO0lBQ3JCLElBQUMsQ0FBQSxHQUFHLENBQUMsVUFBVTtJQUNmLElBQUMsQ0FBQSxHQUFHLENBQUMsT0FBUSxHQUFHLElBQUMsQ0FBQSxJQUFJLENBQUEsQ0FBQSxDQUFDLENBQUUsQ0FBQSxDQUFBLENBQUUsR0FBYjtJQUNiLElBQUMsQ0FBQSxHQUFHLENBQUMsT0FBUSxJQUFDLENBQUEsTUFBTSxJQUFDLENBQUEsSUFBSSxDQUFBLENBQUEsQ0FBQyxDQUFFLENBQUEsQ0FBQSxDQUFFLEdBQWpCO0lBQ2IsSUFBQyxDQUFBLEdBQUcsQ0FBQyxPQUFNO0lBQ1gsSUFBQyxDQUFBLEdBQUcsQ0FBQyxTQUFVLElBQUMsQ0FBQSxNQUFNLENBQUMsTUFBTSxJQUFDLENBQUEsSUFBSSxDQUFBLENBQUEsQ0FBQyxHQUFHLElBQUMsQ0FBQSxJQUFJLENBQUEsQ0FBQSxDQUFDLENBQUUsQ0FBQSxDQUFBLENBQUUsSUFBQyxDQUFBLElBQUksQ0FBQSxDQUFBLENBQUMsR0FBRyxJQUFDLENBQUEsTUFBTSxJQUFDLENBQUEsSUFBbEQ7V0FDZixJQUFDLENBQUEsR0FBRyxDQUFDLFNBQVUsSUFBQyxDQUFBLE1BQU0sQ0FBQyxNQUFNLElBQUMsQ0FBQSxJQUFJLENBQUEsQ0FBQSxDQUFDLEdBQUcsSUFBQyxDQUFBLElBQUksQ0FBQSxDQUFBLENBQUMsQ0FBRSxDQUFBLENBQUEsQ0FBRSxJQUFDLENBQUEsSUFBSSxDQUFBLENBQUEsQ0FBQyxHQUFHLElBQUMsQ0FBQSxNQUFNLElBQUMsQ0FBQSxJQUFsRDs7O0VBZkc7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0Z0QixJQUFBLEdBQWMsT0FBZCxDQUFzQixLQUFBLENBQXRCLEVBQUUsRUFBVSxDQUFBLENBQUEsQ0FBWixJQUFBLENBQUUsRUFBRixFQUFNLEdBQU0sQ0FBQSxDQUFBLENBQVosSUFBQSxDQUFNO2FBR08sU0FBTixRQUFBLENBQUE7OztFQUVMLFFBQUEsQ0FBQSxLQUFBLENBQUEsU0FBQTtJQUVFLElBQUMsQ0FBQSxLQUFNLENBQUEsQ0FBQSxDQUFFO0lBQ1QsSUFBQyxDQUFBLEtBQU0sQ0FBQSxDQUFBLENBQUU7SUFFVCxJQUFDLENBQUEsTUFBTyxDQUFBLENBQUEsQ0FBRTtNQUFBLE1BQU07SUFBTjtJQUVWLElBQUcsU0FBSDtNQUNFLElBQUMsQ0FBQSxRQUFBLEVBQU8sU0FBQTs7O1lBRVosT0FBTSxRQUFBLENBQUE7V0FBRyxJQUFDLENBQUEsTUFBTSxDQUFDLEtBQUk7O1lBRXJCLFlBQVEsUUFBQSxDQUFBLElBQUE7SUFBRyxJQUFDLENBQUEsY0FBQSxRQUFRLElBQUMsQ0FBQSxhQUFBLE9BQU8sSUFBQyxDQUFBLGFBQUE7O1lBRTdCLFdBQVcsUUFBQSxDQUFBLFNBQUE7SUFDVCxJQUFDLENBQUEsS0FBSyxDQUFDLElBQUssUUFBQSxDQUFBLEVBQUE7YUFBQSxFQUFBLENBQUMsS0FBSyxTQUFBO0tBQVA7V0FDWCxJQUFDLENBQUEsS0FBSyxDQUFDLElBQUssUUFBQSxDQUFBLEVBQUE7YUFBQSxFQUFBLENBQUMsS0FBSyxTQUFBO0tBQVA7Ozs7Ozs7Ozs7QUNyQmYsSUFBQSxHQUFjLE9BQWQsQ0FBc0IsS0FBQSxDQUF0QixFQUFFLEVBQVUsQ0FBQSxDQUFBLENBQVosSUFBQSxDQUFFLEVBQUYsRUFBTSxHQUFNLENBQUEsQ0FBQSxDQUFaLElBQUEsQ0FBTTtBQUVKLElBQU8sQ0FBQSxDQUFBLENBQUUsT0FBWCxDQUFtQixjQUFBLENBQW5CLENBQUU7QUFDQSxjQUFpQixDQUFBLENBQUEsQ0FBRSxPQUFyQixDQUE2Qix3QkFBQSxDQUE3QixDQUFFO2dCQUdXLFlBQU4sUUFBQSxDQUFBLFVBQUE7O0VBRUwsU0FBVyxDQUFBLENBQUEsQ0FBRSxDQUFFO0lBQUUsTUFBTTtJQUFrQixRQUFTO0VBQW5DLENBQUY7RUFFYixRQUFBLENBQUEsUUFBQSxDQUFBO0lBQ0UsUUFBQSxpQ0FBTTtJQUNOLElBQUMsQ0FBQSxjQUFlO01BQUUsV0FBQTtJQUFGLENBQUE7O1lBRWxCLFlBQVcsUUFBQSxDQUFBO1dBQUc7OztFQVJNO21CQVdULGVBQU4sUUFBQSxDQUFBLFVBQUE7O0VBRUwsU0FBVyxDQUFBLENBQUEsQ0FBRSxDQUFFO0lBQUUsTUFBTTtJQUFvQixRQUFTO0VBQXJDLENBQUY7RUFFYixRQUFBLENBQUEsV0FBQSxDQUFBO0lBQ0UsV0FBQSxpQ0FBTTtJQUNOLElBQUMsQ0FBQSxjQUFlO01BQUUsV0FBQTtJQUFGLENBQUE7O1lBRWxCLFlBQVcsUUFBQSxDQUFBO1dBQUc7OztFQVJTO21CQVdaLGVBQU4sUUFBQSxDQUFBLFVBQUE7O0VBRUwsU0FBVyxDQUFBLENBQUEsQ0FBRSxDQUFFO0lBQUUsTUFBTTtJQUFxQixRQUFTO0VBQXRDLENBQUY7RUFFYixRQUFBLENBQUEsV0FBQSxDQUFBO0lBQ0UsV0FBQSxpQ0FBTTtJQUNOLElBQUMsQ0FBQSxjQUFlO01BQUUsV0FBQTtJQUFGLENBQUE7O1lBRWxCLFlBQVcsUUFBQSxDQUFBO1dBQUc7OztFQVJTO2VBV1osV0FBTixRQUFBLENBQUEsVUFBQTs7Ozs7O0VBQWM7dUJBRVIsbUJBQU4sUUFBQSxDQUFBLFVBQUE7O1lBRUwsT0FBTSxRQUFBLENBQUE7SUFDSixJQUFDLENBQUEsWUFBYSxZQUFBO0lBQ2QsSUFBQyxDQUFBLEdBQUcsQ0FBQyxXQUFhLENBQUEsQ0FBQSxDQUFFLElBQUMsQ0FBQSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBRCxDQUFHLENBQUMsS0FBSTtJQUM5QyxJQUFDLENBQUEsR0FBRyxDQUFDLFNBQVUsR0FBRyxHQUFHLElBQUMsQ0FBQSxNQUFNLElBQUMsQ0FBQSxJQUFkO0lBQ2YsSUFBQyxDQUFBLEdBQUcsQ0FBQyxXQUFhLENBQUEsQ0FBQSxDQUFFO0lBQ3BCLElBQUMsQ0FBQTtXQUNELElBQUMsQ0FBQSxXQUFZLFlBQUE7Ozs7OztFQVJZO3NCQVVoQixrQkFBTixRQUFBLENBQUEsVUFBQTs7WUFFTCxPQUFNLFFBQUEsQ0FBQTs7SUFDSixvQkFBQSxDQURGLDBCQUNRO0lBRU4sS0FBTSxDQUFBLENBQUEsQ0FNQSxRQUFBLENBQUEsRUFBQTthQUFBLEVBQUEsQ0FBQyxPQUFPLEdBQUcsQ0FBSDs7SUFEUixRQUFBLENBQUEsRUFBQTthQUFBLEVBQUEsQ0FBQyxRQUFRLE1BQU0sRUFBTjs7SUFEVixRQUFBLENBQUEsRUFBQTthQUFHLE9BQU8sRUFBQTs7SUFEVixDQUFBLFFBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQTtBQUFBLE1BQUEsTUFBQSxDQUFDLElBQUQsQ0FBQSxDQUFBLENBQUEsRUFBQSxDQUFBO0FBQUEsSUFBQSxDQUFBO0lBREEsSUFBSSxDQUFDO0lBREwsQ0FBQSxRQUFBLENBQUEsRUFBQSxDQUFBLENBQUE7QUFBQSxNQUFBLE1BQUEsQ0FBQyxHQUFELENBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQTtBQUFBLElBQUEsQ0FBQTtJQURHLElBQUMsQ0FBQSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBRCxDQUFHLENBQUMsS0FBSTtJQVFsQyxJQUFDLENBQUEsR0FBRyxDQUFDLFNBQVcsQ0FBQSxDQUFBLENBQUU7SUFDbEIsSUFBQyxDQUFBLEdBQUcsQ0FBQyxJQUFLLENBQUEsQ0FBQSxDQUFLLElBQUMsQ0FBQSxJQUFJLENBQUEsQ0FBQSxDQUFDLENBQUMsQ0FBQSxDQUFBLENBQUM7SUFDdkIsSUFBQyxDQUFBLEdBQUcsQ0FBQyxTQUFXLENBQUEsQ0FBQSxDQUFFO0lBQ2xCLElBQUMsQ0FBQSxHQUFHLENBQUMsWUFBYyxDQUFBLENBQUEsQ0FBRTtXQUNyQixJQUFDLENBQUEsR0FBRyxDQUFDLFNBQVUsT0FBTyxJQUFDLENBQUEsSUFBSSxDQUFBLENBQUEsQ0FBQyxHQUFHLElBQUMsQ0FBQSxJQUFJLENBQUEsQ0FBQSxDQUFDLEdBQUksSUFBQyxDQUFBLE1BQU0sSUFBQyxDQUFBLElBQWxDOzs7Ozs7RUFqQlM7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ25ENUIsSUFBQSxHQUFrQixPQUFsQixDQUEwQixLQUFBLENBQTFCLEVBQUUsRUFBYyxDQUFBLENBQUEsQ0FBaEIsSUFBQSxDQUFFLEVBQUYsRUFBTSxHQUFVLENBQUEsQ0FBQSxDQUFoQixJQUFBLENBQU0sR0FBTixFQUFXLEVBQUssQ0FBQSxDQUFBLENBQWhCLElBQUEsQ0FBVztBQUVULE9BQVUsQ0FBQSxDQUFBLENBQUUsT0FBZCxDQUFzQixXQUFBLENBQXRCLENBQUU7Y0FFVyxVQUFOLFFBQUEsQ0FBQSxVQUFBOztFQUVMLFFBQUEsQ0FBQSxNQUFBLENBQUEsSUFBQTs7SUFBRyxJQUFDLENBQUEsV0FBQTtJQUNGLE1BQUEsaUNBQU07SUFFTixJQUFDLENBQUEsR0FBSSxDQUFBLENBQUEsQ0FBRSxJQUFJO0lBRVgsSUFBQyxDQUFBLElBQUssQ0FBQSxDQUFBLENBQUUsR0FBRyxHQUFFLENBQUY7SUFFWCxJQUFDLENBQUEsR0FBRyxDQUFDLE1BQU8sQ0FBQSxDQUFBLENBQUUsUUFBQSxDQUFBO01BQ1osS0FBQyxDQUFBLEtBQU8sQ0FBQSxDQUFBLENBQUUsS0FBQyxDQUFBLE1BQU0sQ0FBQyxLQUFPLENBQUEsQ0FBQSxDQUFFLEtBQUMsQ0FBQSxHQUFHLENBQUM7TUFDaEMsS0FBQyxDQUFBLE1BQU8sQ0FBQSxDQUFBLENBQUUsS0FBQyxDQUFBLE1BQU0sQ0FBQyxNQUFPLENBQUEsQ0FBQSxDQUFFLEtBQUMsQ0FBQSxHQUFHLENBQUM7TUFDaEMsS0FBQyxDQUFBLElBQUssQ0FBQSxDQUFBLENBQUUsR0FBRyxLQUFDLENBQUEsT0FBTyxLQUFDLENBQUEsTUFBVDtNQUNYLEtBQUMsQ0FBQSxHQUFHLENBQUMsVUFBVyxLQUFDLENBQUEsS0FBSyxHQUFHLENBQVQ7YUFDaEIsY0FBYyxDQUFDLElBQUksQ0FBQyxLQUFJOztJQUUxQixJQUFDLENBQUEsR0FBRyxDQUFDLEdBQUksQ0FBQSxDQUFBLENBQUUsSUFBQyxDQUFBO0lBRVosSUFBQyxDQUFBLE1BQU8sQ0FBQSxDQUFBLENBQUU7O1lBRVosWUFBVyxRQUFBLENBQUE7V0FDVDtNQUFBLEtBQUssSUFBQyxDQUFBO0lBQU47OztFQXJCZ0I7Ozs7Ozs7Ozs7Ozs7Ozs7OztVQ0piLEVBQUcsQ0FBQSxDQUFBLENBQUUsUUFBQSxDQUFBLEVBQUE7U0FBRzs7V0FFUixHQUFJLENBQUEsQ0FBQSxDQUFFLFFBQUEsQ0FBQTtFQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxTQUFTLFNBQVQ7U0FBWSxTQUFDLENBQUEsQ0FBQTs7WUFFeEMsSUFBSyxDQUFBLENBQUEsQ0FBRSxRQUFBLENBQUEsQ0FBQTtnQkFBTyxRQUFBLENBQUEsQ0FBQSxFQUFBLENBQUE7V0FBVyxFQUFFLEdBQUcsQ0FBSDs7O2FBRTNCLEtBQU0sQ0FBQSxDQUFBLENBQUUsS0FBSyxVQUFBO2FBRWIsS0FBTSxDQUFBLENBQUEsQ0FBRSxNQUFNLENBQUE7VUFFZCxFQUFHLENBQUEsQ0FBQSxDQUFFLFFBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQTtFQUFVLElBQUcsQ0FBQSxRQUFIO1dBQVc7TUFBRSxHQUFBO01BQUcsR0FBQTtJQUFMO0dBQVM7V0FBSztNQUFFLEdBQUcsQ0FBQyxDQUFDO01BQUcsR0FBRyxDQUFDLENBQUM7SUFBZjs7O2FBRXhDLEtBQU0sQ0FBQSxDQUFBLENBQUUsSUFBSSxDQUFDO1lBRWIsSUFBSyxDQUFBLENBQUEsQ0FBRSxDQUFBLFFBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQTtBQUFBLEVBQUEsTUFBQSxDQUFBLEVBQUEsQ0FBQSxDQUFBLENBQUcsSUFBSSxDQUFDLE1BQVIsQ0FBYyxDQUFkLENBQUE7QUFBQSxDQUFBO2tCQUVQLFVBQVksQ0FBQSxDQUFBLENBQUUsUUFBQSxDQUFBLEVBQUE7U0FBUSxFQUFFLENBQUMsS0FBRCxDQUFPLElBQVAsQ0FBWSxFQUFFLENBQUMsTUFBSCxDQUFMLENBQVA7O1lBRXhCLElBQUssQ0FBQSxDQUFBLENBQUUsSUFBSSxDQUFDO1dBRVosR0FBSSxDQUFBLENBQUEsQ0FBRSxRQUFBLENBQUEsQ0FBQSxFQUFBLENBQUE7O0VBQ1gsRUFBRyxDQUFBLENBQUEsQ0FBRSxDQUFDLENBQUMsQ0FBRSxDQUFBLENBQUEsQ0FBRSxDQUFDLENBQUM7RUFDYixFQUFHLENBQUEsQ0FBQSxDQUFFLENBQUMsQ0FBQyxDQUFFLENBQUEsQ0FBQSxDQUFFLENBQUMsQ0FBQztTQUNiLEtBQUssRUFBRyxDQUFBLENBQUEsQ0FBRSxFQUFHLENBQUEsQ0FBQSxDQUFFLEVBQUcsQ0FBQSxDQUFBLENBQUUsRUFBZjs7V0FFQSxHQUFJLENBQUEsQ0FBQSxDQUFFO1lBRU4sSUFBSyxDQUFBLENBQUEsQ0FBRSxRQUFBLENBQUEsRUFBQTs7RUFBUSw4Q0FBQTttQkFBaUIsYUFBRztlQUFoQixLQUFHOzs7O2dCQUV0QixRQUFVLENBQUEsQ0FBQSxDQUFFLFFBQUEsQ0FBQTtTQUFHLElBQUksTUFBRyxTQUFIOztxQkFFbkIsYUFBZSxDQUFBLENBQUEsQ0FBRSxRQUFBLENBQUEsQ0FBQTtTQUN0QixTQUFTLENBQUMsbUJBQXNCO0lBQUUsT0FBTztFQUFULEdBQWlCLEdBQUcsUUFBcEI7O1lBRTNCLElBQUssQ0FBQSxDQUFBLENBQUUsUUFBQSxDQUFBLEVBQUE7O0VBQUcsVUFBVyxFQUFYO0lBQU07a0JBQVc7Ozs7aUJBRTNCLFNBQVcsQ0FBQSxDQUFBLENBQUUsUUFBQSxDQUFBLEdBQUEsRUFBQSxDQUFBOztFQUFNLGNBQUEsSUFBSTtFQUM1QixLQUFNLENBQUEsQ0FBQSxDQUFFLElBQUk7RUFDWixLQUFLLENBQUMsR0FBSSxDQUFBLENBQUEsQ0FBRTtFQUNaLEtBQUssQ0FBQyxNQUFPLENBQUEsQ0FBQSxDQUFFO0VBQ2YsTUFBQSxDQUFPLEtBQVA7O1dBRUssR0FBSSxDQUFBLENBQUEsQ0FBRSxJQUFJLENBQUM7Y0FFWCxNQUFPLENBQUEsQ0FBQSxDQUFFLFFBQUEsQ0FBQSxFQUFBO2lDQUFHLEVBQUEsR0FBRzs7a0JBRWYsVUFBVyxDQUFBLENBQUEsQ0FBRSxRQUFBLENBQUEsTUFBQSxFQUFBLFdBQUE7U0FBeUIsR0FBRyxNQUFNLENBQUMsQ0FBRSxDQUFBLENBQUEsQ0FBRSxXQUFXLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBRSxDQUFBLENBQUEsQ0FBRSxXQUFXLENBQUMsQ0FBakQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzVDaEQsSUFBQSxHQUF3QixPQUF4QixDQUFnQyxLQUFBLENBQWhDLEVBQUUsRUFBb0IsQ0FBQSxDQUFBLENBQXRCLElBQUEsQ0FBRSxFQUFGLEVBQU0sR0FBZ0IsQ0FBQSxDQUFBLENBQXRCLElBQUEsQ0FBTSxHQUFOLEVBQVcsSUFBVyxDQUFBLENBQUEsQ0FBdEIsSUFBQSxDQUFXLElBQVgsRUFBaUIsRUFBSyxDQUFBLENBQUEsQ0FBdEIsSUFBQSxDQUFpQjtBQUVmLElBQWMsQ0FBQSxDQUFBLENBQUUsT0FBbEIsQ0FBMEIsUUFBQSxDQUExQixDQUFFO0FBQ0EsTUFBYyxDQUFBLENBQUEsQ0FBRSxPQUFsQixDQUEwQixVQUFBLENBQTFCLENBQUU7QUFDQSxVQUFjLENBQUEsQ0FBQSxDQUFFLE9BQWxCLENBQTBCLGVBQUEsQ0FBMUIsQ0FBRTtBQUVBLE1BQWMsQ0FBQSxDQUFBLENBQUUsT0FBbEIsQ0FBMEIsVUFBQSxDQUExQixDQUFFO0FBQ0EsT0FBYyxDQUFBLENBQUEsQ0FBRSxPQUFsQixDQUEwQixhQUFBLENBQTFCLENBQUU7QUFDQSxPQUFjLENBQUEsQ0FBQSxDQUFFLE9BQWxCLENBQTBCLGFBQUEsQ0FBMUIsQ0FBRTtBQUNBLFNBQWMsQ0FBQSxDQUFBLENBQUUsT0FBbEIsQ0FBMEIsZUFBQSxDQUExQixDQUFFO0FBQ0EsU0FBYyxDQUFBLENBQUEsQ0FBRSxPQUFsQixDQUEwQixlQUFBLENBQTFCLENBQUU7QUFDQSxXQUFjLENBQUEsQ0FBQSxDQUFFLE9BQWxCLENBQTBCLGlCQUFBLENBQTFCLENBQUU7QUFFQSxNQUFjLENBQUEsQ0FBQSxDQUFFLE9BQWxCLENBQTBCLHVCQUFBLENBQTFCLENBQUU7QUFDQSxNQUFjLENBQUEsQ0FBQSxDQUFFLE9BQWxCLENBQTBCLHVCQUFBLENBQTFCLENBQUU7QUFDQSxRQUFjLENBQUEsQ0FBQSxDQUFFLE9BQWxCLENBQTBCLHlCQUFBLENBQTFCLENBQUU7QUFDQSxTQUFjLENBQUEsQ0FBQSxDQUFFLE9BQWxCLENBQTBCLDBCQUFBLENBQTFCLENBQUU7QUFDQSxVQUFjLENBQUEsQ0FBQSxDQUFFLE9BQWxCLENBQTBCLDJCQUFBLENBQTFCLENBQUU7QUFDQSxRQUFjLENBQUEsQ0FBQSxDQUFFLE9BQWxCLENBQTBCLHlCQUFBLENBQTFCLENBQUU7QUFDQSxPQUFjLENBQUEsQ0FBQSxDQUFFLE9BQWxCLENBQTBCLHdCQUFBLENBQTFCLENBQUU7QUFFRixJQUFBLEdBQWtDLE9BQWxDLENBQTBDLFFBQUEsQ0FBMUMsRUFBRSxXQUE4QixDQUFBLENBQUEsQ0FBaEMsSUFBQSxDQUFFLFdBQUYsRUFBZSxjQUFpQixDQUFBLENBQUEsQ0FBaEMsSUFBQSxDQUFlOzBCQUtSLGtCQUFxQixDQUFBLENBQUEsQ0FBRSxRQUFBLENBQUE7O0VBSTVCLE1BQU8sQ0FBQSxDQUFBLENBQ0w7SUFBQSxPQUFPO0lBQ1AsT0FBTztJQUNQLFFBQVE7RUFGUjtFQU9GLE1BQU8sQ0FBQSxDQUFBLENBQUUsSUFBSTtFQUViLElBQU0sQ0FBQSxDQUFBLEtBQU0sUUFBUTtJQUFBLFNBQVM7RUFBVCxDQUFBO0VBQ3BCLElBQU0sQ0FBQSxDQUFBLEtBQU0sUUFBUTtJQUFBLFNBQVM7RUFBVCxDQUFBO0VBQ3BCLElBQU0sQ0FBQSxDQUFBLEtBQU0sUUFBUTtJQUFBLFNBQVM7RUFBVCxDQUFBO0VBQ3BCLElBQU0sQ0FBQSxDQUFBLEtBQU0sUUFBUTtJQUFBLFNBQVM7RUFBVCxDQUFBO0VBRXBCLEtBQU0sQ0FBQSxDQUFBLEtBQU0sVUFBVTtJQUFBLE1BQU07SUFBSSxNQUFNO0lBQUssUUFBUTtFQUE3QixDQUFBO0VBQ3RCLElBQU0sQ0FBQSxDQUFBLEtBQU0sVUFBVTtJQUFBLGFBQWM7RUFBZCxDQUFBO0VBQ3RCLEdBQU0sQ0FBQSxDQUFBLEtBQU0sUUFBUTtJQUFBLFdBQVc7RUFBWCxDQUFBO0VBRXBCLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxPQUFXLENBQUEsQ0FBQSxLQUFNLFdBQVc7SUFBQSxTQUFTO0lBQU8sU0FBVSxPQUFPLEdBQUE7SUFBVSxNQUFNO0lBQUksS0FBSyxHQUFHLElBQUksR0FBSjtFQUE3RCxDQUFBLENBQTVCO0VBQ2xCLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxRQUFXLENBQUEsQ0FBQSxLQUFNLFdBQVc7SUFBQSxTQUFTO0lBQU8sU0FBVSxTQUFTLElBQUE7SUFBUSxNQUFNO0lBQUksS0FBSyxHQUFHLElBQUksR0FBSjtFQUE3RCxDQUFBLENBQTVCO0VBQ2xCLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxTQUFXLENBQUEsQ0FBQSxLQUFNLFdBQVc7SUFBQSxTQUFTO0lBQU8sU0FBVSxTQUFTLEtBQUE7SUFBUSxNQUFNO0lBQUssS0FBSyxHQUFJLElBQUcsR0FBSDtFQUEvRCxDQUFBLENBQTVCO0VBR2xCLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxLQUFPLENBQUEsQ0FBQSxLQUFNLFdBQVc7SUFBQSxTQUFTO0lBQU8sU0FBVSxPQUFPLElBQUE7SUFBUSxNQUFNO0lBQUssS0FBSyxHQUFHLElBQUcsR0FBSDtFQUE1RCxDQUFBLENBQXhCO0VBQ2xCLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxLQUFPLENBQUEsQ0FBQSxLQUFNLFdBQVc7SUFBQSxTQUFTO0lBQU8sU0FBVSxPQUFPLElBQUE7SUFBUSxNQUFNO0lBQUssS0FBSyxHQUFHLElBQUcsR0FBSDtFQUE1RCxDQUFBLENBQXhCO0VBQ2xCLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxLQUFPLENBQUEsQ0FBQSxLQUFNLFdBQVc7SUFBQSxTQUFTO0lBQU8sU0FBVSxPQUFPLElBQUE7SUFBUSxNQUFNO0lBQUssS0FBSyxHQUFHLElBQUcsR0FBSDtFQUE1RCxDQUFBLENBQXhCO0VBQ2xCLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxLQUFPLENBQUEsQ0FBQSxLQUFNLFdBQVc7SUFBQSxTQUFTO0lBQU8sU0FBVSxPQUFPLElBQUE7SUFBUSxNQUFNO0lBQUss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QUMsR0FBRyxJQUFDLENBQUEsR0FBRyxDQUFDLENBQWY7SUFDZixJQUFDLENBQUEsTUFBTSxDQUFDLE9BQVEsSUFBQyxDQUFBLEdBQUQ7SUFDaEIsSUFBQyxDQUFBLE1BQU0sQ0FBQyxPQUFRLElBQUMsQ0FBQSxHQUFEO1dBQ2hCLElBQUMsQ0FBQSxPQUFPLENBQUMsT0FBUSxJQUFDLENBQUEsR0FBRDs7WUFFbkIsaUJBQWlCLFFBQUEsQ0FBQSxLQUFBO1dBQ2YsSUFBQyxDQUFBLE1BQU0sQ0FBQyxTQUFTLEtBQUE7O1lBRW5CLFlBQVcsUUFBQSxDQUFBO1dBQ1QsSUFBQyxDQUFBLEdBQUcsQ0FBQyxVQUFTOztFQUVoQixVQUFDLENBQUEsSUFBSyxDQUFBLENBQUEsQ0FBRSxRQUFBLENBQUEsQ0FBQSxFQUFBLENBQUE7ZUFDRixZQUFhLEtBQUs7TUFBQSxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDO01BQU0sSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQztJQUFuRCxDQUFBLENBQVY7O0VBRWQsVUFBQyxDQUFBLEtBQU0sQ0FBQSxDQUFBLENBQUUsUUFBQSxDQUFBOztJQUFJO0lBQ1gsb0RBQUE7O29CQUNFLElBQUMsQ0FBQSxLQUFLLEtBQUssQ0FBQyxDQUFELEdBQUssS0FBSyxDQUFDLENBQUMsQ0FBQSxDQUFBLENBQUEsQ0FBRixDQUFmOzs7Ozs7Ozs7Ozs7QUNoRVYsT0FBVSxDQUFBLENBQUEsQ0FBRSxPQUFkLENBQXNCLFdBQUEsQ0FBdEIsQ0FBRTtpQkFFVyxhQUFOLFFBQUEsQ0FBQSxVQUFBOztFQUVMLFFBQUEsQ0FBQSxTQUFBLENBQUE7SUFDRSxTQUFBLHVCQUFNO01BQUEsTUFBTTtJQUFOLENBQUE7O1lBRVIsVUFBUyxRQUFBLENBQUEsSUFBQTtXQUNQLElBQUksQ0FBQyxZQUFhLElBQUMsQ0FBQSxNQUFEOzs7RUFOQyIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJcbiMgQXBwbGljYXRpb24gQ29uZmlnXG5cbiMgZ2xvYmFsLkNPTkZJR19FVkVOVF9TT1VSQ0UgPSBFVkVOVF9TT1VSQ0VfV0VCU09DS0VUU1xuZ2xvYmFsLkNPTkZJR19FVkVOVF9TT1VSQ0UgPSBFVkVOVF9TT1VSQ0VfQlJPV1NFUlxuXG5nbG9iYWwuQ09ORklHX1NPQ0tFVF9TRVJWRVJfQUREUiA9ICdodHRwOi8vbG9jYWxob3N0OjkwMDAnXG4iLCJcbnsgaWQsIGxvZyB9ID0gcmVxdWlyZSBcXHN0ZFxuXG5leHBvcnQgY2xhc3MgQmxpdHRlclxuXG4gIGlkeCA9IGRvIChpID0gMCkgLT4gLT4gaSsrXG5cbiAgKHsgQHNpemUgfSkgLT5cblxuICAgIEBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGUtZWxlbWVudCBcXGNhbnZhc1xuICAgIEBjYW52YXMud2lkdGggPSBAY2FudmFzLmhlaWdodCA9IEBzaXplXG4gICAgQGN0eCA9IEBjYW52YXMuZ2V0LWNvbnRleHQgXFwyZFxuICAgIEBpZCA9IGlkeCFcblxuICBjbGVhcjogLT5cbiAgICBAY3R4LmNsZWFyLXJlY3QgMCwgMCwgQHNpemUsIEBzaXplXG5cbiAgYmxpdC10bzogKGN0eCwgeCwgeSwgdywgaCkgLT5cbiAgICBpZiB3PyBhbmQgaD9cbiAgICAgIGN0eC5kcmF3LWltYWdlIEBjYW52YXMsIHgsIHksIHcsIGhcbiAgICBlbHNlXG4gICAgICBjdHguZHJhdy1pbWFnZSBAY2FudmFzLCB4LCB5XG5cbiIsIlxueyBpZCwgbG9nLCBkZWZlciB9ID0gcmVxdWlyZSBcXHN0ZFxuXG5cbmV4cG9ydCBjbGFzcyBEcmFnTW9uaXRvclxuXG4gIG5vcm1hbGlzZS1tb3VzZSA9ICjOuykgLT4gKHsgcGFnZVgsIHBhZ2VZIH0pIC0+IM67IHBhZ2VYLCBwYWdlWVxuICBub3JtYWxpc2UtdG91Y2ggPSBpZFxuXG4gIC0+XG4gICAgQHN0YXRlID1cbiAgICAgIGVuYWJsZWQ6IHllc1xuICAgICAgZHJhZ2dpbmc6IG5vXG4gICAgICByZWxlYXNlZDogbm9cbiAgICAgIGRvd246IG5vXG4gICAgICDOlHg6IDBcbiAgICAgIM6UeTogMFxuICAgICAgbGFzdDogWzAgMF1cblxuICAgIEBjYWxsYmFja3MgPVxuICAgICAgZHJhZzogaWRcbiAgICAgIGRvbmU6IGlkXG5cbiAgICAjIExpc3RlbmVyc1xuXG4gICAgZG9jdW1lbnQuYWRkLWV2ZW50LWxpc3RlbmVyIFxca2V5ZG93biwgKHsgd2hpY2ggfSkgfj5cbiAgICAgIGlmIHdoaWNoIGlzIDE2XG4gICAgICAgIEBwb2ludGVyLWVuZ2FnZSFcblxuICAgIGRvY3VtZW50LmFkZC1ldmVudC1saXN0ZW5lciBcXGtleXVwLCAoeyB3aGljaCB9KSB+PlxuICAgICAgaWYgd2hpY2ggaXMgMTZcbiAgICAgICAgQHBvaW50ZXItcmVsZWFzZSFcblxuICAgIGRvY3VtZW50LmFkZC1ldmVudC1saXN0ZW5lciBcXG1vdXNlZG93biwgbm9ybWFsaXNlLW1vdXNlIEBwb2ludGVyLWVuZ2FnZVxuICAgIGRvY3VtZW50LmFkZC1ldmVudC1saXN0ZW5lciBcXG1vdXNlbW92ZSwgbm9ybWFsaXNlLW1vdXNlIEBwb2ludGVyLW1vdmVcbiAgICBkb2N1bWVudC5hZGQtZXZlbnQtbGlzdGVuZXIgXFxtb3VzZXVwLCAgIG5vcm1hbGlzZS1tb3VzZSBAcG9pbnRlci1yZWxlYXNlXG5cbiAgICBkb2N1bWVudC5hZGQtZXZlbnQtbGlzdGVuZXIgXFx0b3VjaHN0YXJ0LCBub3JtYWxpc2UtdG91Y2ggQHBvaW50ZXItZW5nYWdlXG4gICAgZG9jdW1lbnQuYWRkLWV2ZW50LWxpc3RlbmVyIFxcdG91Y2htb3ZlLCAgbm9ybWFsaXNlLXRvdWNoIEBwb2ludGVyLW1vdmVcbiAgICBkb2N1bWVudC5hZGQtZXZlbnQtbGlzdGVuZXIgXFx0b3VjaGVuZCwgICBub3JtYWxpc2UtdG91Y2ggQHBvaW50ZXItcmVsZWFzZVxuXG5cbiAgZGlzcGF0Y2g6IChldmVudCwgLi4uYXJncykgLT5cbiAgICBpZiBAc3RhdGUuZW5hYmxlZFxuICAgICAgQGNhbGxiYWNrc1tldmVudF0gLi4uYXJnc1xuXG4gIHBvaW50ZXItbW92ZTogKHgsIHkpIH4+XG4gICAgaWYgQHN0YXRlLmRvd24gb3IgQHN0YXRlLmRyYWdnaW5nICMgT25seSB1cGdyYWRlIHRvIGRyYWdnaW5nIHdoZW4gaXQgYWN0dWFsbHkgbW92ZXNcbiAgICAgIEBzdGF0ZS5kcmFnZ2luZyA9IHllc1xuICAgICAgQHN0YXRlLs6UeCA9IM6UeCA9IHggLSBAc3RhdGUubGFzdC4wXG4gICAgICBAc3RhdGUuzpR5ID0gzpR5ID0geSAtIEBzdGF0ZS5sYXN0LjFcbiAgICAgIEBzdGF0ZS5sYXN0ID0gW3gsIHldXG4gICAgICBAZGlzcGF0Y2ggXFxkcmFnLCDOlHgsIM6UeVxuXG4gIHBvaW50ZXItZW5nYWdlOiAoeCwgeSkgfj5cbiAgICBAc3RhdGUuZG93biA9IHllc1xuICAgIEBzdGF0ZS5sYXN0ID0gW3gsIHldXG5cbiAgcG9pbnRlci1yZWxlYXNlOiAoeCA9IEBzdGF0ZS5sYXN0LjAsIHkgPSBAc3RhdGUubGFzdC4xKSB+PlxuICAgIGRlZmVyIH4+IEBzdGF0ZS5kcmFnZ2luZyA9IG5vICAjIFNvIHRoYXQgYW55IGNsaWNrcyBjYW4gdGVsbCB0aGV5IHdlcmUgc3VwcG9zZWQgdG8gYmUgYSBkcmFnXG4gICAgQHN0YXRlLnJlbGVhc2VkID0geWVzXG4gICAgQHN0YXRlLmxhc3QgPSBbeCwgeV1cbiAgICBAc3RhdGUuZG93biA9IG5vXG4gICAgQGRpc3BhdGNoIFxcZHJhZywgMCwgMFxuICAgIEBkaXNwYXRjaCBcXGRvbmUsIEBzdGF0ZVxuXG5cbiAgIyBIZWxwZXJzXG5cbiAgb24tcG9pbnRlci1kcmFnOiAgICAozrspIC0+IEBjYWxsYmFja3MuZHJhZyA9IM67XG4gIG9uLXBvaW50ZXItcmVsZWFzZTogKM67KSAtPiBAY2FsbGJhY2tzLmRvbmUgPSDOu1xuXG4gIHRvZ2dsZS1ldmVudC1saXN0ZW5pbmc6IChzdGF0ZSkgLT5cbiAgICBAc3RhdGUuZW5hYmxlZCA9IHN0YXRlXG5cblxuIiwiXG57IEV2ZW50U291cmNlIH0gPSByZXF1aXJlIFxcLi9ldmVudC1zb3VyY2VcblxuZXhwb3J0IGNsYXNzIEJyb3dzZXJFdmVudFNvdXJjZSBleHRlbmRzIEV2ZW50U291cmNlXG5cbiAgbGlzdGVuZXI6IChldmVudC1uYW1lLCBwcm9jZXNzb3IpIC0+XG4gICAgZG9jdW1lbnQuYWRkLWV2ZW50LWxpc3RlbmVyIGV2ZW50LW5hbWUsIHByb2Nlc3NvciA+PiBAZGlzcGF0Y2ggZXZlbnQtbmFtZVxuXG4iLCJcbiMgR2xvYmFsIFJlZmVyZW5jZSBDb25zdGFudHNcblxuZ2xvYmFsLklOVEVSQUNUSU9OX01PREVfSURMRSAgID0gU3ltYm9sIFxcaWRsZVxuZ2xvYmFsLklOVEVSQUNUSU9OX01PREVfSE9UICAgID0gU3ltYm9sIFxcaG90XG5nbG9iYWwuSU5URVJBQ1RJT05fTU9ERV9BQ1RJVkUgPSBTeW1ib2wgXFxhY3RpdmVcblxuZ2xvYmFsLkxJTktfU1RBVFVTX09LICAgICAgICAgPSBTeW1ib2wgXFxva1xuZ2xvYmFsLkxJTktfU1RBVFVTX01JU01BVENIICAgPSBTeW1ib2wgXFx0eXBlLW1pc21hdGNoXG5nbG9iYWwuTElOS19TVEFUVVNfSU5DT01QTEVURSA9IFN5bWJvbCBcXGluY29tcGxldGVcblxuZ2xvYmFsLktFWV9aID0gOTBcbmdsb2JhbC5LRVlfWCA9IDg4XG5nbG9iYWwuS0VZX0MgPSA2N1xuZ2xvYmFsLktFWV9WID0gODZcblxuZ2xvYmFsLk1PVVNFX0xFRlQgICA9IDBcbmdsb2JhbC5NT1VTRV9NSURETEUgPSAxXG5nbG9iYWwuTU9VU0VfUklHSFQgID0gMlxuXG5nbG9iYWwuQ09MT1JfREFSS19HUkVFTiAgID0gXFxncmVlblxuZ2xvYmFsLkNPTE9SX0JSSUdIVF9HUkVFTiA9IFxcIzBlM1xuZ2xvYmFsLkNPTE9SX1lFTExPVyAgICAgICA9IFxcI2ZmMFxuZ2xvYmFsLkNPTE9SX1JFRCAgICAgICAgICA9IFxcI2YyM1xuZ2xvYmFsLkNPTE9SX0RBUktfUkVEICAgICA9IFxcIzgxMlxuZ2xvYmFsLkNPTE9SX0JSSUdIVF9SRUQgICA9IFxcI2Y4OVxuZ2xvYmFsLkNPTE9SX0RBUktfQkxVRSAgICA9IFxcIzExOFxuZ2xvYmFsLkNPTE9SX0JSSUdIVF9CTFVFICA9IFxcIzQ4ZlxuZ2xvYmFsLkNPTE9SX1BVUlBMRSAgICAgICA9IFxcIzkyOVxuZ2xvYmFsLkNPTE9SX01BR0VOVEEgICAgICA9IFxcI2YzZlxuXG5nbG9iYWwuU0lHTkFMX1RZUEVfUE9LRSAgICA9IFN5bWJvbCBcXHBva2Vcbmdsb2JhbC5TSUdOQUxfVFlQRV9OVU1CRVIgID0gU3ltYm9sIFxcbnVtYmVyXG5nbG9iYWwuU0lHTkFMX1RZUEVfR1JBUEhJQyA9IFN5bWJvbCBcXGdyYXBoaWNcbmdsb2JhbC5TSUdOQUxfVFlQRV9URVhUICAgID0gU3ltYm9sIFxcdGV4dFxuXG5nbG9iYWwuRVZFTlRfU09VUkNFX1dFQlNPQ0tFVFMgPSBTeW1ib2wgXFx3ZWJzb2NrZXRzXG5nbG9iYWwuRVZFTlRfU09VUkNFX0JST1dTRVIgICAgPSBTeW1ib2wgXFxicm93c2VyXG5cbiIsIlxuZXhwb3J0IGNsYXNzIEV2ZW50U291cmNlXG5cbiAgLT5cbiAgICBAY2FsbGJhY2tzID1cbiAgICAgIGtleWRvd246ICAgW11cbiAgICAgIGtleXVwOiAgICAgW11cbiAgICAgIG1vdXNlZG93bjogW11cbiAgICAgIG1vdXNldXA6ICAgW11cblxuICAgIEBlc3RhYmxpc2gtbGlzdGVuZXJzIVxuXG4gIGRpc3BhdGNoOiAoZXZlbnQtbmFtZSwgdmFsdWUpIH5+PlxuICAgIEBjYWxsYmFja3NbZXZlbnQtbmFtZV0ubWFwIC0+IGl0IHZhbHVlXG5cbiAgbGlzdGVuZXI6IChldmVudC1uYW1lKSAtPlxuICAgIEBzb2NrZXQub24gZXZlbnQtbmFtZSwgQGRpc3BhdGNoIGV2ZW50LW5hbWVcblxuICBvbjogKGV2ZW50LCDOuykgLT5cbiAgICBpZiBAY2FsbGJhY2tzW2V2ZW50XT9cbiAgICAgIHRoYXQucHVzaCDOu1xuICAgIGVsc2VcbiAgICAgIGNvbnNvbGUud2FybiBcIkdsb2JhbFNlcnZpY2VzLkV2ZW50U291cmNlLm9uIC0gbm90IHJlZ2lzdGVyaW5nIHVua25vd24gZXZlbnQgbmFtZTogJyNldmVudCdcIlxuXG4gIGVzdGFibGlzaC1saXN0ZW5lcnM6IC0+XG4gICAgQGxpc3RlbmVyIFxca2V5ZG93biwgICAoLndoaWNoKVxuICAgIEBsaXN0ZW5lciBcXGtleXVwLCAgICAgKC53aGljaClcbiAgICBAbGlzdGVuZXIgXFxtb3VzZWRvd24sICguYnV0dG9uKVxuICAgIEBsaXN0ZW5lciBcXG1vdXNldXAsICAgKC5idXR0b24pXG5cbiIsIlxuIyBSZXF1aXJlXG5cbnsgaWQsIGxvZyB9ID0gcmVxdWlyZSBcXHN0ZFxuXG5yZXF1aXJlIFxcLi9jb25zdFxuXG57IFBva2VTZXJ2aWNlIH0gICAgICAgICAgPSByZXF1aXJlIFxcLi9wb2tlXG57IFNjZW5lTGlicmFyeSB9ICAgICAgICAgPSByZXF1aXJlIFxcLi9zY2VuZS1saWJyYXJ5XG57IFNlcnZlckludGVyZmFjZSB9ICAgICAgPSByZXF1aXJlIFxcLi9zZXJ2ZXItaW50ZXJmYWNlXG57IEJyb3dzZXJFdmVudFNvdXJjZSB9ICAgPSByZXF1aXJlIFxcLi9icm93c2VyLWV2ZW50LXNvdXJjZVxueyBXZWJzb2NrZXRFdmVudFNvdXJjZSB9ID0gcmVxdWlyZSBcXC4vd2Vic29ja2V0LWV2ZW50LXNvdXJjZVxuXG5cbiMgR2xvYmFsbHktYXZhaWxhYmxlIFNlcnZpY2UgTG9jYXRvcnNcblxuZ2xvYmFsLkdsb2JhbFNlcnZpY2VzID1cblxuICBpbml0OiAtPlxuXG4gICAgR2xvYmFsU2VydmljZXMuU2VydmVyID0gbmV3IFNlcnZlckludGVyZmFjZVxuXG4gICAgR2xvYmFsU2VydmljZXMuUG9rZSA9IG5ldyBQb2tlU2VydmljZVxuXG4gICAgR2xvYmFsU2VydmljZXMuU2NlbmVMaWJyYXJ5ID0gbmV3IFNjZW5lTGlicmFyeSBzb2NrZXQ6IEdsb2JhbFNlcnZpY2VzLlNlcnZlclxuXG4gICAgR2xvYmFsU2VydmljZXMuRXZlbnRTb3VyY2UgPVxuICAgICAgc3dpdGNoIENPTkZJR19FVkVOVF9TT1VSQ0VcbiAgICAgIHwgRVZFTlRfU09VUkNFX1dFQlNPQ0tFVFMgPT4gbmV3IFdlYnNvY2tldEV2ZW50U291cmNlXG4gICAgICB8IEVWRU5UX1NPVVJDRV9CUk9XU0VSICAgID0+IG5ldyBCcm93c2VyRXZlbnRTb3VyY2VcblxuIiwiXG57IGlkLCBsb2csIGludm9rZSwgcmFmIH0gPSByZXF1aXJlIFxcc3RkXG5cbmV4cG9ydCBjbGFzcyBQb2tlU2VydmljZVxuXG4gIC0+XG4gICAgQGNhbGxiYWNrcyA9IFtdXG4gICAgQHBva2Utc2NoZWR1bGVkID0gZmFsc2VcblxuICBvbi1wb2tlOiAozrspIC0+XG4gICAgQGNhbGxiYWNrcy5wdXNoIM67XG5cbiAgZGlzcGF0Y2g6IC0+XG4gICAgQGNhbGxiYWNrcy5tYXAgaW52b2tlXG4gICAgQHBva2Utc2NoZWR1bGVkID0gZmFsc2VcblxuICBwb2tlOiAtPlxuICAgIEBzY2hlZHVsZS1wb2tlIVxuXG4gIHNjaGVkdWxlLXBva2U6IC0+XG4gICAgaWYgbm90IEBwb2tlLXNjaGVkdWxlZFxuICAgICAgQHBva2Utc2NoZWR1bGVkID0gdHJ1ZVxuICAgICAgcmFmIHRoaXN+ZGlzcGF0Y2hcblxuIiwiXG57IGlkLCBsb2cgfSA9IHJlcXVpcmUgXFxzdGRcblxuXG5leHBvcnQgY2xhc3MgU2NlbmVMaWJyYXJ5XG5cbiAgKHsgQHNvY2tldCB9KSAtPlxuXG4gICAgQGxvYWQtY2FsbGJhY2sgPSBpZFxuXG4gICAgQHNvY2tldC5vbiBcXHNhdmUtY29tcGxldGUsIChuYW1lKSAtPlxuICAgICAgY29uc29sZS5pbmZvIFwiR2xvYmFsU2VydmljZXMuU2NlbmVMaWJyYXJ5OjpzYXZlIC0gU2NlbmUgJyNuYW1lJyBzYXZlZC5cIlxuXG4gICAgQHNvY2tldC5vbiBcXGxvYWQtY29tcGxldGUsIChuYW1lLCBkYXRhKSB+PlxuICAgICAgY29uc29sZS5pbmZvIFwiR2xvYmFsU2VydmljZXMuU2NlbmVMaWJyYXJ5Ojpsb2FkIC0gU2NlbmUgJyNuYW1lJyBsb2FkZWQuXCJcbiAgICAgIEBsb2FkLWNhbGxiYWNrIEpTT04ucGFyc2UgZGF0YVxuICAgICAgQGxvYWQtY2FsbGJhY2sgPSBpZFxuXG4gIHNhdmU6IChuYW1lLCBzY2VuZS1kYXRhKSAtPlxuICAgIGNvbXByZXNzZWQtc2NlbmUgPSBzY2VuZS1kYXRhLnJlcGxhY2UgL1tcXHNcXG5dL2csICcnXG4gICAgY29uc29sZS5pbmZvICdQZXJzaXN0aW5nIHNjZW5lIGdyYXBoOicsIGNvbXByZXNzZWQtc2NlbmVcbiAgICBAc29ja2V0LmVtaXQgXFxzYXZlLCBuYW1lLCBjb21wcmVzc2VkLXNjZW5lXG5cbiAgbG9hZDogKG5hbWUsIM67KSAtPlxuICAgIEBzb2NrZXQuZW1pdCBcXGxvYWQsIG5hbWVcbiAgICBAbG9hZC1jYWxsYmFjayA9IM67XG5cbiIsIlxueyBpZCwgbG9nIH0gPSByZXF1aXJlIFxcc3RkXG5cblxuIyBTb2NrZXQuSU8gZGVwZW5kZW5jeSBjb21lcyBmcm9tIGFuIGh0bWwgc2NyaXB0IHRhZy4gVGhlIElPIGNsaWVudCBzY3JpcHRcbiMgaXMgc2VydmVkIGF1dG9tYXRpY2FsbHkgYnkgdGhlIHdlYnNvY2tldCBzZXJ2ZXIuXG5cbmV4cG9ydCBjbGFzcyBTZXJ2ZXJJbnRlcmZhY2VcblxuICAtPlxuICAgIEBzb2NrZXQgPSBpbyhDT05GSUdfU09DS0VUX1NFUlZFUl9BRERSKVxuXG4gIGdldC1zb2NrZXQ6IC0+XG4gICAgQHNvY2tldFxuXG4gIG9uOiAgICguLi5hcmdzKSAtPiBAc29ja2V0Lm9uIC4uLmFyZ3NcbiAgZW1pdDogKC4uLmFyZ3MpIC0+IEBzb2NrZXQuZW1pdCAuLi5hcmdzXG5cbiAgZW1pdC1tZXNzYWdlOiAobXNnLCAuLi5kYXRhKSAtPlxuICAgIEBzb2NrZXQuZW1pdCBtc2csIC4uLmRhdGFcblxuIiwiXG57IEV2ZW50U291cmNlIH0gPSByZXF1aXJlIFxcLi9ldmVudC1zb3VyY2VcblxuZXhwb3J0IGNsYXNzIFdlYnNvY2tldEV2ZW50U291cmNlIGV4dGVuZHMgRXZlbnRTb3VyY2VcblxuICAtPlxuICAgIEBzb2NrZXQgPSBHbG9iYWxTZXJ2aWNlcy5TZXJ2ZXIuZ2V0LXNvY2tldCFcbiAgICBzdXBlciAuLi5cbiAgICBAc29ja2V0Lm9uIFxcY29ubmVjdCwgICAgLT4gY29uc29sZS5pbmZvIFxcY29ubmVjdFxuICAgIEBzb2NrZXQub24gXFxkaXNjb25uZWN0LCAtPiBjb25zb2xlLndhcm4gXFxkaXNjb25uZWN0XG5cbiAgZGlzcGF0Y2g6IChldmVudC1uYW1lLCB2YWx1ZSkgfn4+XG4gICAgQGNhbGxiYWNrc1tldmVudC1uYW1lXS5tYXAgLT4gaXQgdmFsdWVcblxuIiwiXG57IGlkLCBsb2csIHYyLCByYWYgfSA9IHJlcXVpcmUgXFxzdGRcblxucmVxdWlyZSBcXGdsb2JhbFxucmVxdWlyZSBcXGNvbmZpZ1xuXG57IExpbmsgfSAgICAgICAgID0gcmVxdWlyZSBcXC4vbGlua1xueyBMaW5rUmVwIH0gICAgICA9IHJlcXVpcmUgXFwuL3JlcHJlc2VudGF0aW9ucy9saW5rXG57IFNjZW5lIH0gICAgICAgID0gcmVxdWlyZSBcXC4vc2NlbmVcbnsgV29ya3NwYWNlIH0gICAgPSByZXF1aXJlIFxcLi93b3Jrc3BhY2VcbnsgVmlzdWFsTm9kZSB9ICAgPSByZXF1aXJlIFxcLi92aXN1YWwtbm9kZVxueyBEcmFnTW9uaXRvciB9ICA9IHJlcXVpcmUgXFwuL2RyYWctbW9uaXRvclxueyBOb2RlUHJvdmlkZXIgfSA9IHJlcXVpcmUgXFwuL25vZGUtcHJvdmlkZXJcblxueyBjb25zdHJ1Y3QtdGVzdC1zY2VuZSB9ID0gcmVxdWlyZSBcXC4vdGVzdC1kYXRhXG5cblxuIyBJbml0IGdsb2JhbCBzZXJ2aWNlc1xuXG5HbG9iYWxTZXJ2aWNlcy5pbml0IVxuXG5cbiMgU2V0dXBcblxuaG90LW5vZGUgPSBudWxsXG53b3Jrc3BhY2UgPSBuZXcgV29ya3NwYWNlXG5cbnNjZW5lID1cbiAgaWYgeWVzXG4gICAgbmV3IFNjZW5lIGNvbnN0cnVjdC10ZXN0LXNjZW5lIVxuICBlbHNlXG4gICAgbmV3IFNjZW5lXG5cblxuIyBTY2VuZSBXYWxrZXJcblxud2FsayA9IChub2RlKSAtPlxuICByZXR1cm4gZG9cbiAgICB0eXBlOiBub2RlQEBkaXNwbGF5LW5hbWVcbiAgICB2aWV3OiBub2RlLnJlcC5zZXJpYWxpc2UhXG4gICAgc2VsZjogbm9kZS5zZXJpYWxpc2UhXG4gICAgaW5jb21pbmc6XG4gICAgICBmb3IgaW5wdXQsIGkgaW4gbm9kZS5pbnB1dHMuYWxsXG4gICAgICAgIGlmIGlucHV0LmxpbmtcbiAgICAgICAgICBub2RlOiB3YWxrIGlucHV0LmxpbmsuZnJvbS5vd25lclxuICAgICAgICAgIG91dHB1dC1pbmRleDogaW5wdXQubGluay5mcm9tLmluZGV4XG4gICAgICAgIGVsc2VcbiAgICAgICAgICBudWxsXG5cbiNHbG9iYWxTZXJ2aWNlcy5TY2VuZUxpYnJhcnkuc2F2ZSBcXHRlc3Qtc2NlbmUsIEpTT04uc3RyaW5naWZ5ICh3YWxrIHNjZW5lLnB1cHBldCksIG51bGwsIDJcblxuXG5HbG9iYWxTZXJ2aWNlcy5TY2VuZUxpYnJhcnkubG9hZCBcXHRlc3Qtc2NlbmUsIChkYXRhKSAtPlxuXG4gIHJldHVyblxuXG4gIG91dHB1dCA9XG4gICAgcHVwcGV0OiBudWxsXG4gICAgbGlua3M6IFtdXG4gICAgbm9kZXM6IFtdXG5cbiAgY29uc29sZS5pbmZvIFwiU2NlbmU6XCIsIEpTT04uc3RyaW5naWZ5IGRhdGEsIG51bGwsIDJcblxuICB0cmF2ZXJzZSA9IChub2RlLWRhdGEsIHBhcmVudCkgLT5cbiAgICBbIE5vZGVDbGFzcywgUmVwQ2xhc3MgXSA9IE5vZGVQcm92aWRlciBub2RlLWRhdGEudHlwZVxuICAgIG5vZGUgPSBOb2RlQ2xhc3MuZGVzZXJpYWxpc2Ugbm9kZS1kYXRhLnN0YXRlXG4gICAgb3V0cHV0Lm5vZGVzLnB1c2ggdmlzdWFsLW5vZGUgPSBuZXcgVmlzdWFsTm9kZSBjb250ZW50OiBub2RlLCByZXA6IChuZXcgUmVwQ2xhc3Mgbm9kZSksIHBvczogdjIgMCAwXG5cbiAgICBpZiBub2RlLWRhdGEudHlwZSBpcyBcXFB1cHBldFxuICAgICAgb3V0cHV0LnB1cHBldCA6PSBub2RlXG5cbiAgICBmb3IgdiwgaSBpbiBub2RlLWRhdGEuaW5jb21pbmcgd2hlbiB2P1xuICAgICAgY2hpbGQgPSB0cmF2ZXJzZSB2Lm5vZGVcbiAgICAgIG91dHB1dC5saW5rcy5wdXNoIG5ldyBMaW5rUmVwIG5ldyBMaW5rIGZyb206IChjaGlsZC5vdXRwdXRzLmdldCB2Lm91dHB1dC1pbmRleCksIHRvOiBub2RlLmlucHV0cy5nZXQgaVxuXG4gICAgcmV0dXJuIG5vZGVcblxuICB0cmF2ZXJzZSBkYXRhXG5cblxuIyBSZW5kZXIgd2hlbiBncmFwaCB1cGRhdGVzXG5cbmRyYXcgPSAtPlxuICB3b3Jrc3BhY2UuY2xlYXIhXG4gIHNjZW5lLmRyYXctb250byB3b3Jrc3BhY2VcblxuZ2xvYmFsLkdsb2JhbFNlcnZpY2VzLlBva2Uub24tcG9rZSAtPlxuICBzY2VuZS5wdWxsIVxuICBkcmF3IVxuXG5cbiMgSW5pdFxuXG53b3Jrc3BhY2UuaW5zdGFsbCBkb2N1bWVudC5ib2R5XG5kcmF3IVxuXG5cblxuXG4jXG4jIEVkaXRvciBpbnRlcmFjdGlvbnNcbiNcblxuXG4jIERyYWdnZXJcblxuZHJhZ2dlciA9IG5ldyBEcmFnTW9uaXRvclxuZHJhZ2dlci5vbi1wb2ludGVyLXJlbGVhc2UgZHJhd1xuZHJhZ2dlci5vbi1wb2ludGVyLWRyYWcgKM6UeCwgzpR5KSAtPlxuICBob3Qtbm9kZT8ubW92ZS1ieSB2MiDOlHgsIM6UeVxuICBkcmF3IVxuXG5cbiMgTGlzdGVuZXJzXG5cbmRvY3VtZW50LmFkZC1ldmVudC1saXN0ZW5lciBcXG1vdXNlbW92ZSwgKHsgcGFnZVgsIHBhZ2VZIH0pIC0+XG4gIGlmIGhvdC1ub2RlPy5zdGF0ZS5tb2RlIGlzIElOVEVSQUNUSU9OX01PREVfQUNUSVZFXG4gICAgcmV0dXJuXG5cbiAgaG90LWZvdW5kID0gbm9cblxuICBmb3Igbm9kZSBpbiBzY2VuZS5ub2Rlc1xuICAgIGlmIG5vZGUuYm91bmRzLWNvbnRhaW5zIHYyIHBhZ2VYLCBwYWdlWVxuICAgICAgbm9kZS5zZXQtbW9kZSBJTlRFUkFDVElPTl9NT0RFX0hPVFxuICAgICAgaG90LWZvdW5kIDo9IHllc1xuICAgICAgaG90LW5vZGUgOj0gbm9kZVxuICAgIGVsc2VcbiAgICAgIG5vZGUuc2V0LW1vZGUgSU5URVJBQ1RJT05fTU9ERV9JRExFXG5cbiAgaWYgbm90IGhvdC1mb3VuZFxuICAgIGhvdC1ub2RlIDo9IG51bGxcblxuICBkcmF3IVxuXG5kb2N1bWVudC5hZGQtZXZlbnQtbGlzdGVuZXIgXFxtb3VzZWRvd24sIC0+XG4gIGhvdC1ub2RlPy5zZXQtbW9kZSBJTlRFUkFDVElPTl9NT0RFX0FDVElWRVxuICBkcmF3IVxuXG5kb2N1bWVudC5hZGQtZXZlbnQtbGlzdGVuZXIgXFxtb3VzZXVwLCAtPlxuICBob3Qtbm9kZT8uc2V0LW1vZGUgSU5URVJBQ1RJT05fTU9ERV9IT1RcbiAgZHJhdyFcblxuIiwiXG57IGlkLCBsb2csIGFicywgaHlwLCByYW5kb20tZnJvbSB9ID0gcmVxdWlyZSBcXHN0ZFxuXG5kZXRlcm1pbmUtc3RhdHVzID0gKGEsIGIpIC0+XG4gIGlmIG5vdCBhXG4gICAgY29uc29sZS53YXJuIFwiTGluazo6bmV3IC0gJ2Zyb20nIGVuZCBpcyB1bmF2YWlsYWJsZVwiXG4gICAgTElOS19TVEFUVVNfSU5DT01QTEVURVxuICBlbHNlIGlmIG5vdCBiXG4gICAgY29uc29sZS53YXJuIFwiTGluazo6bmV3IC0gJ3RvJyBlbmQgaXMgdW5hdmFpbGFibGVcIlxuICAgIExJTktfU1RBVFVTX0lOQ09NUExFVEVcbiAgZWxzZSBpZiBhLnR5cGUgaXNudCBiLnR5cGVcbiAgICBjb25zb2xlLndhcm4gXCJMaW5rOjpuZXcgLSBjYW4ndCBqb2luIHBvcnRzIG9mIGRpc3BhcmF0ZSB0eXBlcyEgLSBGUk9NOlwiLCBhLnR5cGUsIFwifCBUTzpcIiwgYi50eXBlXG4gICAgTElOS19TVEFUVVNfTUlTTUFUQ0hcbiAgZWxzZVxuICAgIExJTktfU1RBVFVTX09LXG5cblxuZXhwb3J0IGNsYXNzIExpbmtcblxuICAoeyBAZnJvbSwgQHRvIH0pIC0+XG4gICAgIyBsb2cgXFxMaW5rIEBmcm9tLCBAdG9cbiAgICBAZnJvbT8uYXNzaWduLWxpbmsgdGhpc1xuICAgIEB0bz8uYXNzaWduLWxpbmsgdGhpc1xuICAgIEBzdGF0dXMgPSBkZXRlcm1pbmUtc3RhdHVzIEBmcm9tLCBAdG9cbiAgICBAc2lnbmFsLXN0cmVuZ3RoID0gMFxuXG4gIHB1c2gtdG86ICAgLT4gaWYgQHN0YXR1cyBpcyBMSU5LX1NUQVRVU19PSyB0aGVuIEB0by5wdXNoISAgIGVsc2UgbnVsbFxuICBwdWxsLWZyb206IC0+IGlmIEBzdGF0dXMgaXMgTElOS19TVEFUVVNfT0sgdGhlbiBAZnJvbS5wdWxsISBlbHNlIG51bGxcblxuICBpbmZlci1zaWduYWwtc3RyZW5ndGg6IC0+XG4gICAgQHNpZ25hbC1zdHJlbmd0aCA9XG4gICAgICBzd2l0Y2ggQGZyb20udHlwZVxuICAgICAgfCBTSUdOQUxfVFlQRV9QT0tFICAgID0+IChpZiBAZnJvbS5wdWxsISB0aGVuIDEgZWxzZSAwKVxuICAgICAgfCBTSUdOQUxfVFlQRV9HUkFQSElDID0+IChpZiBAZnJvbS5wdWxsISB0aGVuIDEgZWxzZSAwKVxuICAgICAgfCBTSUdOQUxfVFlQRV9OVU1CRVIgID0+IEBmcm9tLnB1bGwhXG4gICAgICB8IG90aGVyd2lzZSA9PiAxXG5cbiIsIlxuIyBSZXF1aXJlXG5cbnsgUHVwcGV0IH0gICAgICA9IHJlcXVpcmUgXFwuL3B1cHBldFxueyBLZXlOb2RlIH0gICAgID0gcmVxdWlyZSBcXC4vbm9kZXMva2V5XG57IE1pY05vZGUgfSAgICAgPSByZXF1aXJlIFxcLi9ub2Rlcy9taWNcbnsgTW91c2VOb2RlIH0gICA9IHJlcXVpcmUgXFwuL25vZGVzL21vdXNlXG57IFRpbWVyTm9kZSB9ICAgPSByZXF1aXJlIFxcLi9ub2Rlcy90aW1lclxueyBHcmFwaGljTm9kZSB9ID0gcmVxdWlyZSBcXC4vbm9kZXMvZ3JhcGhpY1xuXG57IE1pY1JlcCB9ICAgICA9IHJlcXVpcmUgXFwuL3JlcHJlc2VudGF0aW9ucy9taWNcbnsgS2V5UmVwIH0gICAgID0gcmVxdWlyZSBcXC4vcmVwcmVzZW50YXRpb25zL2tleVxueyBUaW1lclJlcCB9ICAgPSByZXF1aXJlIFxcLi9yZXByZXNlbnRhdGlvbnMvdGltZXJcbnsgUHVwcGV0UmVwIH0gID0gcmVxdWlyZSBcXC4vcmVwcmVzZW50YXRpb25zL3B1cHBldFxueyBHcmFwaGljUmVwIH0gPSByZXF1aXJlIFxcLi9yZXByZXNlbnRhdGlvbnMvZ3JhcGhpY1xueyBNb3VzZVJlcCB9ICAgPSByZXF1aXJlIFxcLi9yZXByZXNlbnRhdGlvbnMvbW91c2VcbnsgTGlua1JlcCB9ICAgID0gcmVxdWlyZSBcXC4vcmVwcmVzZW50YXRpb25zL2xpbmtcblxuXG4jIFR1cm4gc3RyaW5nLWJhc2VkIHJlcXVlc3RzIGZvciBub2RlIHR5cGVzIGludG8gdGhlaXIgYWN0dWFsIGNsYXNzIHdpdGggYXNzb2NpYXRlZCBSZXAgY2xhc3NcblxuZXhwb3J0IE5vZGVQcm92aWRlciA9IChub2RlLXR5cGUpIC0+XG4gIHN3aXRjaCBub2RlLXR5cGVcbiAgfCBcXFB1cHBldCA9PiBbIFB1cHBldCwgUHVwcGV0UmVwIF1cbiAgfCBcXEtleU5vZGUgPT4gWyBLZXlOb2RlLCBLZXlSZXAgXVxuICB8IFxcR3JhcGhpY05vZGUgPT4gWyBHcmFwaGljTm9kZSwgR3JhcGhpY1JlcCBdXG4gIHwgXFxNb3VzZU5vZGUgPT4gWyBNb3VzZU5vZGUsIE1vdXNlUmVwIF1cbiAgfCBcXFRpbWVyTm9kZSA9PiBbIFRpbWVyTm9kZSwgVGltZXJSZXAgXVxuICB8IFxcTWljTm9kZSA9PiBbIE1pY05vZGUsIE1pY1JlcCBdXG4gIHwgb3RoZXJ3aXNlID0+IGNvbnNvbGUud2FybiBcIk5vZGVQcm92aWRlciAtIGNhbid0IGdldCBub2RlIGZvciB0eXBlICcjbm9kZS10eXBlJ1wiXG5cbiIsIlxueyBpZCwgbG9nIH0gPSByZXF1aXJlIFxcc3RkXG5cbnsgSW5wdXRTZXQsIE91dHB1dFNldCB9ID0gcmVxdWlyZSBcXC4uL3BvcnQtc2V0XG5cbmV4cG9ydCBjbGFzcyBOb2RlXG5cbiAgLT5cbiAgICBAc3RhdGUgICAgPSBvZmZcbiAgICBAY2FsbGJhY2sgPSBpZFxuICAgIEBpbnB1dHMgICA9IFtdXG4gICAgQG91dHB1dHMgID0gW11cblxuICBzZXQ6IChzdGF0ZSkgLT5cbiAgICBAc3RhdGUgPSBzdGF0ZVxuICAgIEBjYWxsYmFjayBzdGF0ZVxuXG4gICAgIyBET05UIGF1dG9tYXRpY2FsbHkgcG9rZSB1cG9uIHN0YXRlIGNoYW5nZS4gUkVBTCAnVHJpZ2dlcnMnIGFyZSBhbGxvd2VkXG4gICAgIyB0byBkbyB0aGlzLCBidXQgd2hpbGUgdGhlIG5hbWluZyBpcyBzdGlsbCBzY3Jld2VkIHVwLCAnVHJpZ2dlcicgaXMgc3RpbGxcbiAgICAjIHRoZSBnZW5lcmljIHR5cGUuIEl0IGNhbiBiZSBzdWJjbGFzc2VkIGxhdGVyIGlmIG5lY2Vzc2FyeS4gRm9yIG5vdywgc3ViLVxuICAgICMgY2xhc3NlcyBvZiBUcmlnZ2VyIHRoYXQgYXJlIEFDVFVBTExZIHRyaWdnZXJzIHNob3VsZCBkbyB0aGlzIG1hbnVhbGx5LlxuICAgICNcbiAgICAjIEdsb2JhbFNlcnZpY2VzLlBva2UucG9rZSFcblxuICBvbi1zdGF0ZS1jaGFuZ2U6ICjOuykgLT5cbiAgICBAY2FsbGJhY2sgPSDOu1xuXG4gIGdlbmVyYXRlLXBvcnRzOiAoeyBpbnB1dC1zcGVjID0gW10sIG91dHB1dC1zcGVjID0gW10gfSkgLT5cbiAgICBAaW5wdXRzICA9IG5ldyBJbnB1dFNldCB7IHNwZWM6IGlucHV0LXNwZWMsIG93bmVyOiB0aGlzIH1cbiAgICBAb3V0cHV0cyA9IG5ldyBPdXRwdXRTZXQgeyBzcGVjOiBvdXRwdXQtc3BlYywgb3duZXI6IHRoaXMgfVxuXG4gIHNlcmlhbGlzZTogLT5cbiAgICBjb25zb2xlLndhcm4gdGhpc0BAZGlzcGxheS1uYW1lLCAnc2hvdWxkIGltcGxlbWVudCBzZXJpYWxpc2UnXG5cbiAgQGRlc2VyaWFsaXNlID0gKGNvbmZpZykgLT4gbmV3IHRoaXMgY29uZmlnXG5cbiIsIlxueyBpZCwgbG9nIH0gPSByZXF1aXJlIFxcc3RkXG5cbnsgTm9kZSB9ID0gcmVxdWlyZSBcXC4vYmFzZVxueyBTcHJpdGUgfSA9IHJlcXVpcmUgXFwuLi9zcHJpdGVcblxuXG4jIEdyYXBoaWNcbiNcbiMgUHJvdmlkZXMgYSBTSUdOQUxfVFlQRV9HUkFQSElDIHRvIGxhdGVyIG5vZGVzLlxuIyBXaGVuIGlucHV0IGlzIG5vdCBjb25uZWN0ZWQsIGRlZmF1bHRzIHRvIG9uLlxuXG5leHBvcnQgY2xhc3MgR3JhcGhpY05vZGUgZXh0ZW5kcyBOb2RlXG5cbiAgaW5wdXQtc3BlYyAgPSBbIHsgdHlwZTogU0lHTkFMX1RZUEVfUE9LRSwgICAgb24tcHVzaDogLT4gQHNldCBvbiB9IF1cbiAgb3V0cHV0LXNwZWMgPSBbIHsgdHlwZTogU0lHTkFMX1RZUEVfR1JBUEhJQywgb24tcHVsbDogLT4gQG9uLXB1bGwhIH0gXVxuXG4gICh7IEBzcHJpdGUgfSkgLT5cbiAgICBzdXBlciAuLi5cblxuICAgIEBnZW5lcmF0ZS1wb3J0cyB7IGlucHV0LXNwZWMsIG91dHB1dC1zcGVjIH1cbiAgICBAc2V0IG9uXG5cbiAgb24tcHVsbDogLT5cbiAgICBpZiBAaW5wdXRzLmdldCgwKS5saW5rP1xuICAgICAgQHNldCBAaW5wdXRzLmdldCgwKS5wdWxsIVxuICAgIGlmIEBzdGF0ZSB0aGVuIEBzcHJpdGUgZWxzZSBudWxsXG5cbiAgc2VyaWFsaXNlOiAtPlxuICAgIHNwcml0ZTogQHNwcml0ZS5zZXJpYWxpc2UhXG5cbiAgQGRlc2VyaWFsaXNlID0gKGNvbmZpZykgLT5cbiAgICBuZXcgR3JhcGhpY05vZGUgc3ByaXRlOiBuZXcgU3ByaXRlIGNvbmZpZy5zcHJpdGVcblxuIiwiXG57IGlkLCBsb2cgfSA9IHJlcXVpcmUgXFxzdGRcblxueyBOb2RlIH0gPSByZXF1aXJlIFxcLi9iYXNlXG57IE91dHB1dCB9ICA9IHJlcXVpcmUgXFwuLi9wb3J0XG5cblxuZXhwb3J0IGNsYXNzIEtleU5vZGUgZXh0ZW5kcyBOb2RlXG5cbiAgb3V0cHV0LXNwZWMgPSBbIHsgdHlwZTogU0lHTkFMX1RZUEVfUE9LRSwgb24tcHVsbDogLT4gQHN0YXRlIH0gXVxuXG4gICh7IEBrZXljb2RlIH0pIC0+XG4gICAgc3VwZXIgLi4uXG5cbiAgICBAZ2VuZXJhdGUtcG9ydHMgeyBvdXRwdXQtc3BlYyB9XG5cbiAgICBHbG9iYWxTZXJ2aWNlcy5FdmVudFNvdXJjZS5vbiBcXGtleWRvd24sIH4+IGlmIEBrZXljb2RlIGlzIGl0IHRoZW4gQHNldCBvblxuICAgIEdsb2JhbFNlcnZpY2VzLkV2ZW50U291cmNlLm9uIFxca2V5dXAsICAgfj4gaWYgQGtleWNvZGUgaXMgaXQgdGhlbiBAc2V0IG9mZlxuXG4gIHNldDogLT5cbiAgICBHbG9iYWxTZXJ2aWNlcy5Qb2tlLnBva2UhXG4gICAgc3VwZXIgLi4uXG5cbiAgc2VyaWFsaXNlOiAtPlxuICAgIGtleWNvZGU6IEBrZXljb2RlXG5cbiIsIlxueyBpZCwgbG9nLCByYWYsIGtleXMsIGdldC1taWNyb3Bob25lIH0gPSByZXF1aXJlIFxcc3RkXG5cbnsgTm9kZSB9ID0gcmVxdWlyZSBcXC4vYmFzZVxuXG5cbmV4cG9ydCBjbGFzcyBNaWNOb2RlIGV4dGVuZHMgTm9kZVxuXG4gIFNNT09USElORyA9IDJcblxuICBvdXRwdXQtc3BlYyA9IFtcbiAgICB7IHR5cGU6IFNJR05BTF9UWVBFX1BPS0UsICAgb24tcHVsbDogLT4gQHN0YXRlIH1cbiAgICB7IHR5cGU6IFNJR05BTF9UWVBFX05VTUJFUiwgb24tcHVsbDogLT4gQHZhbHVlIH1cbiAgXVxuXG4gICh7IEB0aHJlc2hvbGQgPSAxLjEgfSkgLT5cbiAgICBzdXBlciAuLi5cblxuICAgIEBydW5uaW5nID0gbm9cbiAgICBAYXVkaW8gICA9IG5ldyBBdWRpb0NvbnRleHRcbiAgICBAaGlzdCAgICA9IFtdXG4gICAgQGF2ZyAgICAgPSAwXG4gICAgQHZhbHVlICAgPSAwXG5cbiAgICBAZ2VuZXJhdGUtcG9ydHMgeyBvdXRwdXQtc3BlYyB9XG5cbiAgICBAYW5hbHlzZXIgPSBAYXVkaW8uY3JlYXRlLWFuYWx5c2VyIVxuICAgIEBhbmFseXNlci5mZnQtc2l6ZSA9IDIwNDhcbiAgICBAYnVmZmVyLWxlbmd0aCA9IEBhbmFseXNlci5mcmVxdWVuY3ktYmluLWNvdW50XG4gICAgQGRhdGEtYXJyYXkgICAgPSBuZXcgVWludDhBcnJheSBAYnVmZmVyLWxlbmd0aFxuXG4gICAgQHN0YXJ0IVxuXG4gIHN0YXJ0OiAtPlxuICAgIGdldC1taWNyb3Bob25lIChtaWMtc3RyZWFtKSB+PlxuICAgICAgQG1pYyA9IEBhdWRpby5jcmVhdGUtbWVkaWEtc3RyZWFtLXNvdXJjZSBtaWMtc3RyZWFtXG4gICAgICBAbWljLmNvbm5lY3QgQGFuYWx5c2VyXG4gICAgICBAcnVubmluZyA9IHllc1xuICAgICAgQG1vbml0b3IhXG5cbiAgbW9uaXRvcjogLT5cbiAgICBpZiBAcnVubmluZyB0aGVuIHJhZiB0aGlzfm1vbml0b3JcbiAgICBAYW5hbHlzZXIuZ2V0LWJ5dGUtdGltZS1kb21haW4tZGF0YSBAZGF0YS1hcnJheVxuICAgIGF2ZyA9IDBcbiAgICBtYXggPSAwXG5cbiAgICBmb3IgaSBmcm9tIDAgdG8gQGJ1ZmZlci1sZW5ndGhcbiAgICAgIHNhbXBsZSA9IEBkYXRhLWFycmF5W2ldXG4gICAgICBpZiBzYW1wbGUgPiBtYXggdGhlblxuICAgICAgICBtYXggPSBzYW1wbGVcblxuICAgIEBoaXN0LnB1c2ggbWF4IC8gMTI4XG4gICAgaWYgQGhpc3QubGVuZ3RoID49IFNNT09USElOR1xuICAgICAgQGhpc3Quc2hpZnQhXG5cbiAgICBmb3IgcCBpbiBAaGlzdCA9PiBhdmcgKz0gcFxuICAgIGF2ZyAvPSBTTU9PVEhJTkdcbiAgICBAc2V0IGF2ZyA+IEB0aHJlc2hvbGRcbiAgICBAYXZnID0gYXZnXG4gICAgQHZhbHVlID0gQGF2ZyAvIEB0aHJlc2hvbGRcblxuICAgIEdsb2JhbFNlcnZpY2VzLlBva2UucG9rZSFcblxuICBzZXJpYWxpc2U6IC0+XG4gICAgdGhyZXNob2xkOiBAdGhyZXNob2xkXG5cbiIsIlxueyBpZCwgbG9nIH0gPSByZXF1aXJlIFxcc3RkXG5cbnsgTm9kZSB9ID0gcmVxdWlyZSBcXC4vYmFzZVxuXG5cbmV4cG9ydCBjbGFzcyBNb3VzZU5vZGUgZXh0ZW5kcyBOb2RlXG5cbiAgb3V0cHV0LXNwZWMgPSBbIHsgdHlwZTogU0lHTkFMX1RZUEVfUE9LRSwgb24tcHVsbDogLT4gQHN0YXRlIH0gXVxuXG4gICh7IEBidXR0b24taW5kZXggfSkgLT5cbiAgICBzdXBlciAuLi5cblxuICAgIEBnZW5lcmF0ZS1wb3J0cyB7IG91dHB1dC1zcGVjIH1cblxuICAgIEdsb2JhbFNlcnZpY2VzLkV2ZW50U291cmNlLm9uIFxcbW91c2Vkb3duLCAoYnV0dG9uKSB+PlxuICAgICAgaWYgQGJ1dHRvbi1pbmRleCBpcyBidXR0b24gdGhlbiBAc2V0IG9uXG4gICAgICBHbG9iYWxTZXJ2aWNlcy5Qb2tlLnBva2UhXG5cbiAgICBHbG9iYWxTZXJ2aWNlcy5FdmVudFNvdXJjZS5vbiBcXG1vdXNldXAsIChidXR0b24pIH4+XG4gICAgICBpZiBAYnV0dG9uLWluZGV4IGlzIGJ1dHRvbiB0aGVuIEBzZXQgb2ZmXG4gICAgICBHbG9iYWxTZXJ2aWNlcy5Qb2tlLnBva2UhXG5cbiAgICAjIE9ubHkgYmxvY2sgY29udGV4dCBtZW51IGlmIFJNQiBpcyBhY3R1YWxseSBiZWluZyByZXF1ZXN0ZWRcblxuICAgIGlmIEBidXR0b24taW5kZXggaXMgTU9VU0VfUklHSFRcbiAgICAgIGRvY3VtZW50LmFkZC1ldmVudC1saXN0ZW5lciBcXGNvbnRleHRtZW51LCAoLnByZXZlbnQtZGVmYXVsdCEpXG5cbiAgc2VyaWFsaXNlOiAtPlxuICAgIGJ1dHRvbi1pbmRleDogQGJ1dHRvbi1pbmRleFxuXG4iLCJcbnsgaWQsIGxvZywgZGVsYXkgfSA9IHJlcXVpcmUgXFxzdGRcblxueyBOb2RlIH0gPSByZXF1aXJlIFxcLi9iYXNlXG5cbmV4cG9ydCBjbGFzcyBUaW1lck5vZGUgZXh0ZW5kcyBOb2RlXG5cbiAgb3V0cHV0LXNwZWMgPSBbIHsgdHlwZTogU0lHTkFMX1RZUEVfUE9LRSwgb24tcHVsbDogLT4gQHN0YXRlIH0gXVxuXG4gICh7IEB0aW1lLCBAZHV0eSA9IDAuNSwgQG9mZnNldCA9IDAgfSkgLT5cbiAgICBzdXBlciAuLi5cbiAgICBAZ2VuZXJhdGUtcG9ydHMgeyBvdXRwdXQtc3BlYyB9XG4gICAgQHN0YXRlID0gb2ZmXG4gICAgQGFjdGl2ZSA9IG5vXG4gICAgQHN0YXJ0IVxuXG4gIHRpY2s6IH4+XG4gICAgQHNldCBvblxuICAgIGRlbGF5IEB0aW1lICogMTAwMCAqIEBkdXR5LCB0aGlzfnNldC1vZmYsXG4gICAgaWYgQGFjdGl2ZSB0aGVuIGRlbGF5IEB0aW1lICogMTAwMCwgQHRpY2tcblxuICBzZXQ6IC0+XG4gICAgR2xvYmFsU2VydmljZXMuUG9rZS5wb2tlIVxuICAgIHN1cGVyIC4uLlxuXG4gIHNldC1vZmY6IC0+XG4gICAgQHNldCBvZmZcblxuICBzdGFydDogLT5cbiAgICBAYWN0aXZlID0geWVzXG4gICAgZGVsYXkgKEB0aW1lIC0gQG9mZnNldCkgKiAxMDAwLCB+PlxuICAgICAgdGhpc350aWNrIVxuXG4gIHN0b3A6IC0+XG4gICAgQGFjdGl2ZSA9IG5vXG4gICAgQHNldCBvZmZcblxuICBzZXJpYWxpc2U6IC0+XG4gICAgdGltZTogQHRpbWVcbiAgICBkdXR5OiBAZHV0eVxuICAgIG9mZnNldDogQG9mZnNldFxuXG4iLCJcbnsgaWQsIGxvZywgdjIgfSA9IHJlcXVpcmUgXFxzdGRcblxueyBJbnB1dCwgT3V0cHV0IH0gPSByZXF1aXJlIFxcLi9wb3J0XG5cblxuI1xuIyBQb3J0IFNldFxuI1xuXG5jbGFzcyBQb3J0U2V0XG5cbiAgKHsgc3BlYywgQG93bmVyIH0pIC0+XG4gICAgQHBvcnRzID0gQGdlbmVyYXRlLXBvcnRzIHNwZWNcbiAgICBAbWFwID0gQHBvcnRzfm1hcFxuXG4gIGdldDogKGl4KSAtPlxuICAgIEBwb3J0c1tpeF1cblxuICBhbGw6fiAtPlxuICAgIEBwb3J0c1xuXG4gIG5leHQ6fiAtPlxuICAgIGZvciBwb3J0IGluIEBwb3J0c1xuICAgICAgaWYgbm90IHBvcnQubGluaz9cbiAgICAgICAgcmV0dXJuIHBvcnRcblxuICBsZW5ndGg6fiAtPlxuICAgIEBwb3J0cy5sZW5ndGhcblxuXG5cbiNcbiMgU3BlY2lhbGlzYXRpb25zXG4jXG5cbmV4cG9ydCBjbGFzcyBJbnB1dFNldCBleHRlbmRzIFBvcnRTZXRcbiAgZ2VuZXJhdGUtcG9ydHM6IChzcGVjKSAtPlxuICAgIGZvciB7IHR5cGUsIG9uLXB1c2ggPSBpZCB9LCBpeCBpbiBzcGVjXG4gICAgICBuZXcgSW5wdXQgeyB0eXBlLCBvd25lcjogQG93bmVyLCBpbmRleDogaXgsIG9uLXB1c2g6IG9uLXB1c2guYmluZCBAb3duZXIgfVxuXG5leHBvcnQgY2xhc3MgT3V0cHV0U2V0IGV4dGVuZHMgUG9ydFNldFxuICBnZW5lcmF0ZS1wb3J0czogKHNwZWMpIC0+XG4gICAgZm9yIHsgdHlwZSwgb24tcHVsbCA9IGlkIH0sIGl4IGluIHNwZWNcbiAgICAgIG5ldyBPdXRwdXQgeyB0eXBlLCBvd25lcjogQG93bmVyLCBpbmRleDogaXgsIG9uLXB1bGw6IG9uLXB1bGwuYmluZCBAb3duZXIgfVxuXG4iLCJcbnsgaWQsIGxvZywgdjIgfSA9IHJlcXVpcmUgXFxzdGRcblxuY2xhc3MgUG9ydFxuICAoeyBAdHlwZSwgQG93bmVyLCBAaW5kZXggfSkgLT5cblxuICBhc3NpZ24tbGluazogKEBsaW5rKSAtPlxuXG4gIHB1c2g6IC0+XG4gICAgQGxpbms/LnB1c2gtdG8hXG5cbiAgcHVsbDogLT5cbiAgICBAbGluaz8ucHVsbC1mcm9tIVxuXG5leHBvcnQgY2xhc3MgSW5wdXQgIGV4dGVuZHMgUG9ydFxuICAoeyBvbi1wdXNoIH0pIC0+XG4gICAgc3VwZXIgLi4uXG4gICAgQHB1c2ggPSBvbi1wdXNoXG5cbmV4cG9ydCBjbGFzcyBPdXRwdXQgZXh0ZW5kcyBQb3J0XG4gICh7IG9uLXB1bGwgfSkgLT5cbiAgICBzdXBlciAuLi5cbiAgICBAcHVsbCA9IG9uLXB1bGxcblxuIiwiXG57IGlkLCBsb2csIG1hc2ggfSA9IHJlcXVpcmUgXFxzdGRcblxueyBOb2RlIH0gICA9IHJlcXVpcmUgXFwuL25vZGVzL2Jhc2VcblxuZXhwb3J0IGNsYXNzIFB1cHBldCBleHRlbmRzIE5vZGVcblxuICBpbnB1dC1zcGVjID0gW1xuICAgICogdHlwZTogU0lHTkFMX1RZUEVfR1JBUEhJQ1xuICAgICogdHlwZTogU0lHTkFMX1RZUEVfR1JBUEhJQ1xuICAgICogdHlwZTogU0lHTkFMX1RZUEVfR1JBUEhJQ1xuICAgICogdHlwZTogU0lHTkFMX1RZUEVfR1JBUEhJQ1xuICAgICogdHlwZTogU0lHTkFMX1RZUEVfR1JBUEhJQ1xuICAgICogdHlwZTogU0lHTkFMX1RZUEVfR1JBUEhJQ1xuICAgICogdHlwZTogU0lHTkFMX1RZUEVfR1JBUEhJQ1xuICAgICogdHlwZTogU0lHTkFMX1RZUEVfR1JBUEhJQ1xuICBdXG5cbiAgLT5cbiAgICBAZ2VuZXJhdGUtcG9ydHMgeyBpbnB1dC1zcGVjIH1cbiAgICBAY2hhaW4gPSBbXVxuXG4gIHB1bGw6IC0+XG4gICAgQGNoYWluID0gQGlucHV0cy5tYXAgKC5wdWxsISkgLmZpbHRlciBpZFxuXG4gIGdldC1zaXplOiAtPlxuICAgIG1heCA9IDBcbiAgICBmb3Igc3ByaXRlIGluIEBjaGFpblxuICAgICAgaWYgc3ByaXRlLndpZHRoICA+IG1heCB0aGVuIG1heCA9IHNwcml0ZS53aWR0aFxuICAgICAgaWYgc3ByaXRlLmhlaWdodCA+IG1heCB0aGVuIG1heCA9IHNwcml0ZS53aWR0aFxuICAgIHJldHVybiBtYXhcblxuICBnZXQtd2lubmVyOiAtPlxuICAgIEBjaGFpblsqIC0gMV1cblxuICBzZXJpYWxpc2U6IC0+IHt9XG5cbiIsIlxuZXhwb3J0IGNsYXNzIFJlY3RYWVdIXG5cbiAgKHsgQHgsIEB5IH0sIHsgQHcsIEBoIH0pIC0+XG4gICAgQHVwZGF0ZSFcblxuICB1cGRhdGU6IC0+XG4gICAgQGxlZnQgICA9IEB4IC0gQHcvMlxuICAgIEByaWdodCAgPSBAeCArIEB3LzJcbiAgICBAdG9wICAgID0gQHkgLSBAaC8yXG4gICAgQGJvdHRvbSA9IEB5ICsgQGgvMlxuXG4gIGNvbnRhaW5zOiAoeyB4LCB5IH0pIC0+XG4gICAgQGxlZnQgPCB4IDwgQHJpZ2h0IGFuZCBAdG9wIDwgeSA8IEBib3R0b21cblxuXG5leHBvcnQgY2xhc3MgUmVjdFhZUyBleHRlbmRzIFJlY3RYWVdIXG5cbiAgKHBvcywgc2l6ZSkgLT5cbiAgICBzdXBlciBwb3MsIHsgdzogc2l6ZSwgaDogc2l6ZSB9XG5cbiAgbW92ZS10bzogKHsgeCwgeSB9KSAtPlxuICAgIEB4ID0geFxuICAgIEB5ID0geVxuICAgIEB1cGRhdGUhXG5cblxuIiwiXG57IGlkLCBsb2cgfSA9IHJlcXVpcmUgXFxzdGRcblxuZXhwb3J0IGNsYXNzIFJlcHJlc2VudGF0aW9uXG5cbiAgYncgPSAxMFxuXG4gIChAdGFyZ2V0KSAtPlxuICAgIEBzaXplID89IDEwMFxuICAgIEBzdGF0ZSA9IG1vZGU6IElOVEVSQUNUSU9OX01PREVfSURMRVxuICAgIEBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGUtZWxlbWVudCBcXGNhbnZhc1xuICAgIEBjYW52YXMud2lkdGggPSBAY2FudmFzLmhlaWdodCA9IEBzaXplXG4gICAgQGN0eCA9IEBjYW52YXMuZ2V0LWNvbnRleHQgXFwyZFxuXG4gIGRyYXc6IC0+XG4gICAgQGRyYXctYmFja2luZyFcbiAgICBAZHJhdy1ib3JkZXIhXG5cbiAgZHJhdy1iYWNraW5nOiAoY29sb3IgPSBcXHdoaXRlKSAtPlxuICAgIEBjdHguZmlsbC1zdHlsZSA9IGNvbG9yXG4gICAgQGN0eC5maWxsLXJlY3QgMCwgMCwgQGNhbnZhcy53aWR0aCwgQGNhbnZhcy5oZWlnaHRcblxuICBkcmF3LWJvcmRlcjogKGNvbG9yID0gQGJvcmRlci1jb2xvciEpIC0+XG4gICAgQGN0eC5maWxsLXN0eWxlID0gY29sb3JcbiAgICBAY3R4LmZpbGwtcmVjdCAwLCAwLCBAc2l6ZSwgYndcbiAgICBAY3R4LmZpbGwtcmVjdCAwLCBidywgYncsIEBzaXplIC0gYndcbiAgICBAY3R4LmZpbGwtcmVjdCBAc2l6ZSAtIGJ3LCBidywgYncsIEBzaXplIC0gYndcbiAgICBAY3R4LmZpbGwtcmVjdCBidywgQHNpemUgLSBidywgQHNpemUgLSBidyAqIDIsIGJ3XG5cbiAgYm9yZGVyLWNvbG9yOiAtPlxuICAgIGlmIEB0YXJnZXQuc3RhdGVcbiAgICAgIENPTE9SX1lFTExPV1xuICAgIGVsc2VcbiAgICAgIEBtb2RlLWNvbG9yIEBzdGF0ZS5tb2RlXG5cbiAgbW9kZS1jb2xvcjogKG1vZGUpIC0+XG4gICAgc3dpdGNoIG1vZGVcbiAgICB8IElOVEVSQUNUSU9OX01PREVfSURMRSAgID0+IFxcZGFya3JlZFxuICAgIHwgSU5URVJBQ1RJT05fTU9ERV9IT1QgICAgPT4gXFxvcmFuZ2VcbiAgICB8IElOVEVSQUNUSU9OX01PREVfQUNUSVZFID0+IFxccmVkXG5cbiAgc2V0LW1vZGU6IChtb2RlKSAtPlxuICAgIEBzdGF0ZS5tb2RlID0gbW9kZVxuXG4gIHNlcmlhbGlzZTogLT5cbiAgICBwb3M6IEBwb3NcbiAgICBzaXplOiBAc2l6ZVxuXG4gIEBOdWxsUmVwcmVzZW50YXRpb24gPSBuZXcgUmVwcmVzZW50YXRpb24geyBzdGF0ZTogb2ZmIH1cblxuIiwiXG57IGlkLCBsb2csIHYyIH0gPSByZXF1aXJlIFxcc3RkXG5cbnsgUmVwcmVzZW50YXRpb24gfSA9IHJlcXVpcmUgXFwuL2Jhc2VcblxuXG5leHBvcnQgY2xhc3MgR3JhcGhpY1JlcCBleHRlbmRzIFJlcHJlc2VudGF0aW9uXG5cbiAgLT5cbiAgICBAc2l6ZSA9IDEzMFxuICAgIHN1cGVyIC4uLlxuXG4gIGRyYXc6ICh0YXJnZXQpIC0+XG4gICAgc3VwZXIgLi4uXG4gICAgQGN0eC5nbG9iYWwtYWxwaGEgPSBpZiB0YXJnZXQuc3RhdGUgdGhlbiAxIGVsc2UgMC4zXG4gICAgQGN0eC5kcmF3LWltYWdlIHRhcmdldC5zcHJpdGUuY2FudmFzLCAxMCwgMTAsIEBzaXplIC0gMjAsICh0YXJnZXQuc3ByaXRlLnNpemUueSAvIHRhcmdldC5zcHJpdGUuc2l6ZS54KSAqIChAc2l6ZSAtIDIwKVxuICAgIEBjdHguZ2xvYmFsLWFscGhhID0gMVxuXG4iLCJcbnsgaWQsIGxvZyB9ID0gcmVxdWlyZSBcXHN0ZFxuXG57IFJlcHJlc2VudGF0aW9uIH0gPSByZXF1aXJlIFxcLi9iYXNlXG5cbmtleXN5bWJvbHMgPVxuICA5MDogXFxaXG4gIDg4OiBcXFhcbiAgNjc6IFxcQ1xuICA4NjogXFxWXG5cbmV4cG9ydCBjbGFzcyBLZXlSZXAgZXh0ZW5kcyBSZXByZXNlbnRhdGlvblxuXG4gIC0+XG4gICAgc3VwZXIgLi4uXG4gICAgQHN5bWJvbCA9IGtleXN5bWJvbHNbQHRhcmdldC5rZXljb2RlXVxuXG4gIGRyYXc6IC0+XG4gICAgc3VwZXIgLi4uXG4gICAgQGN0eC5maWxsLXN0eWxlID0gXFxibGFja1xuICAgIEBjdHguZm9udCA9IFwiI3tAc2l6ZS8yfXB4IG1vbm9zcGFjZVwiXG4gICAgQGN0eC50ZXh0LWFsaWduID0gXFxjZW50ZXJcbiAgICBAY3R4LnRleHQtYmFzZWxpbmUgPSBcXG1pZGRsZVxuICAgIEBjdHguZmlsbC10ZXh0IEBzeW1ib2wsIEBzaXplLzIsIEBzaXplLzIsIEBzaXplLCBAc2l6ZVxuXG4iLCJcbnsgaWQsIGxvZywgaHlwLCBhYnMsIHYyLCB0cmFuc2xhdGUyIH0gPSByZXF1aXJlIFxcc3RkXG5cbmkgPSAwXG5cbmV4cG9ydCBjbGFzcyBMaW5rUmVwXG5cbiAgYmVuZC1zdHJlbmd0aCA9IDUwXG5cbiAgKEB0YXJnZXQpIC0+XG4gICAgQGkgPSBpKytcblxuICBnZXQtc3RhdHVzLWNvbG9yczogLT5cbiAgICBzd2l0Y2ggQHRhcmdldC5zdGF0dXNcbiAgICB8IExJTktfU1RBVFVTX09LID0+XG4gICAgICBzd2l0Y2ggQHRhcmdldC50by50eXBlXG4gICAgICB8IFNJR05BTF9UWVBFX05VTUJFUiAgPT4gWyBDT0xPUl9QVVJQTEUsIENPTE9SX01BR0VOVEEgXVxuICAgICAgfCBTSUdOQUxfVFlQRV9HUkFQSElDID0+IFsgQ09MT1JfREFSS19CTFVFLCBDT0xPUl9CUklHSFRfQkxVRSBdXG4gICAgICB8IG90aGVyd2lzZSAgICAgICAgICAgPT4gWyBDT0xPUl9EQVJLX0dSRUVOLCBDT0xPUl9CUklHSFRfR1JFRU4gXVxuICAgIHwgb3RoZXJ3aXNlID0+IFsgQ09MT1JfUkVELCBDT0xPUl9CUklHSFRfUkVEIF1cblxuXG4gIGRyYXc6ICh7IGN0eCB9KSAtPlxuXG4gICAgdHAgPSB2MiAwIDBcbiAgICBmcCA9IHYyIDAgMFxuXG4gICAgaWYgQHRhcmdldC5zdGF0dXMgaXMgTElOS19TVEFUVVNfSU5DT01QTEVURVxuICAgICAgaWYgQHRhcmdldC5mcm9tXG4gICAgICAgIGZwID0gQHRhcmdldC5mcm9tLm93bmVyLnJlcC5vdXRwdXRzLmdldC1wb3MgQHRhcmdldC5mcm9tLmluZGV4XG4gICAgICAgIHRwID0gdHJhbnNsYXRlMiBmcCwgdjIgLTEwIDBcbiAgICAgIGVsc2UgaWYgQHRhcmdldC50b1xuICAgICAgICB0cCA9IEB0YXJnZXQudG8ub3duZXIucmVwLmlucHV0cy5nZXQtcG9zIEB0YXJnZXQudG8uaW5kZXhcbiAgICAgICAgZnAgPSB0cmFuc2xhdGUyIHRwLCB2MiAxMCAwXG4gICAgICBzcyA9IE1hdGgucmFuZG9tIVxuICAgIGVsc2VcbiAgICAgIGZwID0gQHRhcmdldC5mcm9tLm93bmVyLnJlcC5vdXRwdXRzLmdldC1wb3MgQHRhcmdldC5mcm9tLmluZGV4XG4gICAgICB0cCA9IEB0YXJnZXQudG8ub3duZXIucmVwLmlucHV0cy5nZXQtcG9zIEB0YXJnZXQudG8uaW5kZXhcbiAgICAgIHNzID0gQHRhcmdldC5pbmZlci1zaWduYWwtc3RyZW5ndGghXG5cbiAgICBkID0gaHlwIHRwLCBmcFxuICAgIGQgPSB0cC54IC0gZnAueFxuICAgIGIgPSBpZiBkIDw9IGJlbmQtc3RyZW5ndGggdGhlbiBiZW5kLXN0cmVuZ3RoICogKChhYnMgZCkvYmVuZC1zdHJlbmd0aCkqKjEuNCBlbHNlIGJlbmQtc3RyZW5ndGhcblxuICAgIFsgYmFzZS1jb2xvciwgcG93ZXItY29sb3IgXSA9IEBnZXQtc3RhdHVzLWNvbG9ycyFcblxuICAgIGN0eC5saW5lLXdpZHRoID0gNVxuICAgIGN0eC5zdHJva2Utc3R5bGUgPSBiYXNlLWNvbG9yXG5cbiAgICBjdHguYmVnaW4tcGF0aCFcbiAgICBjdHgubW92ZS10byBmcC54LCBmcC55XG4gICAgY3R4LmJlemllci1jdXJ2ZS10byBmcC54ICsgYiwgZnAueSwgdHAueCAtIGIsIHRwLnksIHRwLngsIHRwLnlcbiAgICBjdHguc3Ryb2tlIVxuXG4gICAgY3R4Lmdsb2JhbC1hbHBoYSA9IHNzXG4gICAgY3R4LnN0cm9rZS1zdHlsZSA9IHBvd2VyLWNvbG9yXG5cbiAgICBjdHguYmVnaW4tcGF0aCFcbiAgICBjdHgubW92ZS10byBmcC54LCBmcC55XG4gICAgY3R4LmJlemllci1jdXJ2ZS10byBmcC54ICsgYiwgZnAueSwgdHAueCAtIGIsIHRwLnksIHRwLngsIHRwLnlcbiAgICBjdHguc3Ryb2tlIVxuXG4gICAgY3R4Lmdsb2JhbC1hbHBoYSA9IDFcblxuIiwiXG57IGlkLCBsb2cgfSA9IHJlcXVpcmUgXFxzdGRcblxueyBSZXByZXNlbnRhdGlvbiB9ID0gcmVxdWlyZSBcXC4vYmFzZVxuXG5cbmV4cG9ydCBjbGFzcyBNaWNSZXAgZXh0ZW5kcyBSZXByZXNlbnRhdGlvblxuXG4gIHNpemUgPSA3MFxuXG4gIC0+XG4gICAgc3VwZXIgLi4uXG5cbiAgICBAY3R4LmZpbGwtc3R5bGUgPSBcXGdyZXlcbiAgICBAY3R4LmZpbGwtcmVjdCAwLCAwLCBAc2l6ZSwgQHNpemVcblxuICAgIEBjdHguZmlsbC1zdHlsZSA9IFxcbGlnaHRncmV5XG4gICAgQGN0eC5maWxsLXJlY3QgMCAsIDAsIEBzaXplLCBAc2l6ZVxuXG4gICAgQGN0eC5maWxsLXN0eWxlID0gXFxkYXJrZ3JleVxuICAgIEBjdHguZmlsbC1yZWN0IDAsIEBzaXplLzIsIEBzaXplLCBAc2l6ZS8yXG5cbiAgZHJhdzogKHRhcmdldCkgLT5cblxuICAgIHcgPSBAc2l6ZS81XG4gICAgdiA9IHRhcmdldC52YWx1ZS8yXG4gICAgdCA9IHRhcmdldC50aHJlc2hvbGQvMlxuXG4gICAgQGN0eC5maWxsLXN0eWxlID0gXFx3aGl0ZVxuICAgIEBjdHguZmlsbC1yZWN0IEBzaXplLzIgLSB3LzIsIDAsIHcsIEBzaXplXG4gICAgQGN0eC5maWxsLXN0eWxlID0gaWYgdGFyZ2V0LnN0YXRlIHRoZW4gXFxyZWQgZWxzZSBcXGJsdWVcbiAgICBAY3R4LmZpbGwtcmVjdCBAc2l6ZS8yIC0gdy8yLCBAc2l6ZSAtIDEwIC0gQHNpemUgKiB2LCB3LCBAc2l6ZSAqIHZcbiAgICBAY3R4Lmdsb2JhbC1hbHBoYSA9IDFcblxuICAgIEBkcmF3LWJvcmRlciFcblxuIiwiXG57IGlkLCBsb2cgfSA9IHJlcXVpcmUgXFxzdGRcblxueyBSZXByZXNlbnRhdGlvbiB9ID0gcmVxdWlyZSBcXC4vYmFzZVxuXG5rZXlzeW1ib2xzID1cbiAgMDogXFzil4BcbiAgMTogXFzilqBcbiAgMjogXFzilrZcblxuXG5leHBvcnQgY2xhc3MgTW91c2VSZXAgZXh0ZW5kcyBSZXByZXNlbnRhdGlvblxuXG4gIC0+XG4gICAgc3VwZXIgLi4uXG4gICAgQHN5bWJvbCA9IGtleXN5bWJvbHNbQHRhcmdldC5idXR0b24taW5kZXhdXG5cbiAgZHJhdzogLT5cbiAgICBzdXBlciAuLi5cbiAgICBAY3R4LmZpbGwtc3R5bGUgPSBcXGJsYWNrXG4gICAgQGN0eC5mb250ID0gXCIje0BzaXplLzJ9cHggbW9ub3NwYWNlXCJcbiAgICBAY3R4LnRleHQtYWxpZ24gPSBcXGNlbnRlclxuICAgIEBjdHgudGV4dC1iYXNlbGluZSA9IFxcbWlkZGxlXG4gICAgQGN0eC5maWxsLXRleHQgQHN5bWJvbCwgQHNpemUvMiwgQHNpemUvMiwgQHNpemUsIEBzaXplXG5cbiIsIlxueyBpZCwgbG9nLCB2MiB9ID0gcmVxdWlyZSBcXHN0ZFxuXG5cbnBvcnQtY29sb3IgPSAoeyB0eXBlIH0pIC0+XG4gIHN3aXRjaCB0eXBlXG4gIHwgU0lHTkFMX1RZUEVfTlVNQkVSID0+IENPTE9SX01BR0VOVEFcbiAgfCBTSUdOQUxfVFlQRV9HUkFQSElDID0+IENPTE9SX0JSSUdIVF9CTFVFXG4gIHwgb3RoZXJ3aXNlID0+ICBDT0xPUl9CUklHSFRfR1JFRU5cblxuXG5leHBvcnQgY2xhc3MgUG9ydFNldFJlcFxuXG4gIFBPUlRfV0lEVEggPSAyMFxuXG4gIChAdGFyZ2V0LCB7IEBvZmZzZXQgPSAwLCBAaGVpZ2h0ID0gMTAwLCBAYmFzaXMgPSB2MiAwIDAgfSkgLT5cbiAgICBAcG9ydC1wb3NpdGlvbnMgPSBbIHYyIDAsIDAgZm9yIGkgaW4gQHRhcmdldC5wb3J0cyBdXG4gICAgQGxlbmd0aCA9IEBwb3J0LXBvc2l0aW9ucy5sZW5ndGhcbiAgICBAbW92ZS10byBAYmFzaXNcblxuICBnZXQtcG9zOiAoaXgpIC0+XG4gICAgQHBvcnQtcG9zaXRpb25zW2l4XVxuXG4gIGdldC1wb3J0LXZlcnRpY2FsLXBvczogKGkpIC0+XG4gICAgc3BhY2UgPSAoQGhlaWdodCAtIDIwICogQGxlbmd0aCkgLyBpZiBAbGVuZ3RoIGlzIDEgdGhlbiAxIGVsc2UgQGxlbmd0aCAtIDFcbiAgICBzdGFydCA9IFBPUlRfV0lEVEgvMiAtIEBoZWlnaHQvMlxuICAgIHktcG9zID0gc3RhcnQgKyBpICogKFBPUlRfV0lEVEggKyBzcGFjZSlcblxuICBtb3ZlLXRvOiAoeyB4LCB5IH0pIC0+XG4gICAgQGJhc2lzLnggPSB4ICsgQG9mZnNldFxuICAgIEBiYXNpcy55ID0geVxuXG4gICAgZm9yIHBvcywgaSBpbiBAcG9ydC1wb3NpdGlvbnNcbiAgICAgIHBvcy54ID0gQGJhc2lzLnhcbiAgICAgIHBvcy55ID0gQGJhc2lzLnkgKyBAZ2V0LXBvcnQtdmVydGljYWwtcG9zIGlcblxuICBkcmF3OiAoeyBjdHggfSkgLT5cbiAgICBmb3IgcG9ydCwgaSBpbiBAdGFyZ2V0LnBvcnRzXG4gICAgICBjdHguZmlsbC1zdHlsZSA9IHBvcnQtY29sb3IgcG9ydFxuICAgICAgY3R4LmZpbGwtcmVjdCBAcG9ydC1wb3NpdGlvbnNbaV0ueCwgQHBvcnQtcG9zaXRpb25zW2ldLnkgLSAxMCwgOCwgMjBcblxuIiwiXG57IGlkLCBsb2csIHYyIH0gPSByZXF1aXJlIFxcc3RkXG5cbnsgUmVwcmVzZW50YXRpb24gfSA9IHJlcXVpcmUgXFwuL2Jhc2VcblxuZXhwb3J0IGNsYXNzIFB1cHBldFJlcCBleHRlbmRzIFJlcHJlc2VudGF0aW9uXG5cbiAgb2Zmc2V0ID0gdjIgMTAgMTBcblxuICAtPlxuICAgIHN1cGVyIC4uLlxuXG4gIGRyYXc6ICh7IGN0eCB9KSAtPlxuICAgIEBzaXplID0gQHRhcmdldC5nZXQtc2l6ZSFcbiAgICBAY2FudmFzLndpZHRoID0gQGNhbnZhcy5oZWlnaHQgPSBAc2l6ZVxuICAgIEBkcmF3LWJvcmRlciFcblxuICAgIGlmIHNwcml0ZSA9IEB0YXJnZXQuZ2V0LXdpbm5lciFcbiAgICAgIHNwcml0ZS5ibGl0LXRvIEBjdHgsIG9mZnNldC54LCBvZmZzZXQueSArIEBzaXplIC0gMjAgLSBzcHJpdGUuaGVpZ2h0XG5cbiIsIlxueyBSZXByZXNlbnRhdGlvbiB9ID0gcmVxdWlyZSBcXC4vYmFzZVxuXG5leHBvcnQgY2xhc3MgVGltZXJSZXAgZXh0ZW5kcyBSZXByZXNlbnRhdGlvblxuICAtPlxuICAgIHN1cGVyIC4uLlxuXG4gIGRyYXc6IC0+XG4gICAgc3VwZXIgLi4uXG4gICAgQGN0eC5maWxsLXN0eWxlID0gXFxibGFja1xuICAgIEBjdHguZm9udCA9IFwiI3tAc2l6ZS80fXB4IG1vbm9zcGFjZVwiXG4gICAgQGN0eC50ZXh0LWFsaWduID0gXFxjZW50ZXJcbiAgICBAY3R4LnRleHQtYmFzZWxpbmUgPSBcXG1pZGRsZVxuICAgIEBjdHguYmVnaW4tcGF0aCFcbiAgICBAY3R4Lm1vdmUtdG8gMCwgQHNpemUvMiArIDAuNVxuICAgIEBjdHgubGluZS10byBAc2l6ZSwgQHNpemUvMiArIDAuNVxuICAgIEBjdHguc3Ryb2tlIVxuICAgIEBjdHguZmlsbC10ZXh0IEB0YXJnZXQudGltZSwgQHNpemUvMiwgQHNpemUvMiAtIEBzaXplLzUsIEBzaXplLCBAc2l6ZVxuICAgIEBjdHguZmlsbC10ZXh0IEB0YXJnZXQuZHV0eSwgQHNpemUvMiwgQHNpemUvMiArIEBzaXplLzUsIEBzaXplLCBAc2l6ZVxuXG4iLCJcbnsgaWQsIGxvZyB9ID0gcmVxdWlyZSBcXHN0ZFxuXG5cbmV4cG9ydCBjbGFzcyBTY2VuZVxuXG4gIChzY2VuZS1kYXRhKSAtPlxuXG4gICAgQGxpbmtzID0gW11cbiAgICBAbm9kZXMgPSBbXVxuXG4gICAgQHB1cHBldCA9IHB1bGw6IGlkXG5cbiAgICBpZiBzY2VuZS1kYXRhXG4gICAgICBAaW1wb3J0IHNjZW5lLWRhdGFcblxuICBwdWxsOiAtPiBAcHVwcGV0LnB1bGwhXG5cbiAgaW1wb3J0OiAoeyBAcHVwcGV0LCBAbGlua3MsIEBub2RlcyB9KSAtPlxuXG4gIGRyYXctb250bzogKHdvcmtzcGFjZSkgLT5cbiAgICBAbGlua3MubWFwICguZHJhdyB3b3Jrc3BhY2UpXG4gICAgQG5vZGVzLm1hcCAoLmRyYXcgd29ya3NwYWNlKVxuXG4iLCJcbnsgaWQsIGxvZyB9ID0gcmVxdWlyZSBcXHN0ZFxuXG57IE5vZGUgfSA9IHJlcXVpcmUgXFwuL25vZGVzL2Jhc2VcbnsgUmVwcmVzZW50YXRpb24gfSA9IHJlcXVpcmUgXFwuL3JlcHJlc2VudGF0aW9ucy9iYXNlXG5cblxuZXhwb3J0IGNsYXNzIFBva2VTaGltIGV4dGVuZHMgTm9kZVxuXG4gIGlucHV0LXNwZWMgPSBbIHsgdHlwZTogU0lHTkFMX1RZUEVfUE9LRSwgb24tcHVzaDogaWQgfSBdXG5cbiAgLT5cbiAgICBzdXBlciAuLi5cbiAgICBAZ2VuZXJhdGUtcG9ydHMgeyBpbnB1dC1zcGVjIH1cblxuICBzZXJpYWxpc2U6IC0+IHt9XG5cblxuZXhwb3J0IGNsYXNzIE51bWVyaWNTaGltIGV4dGVuZHMgTm9kZVxuXG4gIGlucHV0LXNwZWMgPSBbIHsgdHlwZTogU0lHTkFMX1RZUEVfTlVNQkVSLCBvbi1wdXNoOiBpZCB9IF1cblxuICAtPlxuICAgIHN1cGVyIC4uLlxuICAgIEBnZW5lcmF0ZS1wb3J0cyB7IGlucHV0LXNwZWMgfVxuXG4gIHNlcmlhbGlzZTogLT4ge31cblxuXG5leHBvcnQgY2xhc3MgR3JhcGhpY1NoaW0gZXh0ZW5kcyBOb2RlXG5cbiAgaW5wdXQtc3BlYyA9IFsgeyB0eXBlOiBTSUdOQUxfVFlQRV9HUkFQSElDLCBvbi1wdXNoOiBpZCB9IF1cblxuICAtPlxuICAgIHN1cGVyIC4uLlxuICAgIEBnZW5lcmF0ZS1wb3J0cyB7IGlucHV0LXNwZWMgfVxuXG4gIHNlcmlhbGlzZTogLT4ge31cblxuXG5leHBvcnQgY2xhc3MgU2hpbVJlcCBleHRlbmRzIFJlcHJlc2VudGF0aW9uXG5cbmV4cG9ydCBjbGFzcyBBYnN0cmFjdFNoaW1SZXAgZXh0ZW5kcyBSZXByZXNlbnRhdGlvblxuXG4gIGRyYXc6IC0+XG4gICAgQGRyYXctYmFja2luZyBDT0xPUl9QVVJQTEVcbiAgICBAY3R4Lmdsb2JhbC1hbHBoYSA9IEB0YXJnZXQuaW5wdXRzLmdldCgwKS5wdWxsIVxuICAgIEBjdHguZmlsbC1yZWN0IDAsIDAsIEBzaXplLCBAc2l6ZVxuICAgIEBjdHguZ2xvYmFsLWFscGhhID0gMVxuICAgIEBjdHhcbiAgICBAZHJhdy1ib3JkZXIgQ09MT1JfUFVSUExFXG5cbmV4cG9ydCBjbGFzcyBOdW1lcmljU2hpbVJlcCBleHRlbmRzIFJlcHJlc2VudGF0aW9uXG5cbiAgZHJhdzogLT5cbiAgICBzdXBlciAuLi5cblxuICAgIHZhbHVlID0gQHRhcmdldC5pbnB1dHMuZ2V0KDApLnB1bGwhXG4gICAgICB8PiAoMTAwICopXG4gICAgICB8PiBNYXRoLnJvdW5kXG4gICAgICB8PiAoMC4wMSAqKVxuICAgICAgfD4gLT4gU3RyaW5nIGl0XG4gICAgICB8PiAoLnJlcGxhY2UgL14wLywgJycpXG4gICAgICB8PiAoLnN1YnN0ciAwLCAzKVxuXG4gICAgQGN0eC5maWxsLXN0eWxlID0gXFxibGFja1xuICAgIEBjdHguZm9udCA9IFwiI3tAc2l6ZS8zfXB4IG1vbm9zcGFjZVwiXG4gICAgQGN0eC50ZXh0LWFsaWduID0gXFxjZW50ZXJcbiAgICBAY3R4LnRleHQtYmFzZWxpbmUgPSBcXG1pZGRsZVxuICAgIEBjdHguZmlsbC10ZXh0IHZhbHVlLCBAc2l6ZS8yLCBAc2l6ZS8yICwgQHNpemUsIEBzaXplXG5cbiIsIlxueyBpZCwgbG9nLCB2MiB9ID0gcmVxdWlyZSBcXHN0ZFxuXG57IEJsaXR0ZXIgfSA9IHJlcXVpcmUgXFwuL2JsaXR0ZXJcblxuZXhwb3J0IGNsYXNzIFNwcml0ZSBleHRlbmRzIEJsaXR0ZXJcblxuICAoeyBAc3JjIH0pIC0+XG4gICAgc3VwZXIgLi4uXG5cbiAgICBAaW1nID0gbmV3IEltYWdlXG5cbiAgICBAc2l6ZSA9IHYyIDAgMFxuXG4gICAgQGltZy5vbmxvYWQgPSB+PlxuICAgICAgQHdpZHRoICA9IEBjYW52YXMud2lkdGggID0gQGltZy53aWR0aFxuICAgICAgQGhlaWdodCA9IEBjYW52YXMuaGVpZ2h0ID0gQGltZy5oZWlnaHRcbiAgICAgIEBzaXplID0gdjIgQHdpZHRoLCBAaGVpZ2h0XG4gICAgICBAY3R4LmRyYXctaW1hZ2UgQGltZywgMCwgMFxuICAgICAgR2xvYmFsU2VydmljZXMuUG9rZS5wb2tlIVxuXG4gICAgQGltZy5zcmMgPSBAc3JjXG5cbiAgICBAYWN0aXZlID0gbm9cblxuICBzZXJpYWxpc2U6IC0+XG4gICAgc3JjOiBAc3JjXG5cbiIsIlxuZXhwb3J0IGlkID0gLT4gaXRcblxuZXhwb3J0IGxvZyA9IC0+IGNvbnNvbGUubG9nLmFwcGx5IGNvbnNvbGUsICY7ICYwXG5cbmV4cG9ydCBmbGlwID0gKM67KSAtPiAoYSwgYikgLS0+IM67IGIsIGFcblxuZXhwb3J0IGRlbGF5ID0gZmxpcCBzZXQtdGltZW91dFxuXG5leHBvcnQgZGVmZXIgPSBkZWxheSAwXG5cbmV4cG9ydCB2MiA9ICh4LCB5KSAtPiBpZiB5PyB0aGVuIHsgeCwgeSB9IGVsc2UgeyB4OiB4LngsIHk6IHgueSB9XG5cbmV4cG9ydCBmbG9vciA9IE1hdGguZmxvb3JcblxuZXhwb3J0IHJhbmQgPSAoKiBNYXRoLnJhbmRvbSEpXG5cbmV4cG9ydCByYW5kb20tZnJvbSA9ICh4cykgLT4geHNbZmxvb3IgcmFuZCB4cy5sZW5ndGhdXG5cbmV4cG9ydCBzcXJ0ID0gTWF0aC5zcXJ0XG5cbmV4cG9ydCBoeXAgPSAoYSwgYikgLT5cbiAgzpR4ID0gYi54IC0gYS54XG4gIM6UeSA9IGIueSAtIGEueVxuICBzcXJ0IM6UeCAqIM6UeCArIM6UeSAqIM6UeVxuXG5leHBvcnQgcmFmID0gcmVxdWVzdC1hbmltYXRpb24tZnJhbWVcblxuZXhwb3J0IG1hc2ggPSAoeHMpIC0+IHsgWyBrLCB2IF0gZm9yIFsgaywgdiBdIGluIHhzIH1cblxuZXhwb3J0IGxvZy1lcnJvciA9IC0+IGxvZyBALCAmXG5cbmV4cG9ydCBnZXQtbWljcm9waG9uZSA9ICjOuykgLT5cbiAgbmF2aWdhdG9yLndlYmtpdC1nZXQtdXNlci1tZWRpYSB7IGF1ZGlvOiB0cnVlIH0sIM67LCBsb2ctZXJyb3JcblxuZXhwb3J0IGtleXMgPSAtPiBmb3Igayx2IG9mIGl0ID0+IGtcblxuZXhwb3J0IGxvYWQtaW1hZ2UgPSAoc3JjLCDOuyA9IGlkKSAtPlxuICBpbWFnZSA9IG5ldyBJbWFnZVxuICBpbWFnZS5zcmMgPSBzcmNcbiAgaW1hZ2Uub25sb2FkID0gzrtcbiAgcmV0dXJuIGltYWdlXG5cbmV4cG9ydCBhYnMgPSBNYXRoLmFic1xuXG5leHBvcnQgaW52b2tlID0gLT4gaXQ/IVxuXG5leHBvcnQgdHJhbnNsYXRlMiA9IChvcmlnaW4sIHRyYW5zbGF0aW9uKSAtPiB2MiBvcmlnaW4ueCArIHRyYW5zbGF0aW9uLngsIG9yaWdpbi55ICsgdHJhbnNsYXRpb24ueVxuXG4iLCJcbiMgUmVxdWlyZVxuXG57IGlkLCBsb2csIG1hc2gsIHYyIH0gPSByZXF1aXJlIFxcc3RkXG5cbnsgTGluayB9ICAgICAgICA9IHJlcXVpcmUgXFwuL2xpbmtcbnsgU3ByaXRlIH0gICAgICA9IHJlcXVpcmUgXFwuL3Nwcml0ZVxueyBWaXN1YWxOb2RlIH0gID0gcmVxdWlyZSBcXC4vdmlzdWFsLW5vZGVcblxueyBQdXBwZXQgfSAgICAgID0gcmVxdWlyZSBcXC4vcHVwcGV0XG57IEtleU5vZGUgfSAgICAgPSByZXF1aXJlIFxcLi9ub2Rlcy9rZXlcbnsgTWljTm9kZSB9ICAgICA9IHJlcXVpcmUgXFwuL25vZGVzL21pY1xueyBNb3VzZU5vZGUgfSAgID0gcmVxdWlyZSBcXC4vbm9kZXMvbW91c2VcbnsgVGltZXJOb2RlIH0gICA9IHJlcXVpcmUgXFwuL25vZGVzL3RpbWVyXG57IEdyYXBoaWNOb2RlIH0gPSByZXF1aXJlIFxcLi9ub2Rlcy9ncmFwaGljXG5cbnsgTWljUmVwIH0gICAgICA9IHJlcXVpcmUgXFwuL3JlcHJlc2VudGF0aW9ucy9taWNcbnsgS2V5UmVwIH0gICAgICA9IHJlcXVpcmUgXFwuL3JlcHJlc2VudGF0aW9ucy9rZXlcbnsgVGltZXJSZXAgfSAgICA9IHJlcXVpcmUgXFwuL3JlcHJlc2VudGF0aW9ucy90aW1lclxueyBQdXBwZXRSZXAgfSAgID0gcmVxdWlyZSBcXC4vcmVwcmVzZW50YXRpb25zL3B1cHBldFxueyBHcmFwaGljUmVwIH0gID0gcmVxdWlyZSBcXC4vcmVwcmVzZW50YXRpb25zL2dyYXBoaWNcbnsgTW91c2VSZXAgfSAgICA9IHJlcXVpcmUgXFwuL3JlcHJlc2VudGF0aW9ucy9tb3VzZVxueyBMaW5rUmVwIH0gICAgID0gcmVxdWlyZSBcXC4vcmVwcmVzZW50YXRpb25zL2xpbmtcblxueyBOdW1lcmljU2hpbSwgTnVtZXJpY1NoaW1SZXAgfSA9IHJlcXVpcmUgXFwuL3NoaW1cblxuXG4jIENvbnN0cnVjdCBkZWZhdWx0IHRlc3Qgc2NlbmUgbWFudWFsbHlcblxuZXhwb3J0IGNvbnN0cnVjdC10ZXN0LXNjZW5lID0gLT5cblxuICAjIEV4cG9ydFxuXG4gIG91dHB1dCA9XG4gICAgbm9kZXM6IFtdXG4gICAgbGlua3M6IFtdXG4gICAgcHVwcGV0OiBudWxsXG5cblxuICAjIENvcmUgbm9kZXNcblxuICBwdXBwZXQgPSBuZXcgUHVwcGV0XG5cbiAgei1rZXkgPSBuZXcgS2V5Tm9kZSBrZXljb2RlOiBLRVlfWlxuICB4LWtleSA9IG5ldyBLZXlOb2RlIGtleWNvZGU6IEtFWV9YXG4gIGMta2V5ID0gbmV3IEtleU5vZGUga2V5Y29kZTogS0VZX0NcbiAgdi1rZXkgPSBuZXcgS2V5Tm9kZSBrZXljb2RlOiBLRVlfVlxuXG4gIHRpbWVyID0gbmV3IFRpbWVyTm9kZSB0aW1lOiAxMCwgZHV0eTogMC4xLCBvZmZzZXQ6IDdcbiAgbGVmdCAgPSBuZXcgTW91c2VOb2RlIGJ1dHRvbi1pbmRleDogTU9VU0VfTEVGVFxuICBtaWMgICA9IG5ldyBNaWNOb2RlIHRocmVzaG9sZDogMS4xXG5cbiAgb3V0cHV0Lm5vZGVzLnB1c2ggbWljLW5vZGUgICA9IG5ldyBWaXN1YWxOb2RlIGNvbnRlbnQ6IG1pYywgICByZXA6IChuZXcgTWljUmVwIG1pYyksICAgICBzaXplOiA3MCwgcG9zOiB2MiA1MCwgODAwXG4gIG91dHB1dC5ub2Rlcy5wdXNoIGxlZnQtbm9kZSAgPSBuZXcgVmlzdWFsTm9kZSBjb250ZW50OiBsZWZ0LCAgcmVwOiAobmV3IE1vdXNlUmVwIGxlZnQpLCAgc2l6ZTogNzAsIHBvczogdjIgNTAsIDEwMFxuICBvdXRwdXQubm9kZXMucHVzaCB0aW1lci1ub2RlID0gbmV3IFZpc3VhbE5vZGUgY29udGVudDogdGltZXIsIHJlcDogKG5ldyBUaW1lclJlcCB0aW1lciksIHNpemU6IDEwMCwgcG9zOiB2MiAgNjUgNjg1XG5cbiAgIyBBc3NpZ24gbG9naWNhbCBub2RlcyB0byByZXByZXNlbnRhdGl2ZSBub2Rlc1xuICBvdXRwdXQubm9kZXMucHVzaCB6LW5vZGUgPSBuZXcgVmlzdWFsTm9kZSBjb250ZW50OiB6LWtleSwgcmVwOiAobmV3IEtleVJlcCB6LWtleSksIHNpemU6IDcwLCAgcG9zOiB2MiA1MCAxOTVcbiAgb3V0cHV0Lm5vZGVzLnB1c2ggeC1ub2RlID0gbmV3IFZpc3VhbE5vZGUgY29udGVudDogeC1rZXksIHJlcDogKG5ldyBLZXlSZXAgeC1rZXkpLCBzaXplOiA3MCwgIHBvczogdjIgNTAgMjc1XG4gIG91dHB1dC5ub2Rlcy5wdXNoIGMtbm9kZSA9IG5ldyBWaXN1YWxOb2RlIGNvbnRlbnQ6IGMta2V5LCByZXA6IChuZXcgS2V5UmVwIGMta2V5KSwgc2l6ZTogNzAsICBwb3M6IHYyIDUwIDM1NVxuICBvdXRwdXQubm9kZXMucHVzaCB2LW5vZGUgPSBuZXcgVmlzdWFsTm9kZSBjb250ZW50OiB2LWtleSwgcmVwOiAobmV3IEtleVJlcCB2LWtleSksIHNpemU6IDcwLCAgcG9zOiB2MiA1MCA0MzVcblxuICBvdXRwdXQubm9kZXMucHVzaCBwdXBwZXQtbm9kZSA9IG5ldyBWaXN1YWxOb2RlIGRvXG4gICAgY29udGVudDogcHVwcGV0XG4gICAgcmVwOiAgICAgKG5ldyBQdXBwZXRSZXAgcHVwcGV0KVxuICAgIHNpemU6ICAgIDE4MFxuICAgIHBvczogICAgIHYyIDU1MCA0NTBcblxuICAjIENyZWF0ZSBzcHJpdGUgc291cmNlcyAoZnVsbCBzZXQ6IGxvb2sgZHJhdyBjaG9rZSBkcm9wIGZydXN0cmF0ZSBzaW5nIHN0dWR5IHRoaW5rIHRyYXNoIGRyaW5rKVxuICBhbmltLW5vZGVzID0gbWFzaCBkb1xuICAgIGZvciBuYW1lLCBpIGluIDxbIGxvb2sgZHJhdyBkcm9wIGZydXN0cmF0ZSBjaG9rZSBzaW5nIF0+XG4gICAgICBzcHJpdGUgID0gbmV3IFNwcml0ZSBzcmM6IFwiYXNzZXRzLyN7bmFtZX1fMDEucG5nXCJcbiAgICAgIGdyYXBoaWMgPSBuZXcgR3JhcGhpY05vZGUgeyBzcHJpdGUgfVxuICAgICAgb3V0cHV0Lm5vZGVzLnB1c2ggbm9kZSA9IG5ldyBWaXN1YWxOb2RlIGNvbnRlbnQ6IGdyYXBoaWMsIHJlcDogKG5ldyBHcmFwaGljUmVwIGdyYXBoaWMpLCBzaXplOiAxMzAsIHBvczogdjIgMjYwIDgwICsgMTQwICogaVxuICAgICAgWyBuYW1lLCBub2RlIF1cblxuICAjIENyZWF0ZSBsaW5rc1xuICBvdXRwdXQubGlua3MucHVzaCBWaXN1YWxOb2RlLmxpbmsgYW5pbS1ub2Rlcy5sb29rLCAgcHVwcGV0LW5vZGVcbiAgb3V0cHV0LmxpbmtzIC49IGNvbmNhdCBWaXN1YWxOb2RlLmNoYWluIGxlZnQtbm9kZSwgIGFuaW0tbm9kZXMuZHJhdywgcHVwcGV0LW5vZGVcbiAgb3V0cHV0LmxpbmtzIC49IGNvbmNhdCBWaXN1YWxOb2RlLmNoYWluIHotbm9kZSwgICAgIGFuaW0tbm9kZXMuZHJvcCwgcHVwcGV0LW5vZGVcbiAgb3V0cHV0LmxpbmtzIC49IGNvbmNhdCBWaXN1YWxOb2RlLmNoYWluIHgtbm9kZSwgICAgIGFuaW0tbm9kZXMuZnJ1c3RyYXRlLCBwdXBwZXQtbm9kZVxuICBvdXRwdXQubGlua3MgLj0gY29uY2F0IFZpc3VhbE5vZGUuY2hhaW4gdGltZXItbm9kZSwgYW5pbS1ub2Rlcy5jaG9rZSwgcHVwcGV0LW5vZGVcbiAgb3V0cHV0LmxpbmtzIC49IGNvbmNhdCBWaXN1YWxOb2RlLmNoYWluIG1pYy1ub2RlLCAgIGFuaW0tbm9kZXMuc2luZywgcHVwcGV0LW5vZGVcblxuICAjIFRlc3RpbmcgaW5jb3JyZWN0IGxpbmtzXG4gICNvdXRwdXQubGlua3MucHVzaCBuZXcgTGlua1JlcCBuZXcgTGluayBmcm9tOiB6LW5vZGUuY29udGVudC5vdXRwdXRzLm5leHQsIHRvOiBwdXBwZXQtbm9kZS5jb250ZW50LmlucHV0cy5uZXh0XG5cbiAgIyBTaGltIGxpbmtzXG4gIG91dHB1dC5ub2Rlcy5wdXNoIHNoaW0tbm9kZSA9IG5ldyBWaXN1YWxOb2RlIGRvXG4gICAgY29udGVudDogKHNoaW0gPSBuZXcgTnVtZXJpY1NoaW0pXG4gICAgcmVwOiAobmV3IE51bWVyaWNTaGltUmVwIHNoaW0pXG4gICAgc2l6ZTogNTBcbiAgICBwb3M6IHYyIDE0MCwgODQwXG5cbiAgb3V0cHV0LmxpbmtzLnB1c2ggbmV3IExpbmtSZXAgbmV3IExpbmsgZnJvbTogbWljLW5vZGUuY29udGVudC5vdXRwdXRzLm5leHQsIHRvOiBzaGltLW5vZGUuY29udGVudC5pbnB1dHMubmV4dFxuXG4gIG91dHB1dC5wdXBwZXQgPSBwdXBwZXRcblxuICByZXR1cm4gb3V0cHV0XG5cbiIsIlxueyBpZCwgbG9nLCB2MiB9ID0gcmVxdWlyZSBcXHN0ZFxuXG57IFJlcHJlc2VudGF0aW9uIH0gPSByZXF1aXJlIFxcLi9yZXByZXNlbnRhdGlvbnMvYmFzZVxueyBSZWN0WFlTIH0gICAgICAgID0gcmVxdWlyZSBcXC4vcmVjdFxueyBMaW5rIH0gICAgICAgICAgID0gcmVxdWlyZSBcXC4vbGlua1xueyBQb3J0U2V0UmVwIH0gICAgID0gcmVxdWlyZSBcXC4vcmVwcmVzZW50YXRpb25zL3BvcnQtc2V0XG57IExpbmtSZXAgfSAgICAgICAgPSByZXF1aXJlIFxcLi9yZXByZXNlbnRhdGlvbnMvbGlua1xuXG5cbmV4cG9ydCBjbGFzcyBWaXN1YWxOb2RlXG5cbiAgKHsgQGNvbnRlbnQsIEBwb3MsIEBzaXplLCBAcmVwID0gUmVwcmVzZW50YXRpb24uTnVsbFJlcHJlc2VudGF0aW9uIH0pIC0+XG5cbiAgICBAc3RhdGUgPVxuICAgICAgbW9kZTogSU5URVJBQ1RJT05fTU9ERV9JRExFXG4gICAgICBzaWduYWw6IG9mZlxuXG4gICAgQGJvdW5kcyAgPSBuZXcgUmVjdFhZUyAgIEBwb3MsIEBzaXplXG4gICAgQGlucHV0cyAgPSBuZXcgUG9ydFNldFJlcCBAY29udGVudC5pbnB1dHMsICB7IGJhc2lzOiAodjIgQHBvcyksIGhlaWdodDogQHNpemUsIG9mZnNldDogQHNpemUvLTIgLSAzIH1cbiAgICBAb3V0cHV0cyA9IG5ldyBQb3J0U2V0UmVwIEBjb250ZW50Lm91dHB1dHMsIHsgYmFzaXM6ICh2MiBAcG9zKSwgaGVpZ2h0OiBAc2l6ZSwgb2Zmc2V0OiBAc2l6ZS8yIC0gNiB9XG5cbiAgICAjIFRPRE86IEkgc2hvdWxkbid0IGJhY2tyZWZlcmVuY2UgbGlrZSB0aGlzLiBPUiBTSE9VTEQgST8/XG4gICAgQGNvbnRlbnQucmVwID0gdGhpc1xuXG4gIHB1bGw6IC0+XG4gICAgQHN0YXRlLnNpZ25hbCA9IEBjb250ZW50LnN0YXRlXG5cbiAgZHJhdzogKHsgY3R4IH0pIC0+XG4gICAgQHJlcC5kcmF3IEBjb250ZW50XG4gICAgY3R4LmRyYXctaW1hZ2UgQHJlcC5jYW52YXMsIEBwb3MueCAtIEBzaXplLzIgLCBAcG9zLnkgLSBAc2l6ZS8yLCBAc2l6ZSwgQHNpemVcbiAgICBAaW5wdXRzLmRyYXcgeyBjdHggfVxuICAgIEBvdXRwdXRzLmRyYXcgeyBjdHggfVxuXG4gIHNldC1tb2RlOiAobW9kZSkgLT5cbiAgICBAcmVwLnNldC1tb2RlIG1vZGVcbiAgICBAc3RhdGUubW9kZSA9IG1vZGVcblxuICBtb3ZlLXRvOiAoeyB4LCB5IH0pIC0+XG4gICAgQHBvcy54ID0geFxuICAgIEBwb3MueSA9IHlcbiAgICBAdXBkYXRlLWNoaWxkLXBvcyFcblxuICBtb3ZlLWJ5OiAoeyB4LCB5IH0pIC0+XG4gICAgQHBvcy54ICs9IHhcbiAgICBAcG9zLnkgKz0geVxuICAgIEB1cGRhdGUtY2hpbGQtcG9zIVxuXG4gIHVwZGF0ZS1jaGlsZC1wb3M6IC0+XG4gICAgbG9nIFwiTW92ZWQgdG86XCIsIEBwb3MueCwgQHBvcy55ICAjIFRPRE86IFJlbmRlciB0aGlzIHRvIGNhbnZhcyBpbnN0ZWFkXG4gICAgQGJvdW5kcy5tb3ZlLXRvIEBwb3NcbiAgICBAaW5wdXRzLm1vdmUtdG8gQHBvc1xuICAgIEBvdXRwdXRzLm1vdmUtdG8gQHBvc1xuXG4gIGJvdW5kcy1jb250YWluczogKHBvaW50KSAtPlxuICAgIEBib3VuZHMuY29udGFpbnMgcG9pbnRcblxuICBzZXJpYWxpc2U6IC0+XG4gICAgQHJlcC5zZXJpYWxpc2UhXG5cbiAgQGxpbmsgPSAoYSwgYikgLT5cbiAgICBuZXcgTGlua1JlcCAobmV3IExpbmsgZnJvbTogYS5jb250ZW50Lm91dHB1dHMubmV4dCwgdG86IGIuY29udGVudC5pbnB1dHMubmV4dClcblxuICBAY2hhaW4gPSAoLi4ubm9kZXMpIC0+XG4gICAgZm9yIGkgZnJvbSAwIHRvIG5vZGVzLmxlbmd0aCAtIDJcbiAgICAgIEBsaW5rIG5vZGVzW2ldLCBub2Rlc1tpKzFdXG5cbiIsIlxueyBCbGl0dGVyIH0gPSByZXF1aXJlIFxcLi9ibGl0dGVyXG5cbmV4cG9ydCBjbGFzcyBXb3Jrc3BhY2UgZXh0ZW5kcyBCbGl0dGVyXG5cbiAgLT5cbiAgICBzdXBlciBzaXplOiA5NTBcblxuICBpbnN0YWxsOiAoaG9zdCkgLT5cbiAgICBob3N0LmFwcGVuZC1jaGlsZCBAY2FudmFzXG5cbiJdfQ==
